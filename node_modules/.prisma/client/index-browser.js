
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.8.1
 * Query Engine version: 78caf6feeaed953168c64e15a249c3e9a033ebe2
 */
Prisma.prismaVersion = {
  client: "5.8.1",
  engine: "78caf6feeaed953168c64e15a249c3e9a033ebe2"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  email: 'email',
  telephone: 'telephone',
  password: 'password',
  location: 'location',
  code: 'code',
  expiration: 'expiration',
  role_name: 'role_name',
  confirmed: 'confirmed',
  del_flg: 'del_flg',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  type: 'type',
  reference: 'reference',
  orderCode: 'orderCode',
  narration: 'narration'
};

exports.Prisma.BikersScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  email: 'email',
  telephone: 'telephone',
  password: 'password',
  code: 'code',
  expiration: 'expiration',
  confirmed: 'confirmed',
  del_flg: 'del_flg',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  location: 'location'
};

exports.Prisma.SendersScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  email: 'email',
  telephone: 'telephone',
  pickUpLocation: 'pickUpLocation',
  password: 'password',
  confirmed: 'confirmed',
  isDormat: 'isDormat',
  code: 'code',
  expiration: 'expiration',
  lastLogin: 'lastLogin',
  rewardPoints: 'rewardPoints',
  redeemedPoints: 'redeemedPoints',
  del_flg: 'del_flg',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReceiversScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  telephone: 'telephone',
  email: 'email',
  deliveryLocation: 'deliveryLocation',
  del_flg: 'del_flg',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  senderId: 'senderId'
};

exports.Prisma.OrdersScalarFieldEnum = {
  orderCode: 'orderCode',
  senderId: 'senderId',
  orderType: 'orderType',
  grandAmount: 'grandAmount',
  discountAmount: 'discountAmount',
  discountPercentage: 'discountPercentage',
  totalAmount: 'totalAmount',
  del_flg: 'del_flg',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  pickUpLocation: 'pickUpLocation'
};

exports.Prisma.OrderPackagesScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  orderCode: 'orderCode',
  receiverId: 'receiverId',
  deliveryLocation: 'deliveryLocation',
  details: 'details',
  paymentBy: 'paymentBy',
  estimatedWeight: 'estimatedWeight',
  baseWeight: 'baseWeight',
  extraWeight: 'extraWeight',
  valueOfPackage: 'valueOfPackage',
  itemCost: 'itemCost',
  deliveryFee: 'deliveryFee',
  itemImage: 'itemImage',
  pickupBikerId: 'pickupBikerId',
  deliverBikerId: 'deliverBikerId',
  status: 'status',
  secondReceipientName: 'secondReceipientName',
  secondReceipientNumber: 'secondReceipientNumber',
  reason: 'reason',
  pickup_share: 'pickup_share',
  delivery_share: 'delivery_share',
  transit_share: 'transit_share',
  system_share: 'system_share',
  qcs_share: 'qcs_share',
  del_flg: 'del_flg',
  insured: 'insured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PackageHistoriesScalarFieldEnum = {
  id: 'id',
  status: 'status',
  packageId: 'packageId',
  reason: 'reason',
  del_flg: 'del_flg',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SuburbsScalarFieldEnum = {
  id: 'id',
  suburb_name: 'suburb_name',
  del_flg: 'del_flg',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cityId: 'cityId'
};

exports.Prisma.CitiesScalarFieldEnum = {
  id: 'id',
  city_name: 'city_name',
  initials: 'initials',
  del_flg: 'del_flg',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryPricesScalarFieldEnum = {
  id: 'id',
  destinationId: 'destinationId',
  cityId: 'cityId',
  baseWeightPrice: 'baseWeightPrice',
  extraWeightPrice: 'extraWeightPrice',
  del_flg: 'del_flg',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  suburbsId: 'suburbsId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.OrderType = exports.$Enums.OrderType = {
  Express: 'Express',
  Scheduled: 'Scheduled',
  Same_Day: 'Same_Day',
  Next_Day: 'Next_Day'
};

exports.paymentBy = exports.$Enums.paymentBy = {
  Receiver: 'Receiver',
  Sender: 'Sender'
};

exports.status = exports.$Enums.status = {
  Created: 'Created',
  Processed: 'Processed',
  Enroute: 'Enroute',
  Arrived: 'Arrived',
  Dispatched: 'Dispatched',
  Delivered: 'Delivered',
  Returned: 'Returned',
  Pending: 'Pending'
};

exports.Prisma.ModelName = {
  users: 'users',
  payments: 'payments',
  bikers: 'bikers',
  senders: 'senders',
  receivers: 'receivers',
  orders: 'orders',
  orderPackages: 'orderPackages',
  packageHistories: 'packageHistories',
  suburbs: 'suburbs',
  cities: 'cities',
  deliveryPrices: 'deliveryPrices'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
