
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * the admin model for overlooking  the whole application
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model payments
 * the payment model to record payments
 */
export type payments = $Result.DefaultSelection<Prisma.$paymentsPayload>
/**
 * Model bikers
 * the biker model to deliver and pickup  orderpackages
 */
export type bikers = $Result.DefaultSelection<Prisma.$bikersPayload>
/**
 * Model senders
 * the sender  model to create orders and add receivers
 */
export type senders = $Result.DefaultSelection<Prisma.$sendersPayload>
/**
 * Model receivers
 * receiver model to  receive orderpackages
 */
export type receivers = $Result.DefaultSelection<Prisma.$receiversPayload>
/**
 * Model orders
 * order packages to create orders
 */
export type orders = $Result.DefaultSelection<Prisma.$ordersPayload>
/**
 * Model orderPackages
 * order packages to contain package information and package histories
 */
export type orderPackages = $Result.DefaultSelection<Prisma.$orderPackagesPayload>
/**
 * Model packageHistories
 * packageHistory model to contain package history information
 */
export type packageHistories = $Result.DefaultSelection<Prisma.$packageHistoriesPayload>
/**
 * Model suburbs
 * suburb model to contain the loctaion of the orders,orderpackages,senders and receivers
 */
export type suburbs = $Result.DefaultSelection<Prisma.$suburbsPayload>
/**
 * Model cities
 * city model to contain the cities information  and their prices
 */
export type cities = $Result.DefaultSelection<Prisma.$citiesPayload>
/**
 * Model deliveryPrices
 * deliveryPrices to contain the delivery price information and  prices of  each suburb
 */
export type deliveryPrices = $Result.DefaultSelection<Prisma.$deliveryPricesPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const OrderType: {
  Express: 'Express',
  Scheduled: 'Scheduled',
  Same_Day: 'Same_Day',
  Next_Day: 'Next_Day'
};

export type OrderType = (typeof OrderType)[keyof typeof OrderType]


export const paymentBy: {
  Receiver: 'Receiver',
  Sender: 'Sender'
};

export type paymentBy = (typeof paymentBy)[keyof typeof paymentBy]


export const status: {
  Created: 'Created',
  Processed: 'Processed',
  Enroute: 'Enroute',
  Arrived: 'Arrived',
  Dispatched: 'Dispatched',
  Delivered: 'Delivered',
  Returned: 'Returned',
  Pending: 'Pending'
};

export type status = (typeof status)[keyof typeof status]

}

export type OrderType = $Enums.OrderType

export const OrderType: typeof $Enums.OrderType

export type paymentBy = $Enums.paymentBy

export const paymentBy: typeof $Enums.paymentBy

export type status = $Enums.status

export const status: typeof $Enums.status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.payments`: Exposes CRUD operations for the **payments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payments.findMany()
    * ```
    */
  get payments(): Prisma.paymentsDelegate<ExtArgs>;

  /**
   * `prisma.bikers`: Exposes CRUD operations for the **bikers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bikers
    * const bikers = await prisma.bikers.findMany()
    * ```
    */
  get bikers(): Prisma.bikersDelegate<ExtArgs>;

  /**
   * `prisma.senders`: Exposes CRUD operations for the **senders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Senders
    * const senders = await prisma.senders.findMany()
    * ```
    */
  get senders(): Prisma.sendersDelegate<ExtArgs>;

  /**
   * `prisma.receivers`: Exposes CRUD operations for the **receivers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Receivers
    * const receivers = await prisma.receivers.findMany()
    * ```
    */
  get receivers(): Prisma.receiversDelegate<ExtArgs>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<ExtArgs>;

  /**
   * `prisma.orderPackages`: Exposes CRUD operations for the **orderPackages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderPackages
    * const orderPackages = await prisma.orderPackages.findMany()
    * ```
    */
  get orderPackages(): Prisma.orderPackagesDelegate<ExtArgs>;

  /**
   * `prisma.packageHistories`: Exposes CRUD operations for the **packageHistories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PackageHistories
    * const packageHistories = await prisma.packageHistories.findMany()
    * ```
    */
  get packageHistories(): Prisma.packageHistoriesDelegate<ExtArgs>;

  /**
   * `prisma.suburbs`: Exposes CRUD operations for the **suburbs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Suburbs
    * const suburbs = await prisma.suburbs.findMany()
    * ```
    */
  get suburbs(): Prisma.suburbsDelegate<ExtArgs>;

  /**
   * `prisma.cities`: Exposes CRUD operations for the **cities** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cities
    * const cities = await prisma.cities.findMany()
    * ```
    */
  get cities(): Prisma.citiesDelegate<ExtArgs>;

  /**
   * `prisma.deliveryPrices`: Exposes CRUD operations for the **deliveryPrices** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeliveryPrices
    * const deliveryPrices = await prisma.deliveryPrices.findMany()
    * ```
    */
  get deliveryPrices(): Prisma.deliveryPricesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.1
   * Query Engine version: 78caf6feeaed953168c64e15a249c3e9a033ebe2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    payments: 'payments',
    bikers: 'bikers',
    senders: 'senders',
    receivers: 'receivers',
    orders: 'orders',
    orderPackages: 'orderPackages',
    packageHistories: 'packageHistories',
    suburbs: 'suburbs',
    cities: 'cities',
    deliveryPrices: 'deliveryPrices'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'payments' | 'bikers' | 'senders' | 'receivers' | 'orders' | 'orderPackages' | 'packageHistories' | 'suburbs' | 'cities' | 'deliveryPrices'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      payments: {
        payload: Prisma.$paymentsPayload<ExtArgs>
        fields: Prisma.paymentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.paymentsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.paymentsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>
          }
          findFirst: {
            args: Prisma.paymentsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.paymentsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>
          }
          findMany: {
            args: Prisma.paymentsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>[]
          }
          create: {
            args: Prisma.paymentsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>
          }
          createMany: {
            args: Prisma.paymentsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.paymentsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>
          }
          update: {
            args: Prisma.paymentsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>
          }
          deleteMany: {
            args: Prisma.paymentsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.paymentsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.paymentsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$paymentsPayload>
          }
          aggregate: {
            args: Prisma.PaymentsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayments>
          }
          groupBy: {
            args: Prisma.paymentsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PaymentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.paymentsCountArgs<ExtArgs>,
            result: $Utils.Optional<PaymentsCountAggregateOutputType> | number
          }
        }
      }
      bikers: {
        payload: Prisma.$bikersPayload<ExtArgs>
        fields: Prisma.bikersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bikersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bikersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bikersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bikersPayload>
          }
          findFirst: {
            args: Prisma.bikersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bikersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bikersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bikersPayload>
          }
          findMany: {
            args: Prisma.bikersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bikersPayload>[]
          }
          create: {
            args: Prisma.bikersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bikersPayload>
          }
          createMany: {
            args: Prisma.bikersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.bikersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bikersPayload>
          }
          update: {
            args: Prisma.bikersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bikersPayload>
          }
          deleteMany: {
            args: Prisma.bikersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.bikersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.bikersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$bikersPayload>
          }
          aggregate: {
            args: Prisma.BikersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBikers>
          }
          groupBy: {
            args: Prisma.bikersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BikersGroupByOutputType>[]
          }
          count: {
            args: Prisma.bikersCountArgs<ExtArgs>,
            result: $Utils.Optional<BikersCountAggregateOutputType> | number
          }
        }
      }
      senders: {
        payload: Prisma.$sendersPayload<ExtArgs>
        fields: Prisma.sendersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sendersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sendersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sendersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sendersPayload>
          }
          findFirst: {
            args: Prisma.sendersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sendersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sendersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sendersPayload>
          }
          findMany: {
            args: Prisma.sendersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sendersPayload>[]
          }
          create: {
            args: Prisma.sendersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sendersPayload>
          }
          createMany: {
            args: Prisma.sendersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.sendersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sendersPayload>
          }
          update: {
            args: Prisma.sendersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sendersPayload>
          }
          deleteMany: {
            args: Prisma.sendersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.sendersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.sendersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sendersPayload>
          }
          aggregate: {
            args: Prisma.SendersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSenders>
          }
          groupBy: {
            args: Prisma.sendersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SendersGroupByOutputType>[]
          }
          count: {
            args: Prisma.sendersCountArgs<ExtArgs>,
            result: $Utils.Optional<SendersCountAggregateOutputType> | number
          }
        }
      }
      receivers: {
        payload: Prisma.$receiversPayload<ExtArgs>
        fields: Prisma.receiversFieldRefs
        operations: {
          findUnique: {
            args: Prisma.receiversFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receiversPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.receiversFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receiversPayload>
          }
          findFirst: {
            args: Prisma.receiversFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receiversPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.receiversFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receiversPayload>
          }
          findMany: {
            args: Prisma.receiversFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receiversPayload>[]
          }
          create: {
            args: Prisma.receiversCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receiversPayload>
          }
          createMany: {
            args: Prisma.receiversCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.receiversDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receiversPayload>
          }
          update: {
            args: Prisma.receiversUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receiversPayload>
          }
          deleteMany: {
            args: Prisma.receiversDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.receiversUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.receiversUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receiversPayload>
          }
          aggregate: {
            args: Prisma.ReceiversAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReceivers>
          }
          groupBy: {
            args: Prisma.receiversGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReceiversGroupByOutputType>[]
          }
          count: {
            args: Prisma.receiversCountArgs<ExtArgs>,
            result: $Utils.Optional<ReceiversCountAggregateOutputType> | number
          }
        }
      }
      orders: {
        payload: Prisma.$ordersPayload<ExtArgs>
        fields: Prisma.ordersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ordersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ordersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findFirst: {
            args: Prisma.ordersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ordersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findMany: {
            args: Prisma.ordersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          create: {
            args: Prisma.ordersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          createMany: {
            args: Prisma.ordersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ordersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          update: {
            args: Prisma.ordersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          deleteMany: {
            args: Prisma.ordersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ordersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ordersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          aggregate: {
            args: Prisma.OrdersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrders>
          }
          groupBy: {
            args: Prisma.ordersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrdersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ordersCountArgs<ExtArgs>,
            result: $Utils.Optional<OrdersCountAggregateOutputType> | number
          }
        }
      }
      orderPackages: {
        payload: Prisma.$orderPackagesPayload<ExtArgs>
        fields: Prisma.orderPackagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.orderPackagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderPackagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.orderPackagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderPackagesPayload>
          }
          findFirst: {
            args: Prisma.orderPackagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderPackagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.orderPackagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderPackagesPayload>
          }
          findMany: {
            args: Prisma.orderPackagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderPackagesPayload>[]
          }
          create: {
            args: Prisma.orderPackagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderPackagesPayload>
          }
          createMany: {
            args: Prisma.orderPackagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.orderPackagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderPackagesPayload>
          }
          update: {
            args: Prisma.orderPackagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderPackagesPayload>
          }
          deleteMany: {
            args: Prisma.orderPackagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.orderPackagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.orderPackagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$orderPackagesPayload>
          }
          aggregate: {
            args: Prisma.OrderPackagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrderPackages>
          }
          groupBy: {
            args: Prisma.orderPackagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrderPackagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.orderPackagesCountArgs<ExtArgs>,
            result: $Utils.Optional<OrderPackagesCountAggregateOutputType> | number
          }
        }
      }
      packageHistories: {
        payload: Prisma.$packageHistoriesPayload<ExtArgs>
        fields: Prisma.packageHistoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.packageHistoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$packageHistoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.packageHistoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$packageHistoriesPayload>
          }
          findFirst: {
            args: Prisma.packageHistoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$packageHistoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.packageHistoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$packageHistoriesPayload>
          }
          findMany: {
            args: Prisma.packageHistoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$packageHistoriesPayload>[]
          }
          create: {
            args: Prisma.packageHistoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$packageHistoriesPayload>
          }
          createMany: {
            args: Prisma.packageHistoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.packageHistoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$packageHistoriesPayload>
          }
          update: {
            args: Prisma.packageHistoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$packageHistoriesPayload>
          }
          deleteMany: {
            args: Prisma.packageHistoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.packageHistoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.packageHistoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$packageHistoriesPayload>
          }
          aggregate: {
            args: Prisma.PackageHistoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePackageHistories>
          }
          groupBy: {
            args: Prisma.packageHistoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PackageHistoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.packageHistoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<PackageHistoriesCountAggregateOutputType> | number
          }
        }
      }
      suburbs: {
        payload: Prisma.$suburbsPayload<ExtArgs>
        fields: Prisma.suburbsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.suburbsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$suburbsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.suburbsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$suburbsPayload>
          }
          findFirst: {
            args: Prisma.suburbsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$suburbsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.suburbsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$suburbsPayload>
          }
          findMany: {
            args: Prisma.suburbsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$suburbsPayload>[]
          }
          create: {
            args: Prisma.suburbsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$suburbsPayload>
          }
          createMany: {
            args: Prisma.suburbsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.suburbsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$suburbsPayload>
          }
          update: {
            args: Prisma.suburbsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$suburbsPayload>
          }
          deleteMany: {
            args: Prisma.suburbsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.suburbsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.suburbsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$suburbsPayload>
          }
          aggregate: {
            args: Prisma.SuburbsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSuburbs>
          }
          groupBy: {
            args: Prisma.suburbsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SuburbsGroupByOutputType>[]
          }
          count: {
            args: Prisma.suburbsCountArgs<ExtArgs>,
            result: $Utils.Optional<SuburbsCountAggregateOutputType> | number
          }
        }
      }
      cities: {
        payload: Prisma.$citiesPayload<ExtArgs>
        fields: Prisma.citiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.citiesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$citiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.citiesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$citiesPayload>
          }
          findFirst: {
            args: Prisma.citiesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$citiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.citiesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$citiesPayload>
          }
          findMany: {
            args: Prisma.citiesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$citiesPayload>[]
          }
          create: {
            args: Prisma.citiesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$citiesPayload>
          }
          createMany: {
            args: Prisma.citiesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.citiesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$citiesPayload>
          }
          update: {
            args: Prisma.citiesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$citiesPayload>
          }
          deleteMany: {
            args: Prisma.citiesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.citiesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.citiesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$citiesPayload>
          }
          aggregate: {
            args: Prisma.CitiesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCities>
          }
          groupBy: {
            args: Prisma.citiesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CitiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.citiesCountArgs<ExtArgs>,
            result: $Utils.Optional<CitiesCountAggregateOutputType> | number
          }
        }
      }
      deliveryPrices: {
        payload: Prisma.$deliveryPricesPayload<ExtArgs>
        fields: Prisma.deliveryPricesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.deliveryPricesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$deliveryPricesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.deliveryPricesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$deliveryPricesPayload>
          }
          findFirst: {
            args: Prisma.deliveryPricesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$deliveryPricesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.deliveryPricesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$deliveryPricesPayload>
          }
          findMany: {
            args: Prisma.deliveryPricesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$deliveryPricesPayload>[]
          }
          create: {
            args: Prisma.deliveryPricesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$deliveryPricesPayload>
          }
          createMany: {
            args: Prisma.deliveryPricesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.deliveryPricesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$deliveryPricesPayload>
          }
          update: {
            args: Prisma.deliveryPricesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$deliveryPricesPayload>
          }
          deleteMany: {
            args: Prisma.deliveryPricesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.deliveryPricesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.deliveryPricesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$deliveryPricesPayload>
          }
          aggregate: {
            args: Prisma.DeliveryPricesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDeliveryPrices>
          }
          groupBy: {
            args: Prisma.deliveryPricesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DeliveryPricesGroupByOutputType>[]
          }
          count: {
            args: Prisma.deliveryPricesCountArgs<ExtArgs>,
            result: $Utils.Optional<DeliveryPricesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BikersCountOutputType
   */

  export type BikersCountOutputType = {
    packagesPickupBikers: number
    packagesDeliveryBikers: number
  }

  export type BikersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packagesPickupBikers?: boolean | BikersCountOutputTypeCountPackagesPickupBikersArgs
    packagesDeliveryBikers?: boolean | BikersCountOutputTypeCountPackagesDeliveryBikersArgs
  }

  // Custom InputTypes

  /**
   * BikersCountOutputType without action
   */
  export type BikersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BikersCountOutputType
     */
    select?: BikersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BikersCountOutputType without action
   */
  export type BikersCountOutputTypeCountPackagesPickupBikersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderPackagesWhereInput
  }


  /**
   * BikersCountOutputType without action
   */
  export type BikersCountOutputTypeCountPackagesDeliveryBikersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderPackagesWhereInput
  }



  /**
   * Count Type SendersCountOutputType
   */

  export type SendersCountOutputType = {
    receivers: number
    orders: number
  }

  export type SendersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receivers?: boolean | SendersCountOutputTypeCountReceiversArgs
    orders?: boolean | SendersCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes

  /**
   * SendersCountOutputType without action
   */
  export type SendersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SendersCountOutputType
     */
    select?: SendersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SendersCountOutputType without action
   */
  export type SendersCountOutputTypeCountReceiversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: receiversWhereInput
  }


  /**
   * SendersCountOutputType without action
   */
  export type SendersCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }



  /**
   * Count Type ReceiversCountOutputType
   */

  export type ReceiversCountOutputType = {
    packages: number
  }

  export type ReceiversCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packages?: boolean | ReceiversCountOutputTypeCountPackagesArgs
  }

  // Custom InputTypes

  /**
   * ReceiversCountOutputType without action
   */
  export type ReceiversCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiversCountOutputType
     */
    select?: ReceiversCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ReceiversCountOutputType without action
   */
  export type ReceiversCountOutputTypeCountPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderPackagesWhereInput
  }



  /**
   * Count Type OrdersCountOutputType
   */

  export type OrdersCountOutputType = {
    packages: number
  }

  export type OrdersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packages?: boolean | OrdersCountOutputTypeCountPackagesArgs
  }

  // Custom InputTypes

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersCountOutputType
     */
    select?: OrdersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeCountPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderPackagesWhereInput
  }



  /**
   * Count Type OrderPackagesCountOutputType
   */

  export type OrderPackagesCountOutputType = {
    packageHistories: number
  }

  export type OrderPackagesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packageHistories?: boolean | OrderPackagesCountOutputTypeCountPackageHistoriesArgs
  }

  // Custom InputTypes

  /**
   * OrderPackagesCountOutputType without action
   */
  export type OrderPackagesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPackagesCountOutputType
     */
    select?: OrderPackagesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OrderPackagesCountOutputType without action
   */
  export type OrderPackagesCountOutputTypeCountPackageHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: packageHistoriesWhereInput
  }



  /**
   * Count Type SuburbsCountOutputType
   */

  export type SuburbsCountOutputType = {
    deliveryPrices: number
    orders: number
    orderPackages: number
    senders: number
    receivers: number
  }

  export type SuburbsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deliveryPrices?: boolean | SuburbsCountOutputTypeCountDeliveryPricesArgs
    orders?: boolean | SuburbsCountOutputTypeCountOrdersArgs
    orderPackages?: boolean | SuburbsCountOutputTypeCountOrderPackagesArgs
    senders?: boolean | SuburbsCountOutputTypeCountSendersArgs
    receivers?: boolean | SuburbsCountOutputTypeCountReceiversArgs
  }

  // Custom InputTypes

  /**
   * SuburbsCountOutputType without action
   */
  export type SuburbsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuburbsCountOutputType
     */
    select?: SuburbsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SuburbsCountOutputType without action
   */
  export type SuburbsCountOutputTypeCountDeliveryPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: deliveryPricesWhereInput
  }


  /**
   * SuburbsCountOutputType without action
   */
  export type SuburbsCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }


  /**
   * SuburbsCountOutputType without action
   */
  export type SuburbsCountOutputTypeCountOrderPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderPackagesWhereInput
  }


  /**
   * SuburbsCountOutputType without action
   */
  export type SuburbsCountOutputTypeCountSendersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sendersWhereInput
  }


  /**
   * SuburbsCountOutputType without action
   */
  export type SuburbsCountOutputTypeCountReceiversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: receiversWhereInput
  }



  /**
   * Count Type CitiesCountOutputType
   */

  export type CitiesCountOutputType = {
    suburbs: number
    users: number
    biker: number
    citydeliveryPrices: number
    destinationdeliveryPrices: number
  }

  export type CitiesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    suburbs?: boolean | CitiesCountOutputTypeCountSuburbsArgs
    users?: boolean | CitiesCountOutputTypeCountUsersArgs
    biker?: boolean | CitiesCountOutputTypeCountBikerArgs
    citydeliveryPrices?: boolean | CitiesCountOutputTypeCountCitydeliveryPricesArgs
    destinationdeliveryPrices?: boolean | CitiesCountOutputTypeCountDestinationdeliveryPricesArgs
  }

  // Custom InputTypes

  /**
   * CitiesCountOutputType without action
   */
  export type CitiesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitiesCountOutputType
     */
    select?: CitiesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CitiesCountOutputType without action
   */
  export type CitiesCountOutputTypeCountSuburbsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: suburbsWhereInput
  }


  /**
   * CitiesCountOutputType without action
   */
  export type CitiesCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
  }


  /**
   * CitiesCountOutputType without action
   */
  export type CitiesCountOutputTypeCountBikerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bikersWhereInput
  }


  /**
   * CitiesCountOutputType without action
   */
  export type CitiesCountOutputTypeCountCitydeliveryPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: deliveryPricesWhereInput
  }


  /**
   * CitiesCountOutputType without action
   */
  export type CitiesCountOutputTypeCountDestinationdeliveryPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: deliveryPricesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    del_flg: number | null
  }

  export type UsersSumAggregateOutputType = {
    del_flg: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    fullname: string | null
    email: string | null
    telephone: string | null
    password: string | null
    location: string | null
    code: string | null
    expiration: Date | null
    role_name: string | null
    confirmed: boolean | null
    del_flg: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    fullname: string | null
    email: string | null
    telephone: string | null
    password: string | null
    location: string | null
    code: string | null
    expiration: Date | null
    role_name: string | null
    confirmed: boolean | null
    del_flg: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    fullname: number
    email: number
    telephone: number
    password: number
    location: number
    code: number
    expiration: number
    role_name: number
    confirmed: number
    del_flg: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    del_flg?: true
  }

  export type UsersSumAggregateInputType = {
    del_flg?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    fullname?: true
    email?: true
    telephone?: true
    password?: true
    location?: true
    code?: true
    expiration?: true
    role_name?: true
    confirmed?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    fullname?: true
    email?: true
    telephone?: true
    password?: true
    location?: true
    code?: true
    expiration?: true
    role_name?: true
    confirmed?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    fullname?: true
    email?: true
    telephone?: true
    password?: true
    location?: true
    code?: true
    expiration?: true
    role_name?: true
    confirmed?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    fullname: string
    email: string
    telephone: string | null
    password: string
    location: string | null
    code: string | null
    expiration: Date | null
    role_name: string | null
    confirmed: boolean
    del_flg: number
    createdAt: Date
    updatedAt: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
    location?: boolean
    code?: boolean
    expiration?: boolean
    role_name?: boolean
    confirmed?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cities?: boolean | users$citiesArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    fullname?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
    location?: boolean
    code?: boolean
    expiration?: boolean
    role_name?: boolean
    confirmed?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cities?: boolean | users$citiesArgs<ExtArgs>
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      cities: Prisma.$citiesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullname: string
      email: string
      telephone: string | null
      password: string
      location: string | null
      code: string | null
      expiration: Date | null
      role_name: string | null
      confirmed: boolean
      del_flg: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cities<T extends users$citiesArgs<ExtArgs> = {}>(args?: Subset<T, users$citiesArgs<ExtArgs>>): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'String'>
    readonly fullname: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly telephone: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly location: FieldRef<"users", 'String'>
    readonly code: FieldRef<"users", 'String'>
    readonly expiration: FieldRef<"users", 'DateTime'>
    readonly role_name: FieldRef<"users", 'String'>
    readonly confirmed: FieldRef<"users", 'Boolean'>
    readonly del_flg: FieldRef<"users", 'Int'>
    readonly createdAt: FieldRef<"users", 'DateTime'>
    readonly updatedAt: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.cities
   */
  export type users$citiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    where?: citiesWhereInput
  }


  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
  }



  /**
   * Model payments
   */

  export type AggregatePayments = {
    _count: PaymentsCountAggregateOutputType | null
    _avg: PaymentsAvgAggregateOutputType | null
    _sum: PaymentsSumAggregateOutputType | null
    _min: PaymentsMinAggregateOutputType | null
    _max: PaymentsMaxAggregateOutputType | null
  }

  export type PaymentsAvgAggregateOutputType = {
    amount: number | null
    orderCode: number | null
  }

  export type PaymentsSumAggregateOutputType = {
    amount: number | null
    orderCode: number | null
  }

  export type PaymentsMinAggregateOutputType = {
    id: string | null
    amount: number | null
    type: string | null
    reference: string | null
    orderCode: number | null
    narration: string | null
  }

  export type PaymentsMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    type: string | null
    reference: string | null
    orderCode: number | null
    narration: string | null
  }

  export type PaymentsCountAggregateOutputType = {
    id: number
    amount: number
    type: number
    reference: number
    orderCode: number
    narration: number
    _all: number
  }


  export type PaymentsAvgAggregateInputType = {
    amount?: true
    orderCode?: true
  }

  export type PaymentsSumAggregateInputType = {
    amount?: true
    orderCode?: true
  }

  export type PaymentsMinAggregateInputType = {
    id?: true
    amount?: true
    type?: true
    reference?: true
    orderCode?: true
    narration?: true
  }

  export type PaymentsMaxAggregateInputType = {
    id?: true
    amount?: true
    type?: true
    reference?: true
    orderCode?: true
    narration?: true
  }

  export type PaymentsCountAggregateInputType = {
    id?: true
    amount?: true
    type?: true
    reference?: true
    orderCode?: true
    narration?: true
    _all?: true
  }

  export type PaymentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payments to aggregate.
     */
    where?: paymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentsOrderByWithRelationInput | paymentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: paymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payments
    **/
    _count?: true | PaymentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentsMaxAggregateInputType
  }

  export type GetPaymentsAggregateType<T extends PaymentsAggregateArgs> = {
        [P in keyof T & keyof AggregatePayments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayments[P]>
      : GetScalarType<T[P], AggregatePayments[P]>
  }




  export type paymentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentsWhereInput
    orderBy?: paymentsOrderByWithAggregationInput | paymentsOrderByWithAggregationInput[]
    by: PaymentsScalarFieldEnum[] | PaymentsScalarFieldEnum
    having?: paymentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentsCountAggregateInputType | true
    _avg?: PaymentsAvgAggregateInputType
    _sum?: PaymentsSumAggregateInputType
    _min?: PaymentsMinAggregateInputType
    _max?: PaymentsMaxAggregateInputType
  }

  export type PaymentsGroupByOutputType = {
    id: string
    amount: number
    type: string
    reference: string | null
    orderCode: number
    narration: string
    _count: PaymentsCountAggregateOutputType | null
    _avg: PaymentsAvgAggregateOutputType | null
    _sum: PaymentsSumAggregateOutputType | null
    _min: PaymentsMinAggregateOutputType | null
    _max: PaymentsMaxAggregateOutputType | null
  }

  type GetPaymentsGroupByPayload<T extends paymentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentsGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentsGroupByOutputType[P]>
        }
      >
    >


  export type paymentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    type?: boolean
    reference?: boolean
    orderCode?: boolean
    narration?: boolean
  }, ExtArgs["result"]["payments"]>

  export type paymentsSelectScalar = {
    id?: boolean
    amount?: boolean
    type?: boolean
    reference?: boolean
    orderCode?: boolean
    narration?: boolean
  }


  export type $paymentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payments"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amount: number
      type: string
      reference: string | null
      orderCode: number
      narration: string
    }, ExtArgs["result"]["payments"]>
    composites: {}
  }


  type paymentsGetPayload<S extends boolean | null | undefined | paymentsDefaultArgs> = $Result.GetResult<Prisma.$paymentsPayload, S>

  type paymentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<paymentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentsCountAggregateInputType | true
    }

  export interface paymentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payments'], meta: { name: 'payments' } }
    /**
     * Find zero or one Payments that matches the filter.
     * @param {paymentsFindUniqueArgs} args - Arguments to find a Payments
     * @example
     * // Get one Payments
     * const payments = await prisma.payments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends paymentsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, paymentsFindUniqueArgs<ExtArgs>>
    ): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Payments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {paymentsFindUniqueOrThrowArgs} args - Arguments to find a Payments
     * @example
     * // Get one Payments
     * const payments = await prisma.payments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends paymentsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, paymentsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsFindFirstArgs} args - Arguments to find a Payments
     * @example
     * // Get one Payments
     * const payments = await prisma.payments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends paymentsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, paymentsFindFirstArgs<ExtArgs>>
    ): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Payments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsFindFirstOrThrowArgs} args - Arguments to find a Payments
     * @example
     * // Get one Payments
     * const payments = await prisma.payments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends paymentsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, paymentsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payments.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentsWithIdOnly = await prisma.payments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends paymentsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, paymentsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Payments.
     * @param {paymentsCreateArgs} args - Arguments to create a Payments.
     * @example
     * // Create one Payments
     * const Payments = await prisma.payments.create({
     *   data: {
     *     // ... data to create a Payments
     *   }
     * })
     * 
    **/
    create<T extends paymentsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, paymentsCreateArgs<ExtArgs>>
    ): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Payments.
     *     @param {paymentsCreateManyArgs} args - Arguments to create many Payments.
     *     @example
     *     // Create many Payments
     *     const payments = await prisma.payments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends paymentsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, paymentsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payments.
     * @param {paymentsDeleteArgs} args - Arguments to delete one Payments.
     * @example
     * // Delete one Payments
     * const Payments = await prisma.payments.delete({
     *   where: {
     *     // ... filter to delete one Payments
     *   }
     * })
     * 
    **/
    delete<T extends paymentsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, paymentsDeleteArgs<ExtArgs>>
    ): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Payments.
     * @param {paymentsUpdateArgs} args - Arguments to update one Payments.
     * @example
     * // Update one Payments
     * const payments = await prisma.payments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends paymentsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, paymentsUpdateArgs<ExtArgs>>
    ): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Payments.
     * @param {paymentsDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends paymentsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, paymentsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payments = await prisma.payments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends paymentsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, paymentsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payments.
     * @param {paymentsUpsertArgs} args - Arguments to update or create a Payments.
     * @example
     * // Update or create a Payments
     * const payments = await prisma.payments.upsert({
     *   create: {
     *     // ... data to create a Payments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payments we want to update
     *   }
     * })
    **/
    upsert<T extends paymentsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, paymentsUpsertArgs<ExtArgs>>
    ): Prisma__paymentsClient<$Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payments.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends paymentsCountArgs>(
      args?: Subset<T, paymentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentsAggregateArgs>(args: Subset<T, PaymentsAggregateArgs>): Prisma.PrismaPromise<GetPaymentsAggregateType<T>>

    /**
     * Group by Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends paymentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: paymentsGroupByArgs['orderBy'] }
        : { orderBy?: paymentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, paymentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payments model
   */
  readonly fields: paymentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__paymentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the payments model
   */ 
  interface paymentsFieldRefs {
    readonly id: FieldRef<"payments", 'String'>
    readonly amount: FieldRef<"payments", 'Float'>
    readonly type: FieldRef<"payments", 'String'>
    readonly reference: FieldRef<"payments", 'String'>
    readonly orderCode: FieldRef<"payments", 'Int'>
    readonly narration: FieldRef<"payments", 'String'>
  }
    

  // Custom InputTypes

  /**
   * payments findUnique
   */
  export type paymentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where: paymentsWhereUniqueInput
  }


  /**
   * payments findUniqueOrThrow
   */
  export type paymentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where: paymentsWhereUniqueInput
  }


  /**
   * payments findFirst
   */
  export type paymentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentsOrderByWithRelationInput | paymentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentsScalarFieldEnum | PaymentsScalarFieldEnum[]
  }


  /**
   * payments findFirstOrThrow
   */
  export type paymentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentsOrderByWithRelationInput | paymentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentsScalarFieldEnum | PaymentsScalarFieldEnum[]
  }


  /**
   * payments findMany
   */
  export type paymentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentsOrderByWithRelationInput | paymentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payments.
     */
    cursor?: paymentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    distinct?: PaymentsScalarFieldEnum | PaymentsScalarFieldEnum[]
  }


  /**
   * payments create
   */
  export type paymentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * The data needed to create a payments.
     */
    data: XOR<paymentsCreateInput, paymentsUncheckedCreateInput>
  }


  /**
   * payments createMany
   */
  export type paymentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payments.
     */
    data: paymentsCreateManyInput | paymentsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * payments update
   */
  export type paymentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * The data needed to update a payments.
     */
    data: XOR<paymentsUpdateInput, paymentsUncheckedUpdateInput>
    /**
     * Choose, which payments to update.
     */
    where: paymentsWhereUniqueInput
  }


  /**
   * payments updateMany
   */
  export type paymentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payments.
     */
    data: XOR<paymentsUpdateManyMutationInput, paymentsUncheckedUpdateManyInput>
    /**
     * Filter which payments to update
     */
    where?: paymentsWhereInput
  }


  /**
   * payments upsert
   */
  export type paymentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * The filter to search for the payments to update in case it exists.
     */
    where: paymentsWhereUniqueInput
    /**
     * In case the payments found by the `where` argument doesn't exist, create a new payments with this data.
     */
    create: XOR<paymentsCreateInput, paymentsUncheckedCreateInput>
    /**
     * In case the payments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<paymentsUpdateInput, paymentsUncheckedUpdateInput>
  }


  /**
   * payments delete
   */
  export type paymentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
    /**
     * Filter which payments to delete.
     */
    where: paymentsWhereUniqueInput
  }


  /**
   * payments deleteMany
   */
  export type paymentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payments to delete
     */
    where?: paymentsWhereInput
  }


  /**
   * payments without action
   */
  export type paymentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payments
     */
    select?: paymentsSelect<ExtArgs> | null
  }



  /**
   * Model bikers
   */

  export type AggregateBikers = {
    _count: BikersCountAggregateOutputType | null
    _avg: BikersAvgAggregateOutputType | null
    _sum: BikersSumAggregateOutputType | null
    _min: BikersMinAggregateOutputType | null
    _max: BikersMaxAggregateOutputType | null
  }

  export type BikersAvgAggregateOutputType = {
    del_flg: number | null
  }

  export type BikersSumAggregateOutputType = {
    del_flg: number | null
  }

  export type BikersMinAggregateOutputType = {
    id: string | null
    fullname: string | null
    email: string | null
    telephone: string | null
    password: string | null
    code: string | null
    expiration: Date | null
    confirmed: boolean | null
    del_flg: number | null
    createdAt: Date | null
    updatedAt: Date | null
    location: string | null
  }

  export type BikersMaxAggregateOutputType = {
    id: string | null
    fullname: string | null
    email: string | null
    telephone: string | null
    password: string | null
    code: string | null
    expiration: Date | null
    confirmed: boolean | null
    del_flg: number | null
    createdAt: Date | null
    updatedAt: Date | null
    location: string | null
  }

  export type BikersCountAggregateOutputType = {
    id: number
    fullname: number
    email: number
    telephone: number
    password: number
    code: number
    expiration: number
    confirmed: number
    del_flg: number
    createdAt: number
    updatedAt: number
    location: number
    _all: number
  }


  export type BikersAvgAggregateInputType = {
    del_flg?: true
  }

  export type BikersSumAggregateInputType = {
    del_flg?: true
  }

  export type BikersMinAggregateInputType = {
    id?: true
    fullname?: true
    email?: true
    telephone?: true
    password?: true
    code?: true
    expiration?: true
    confirmed?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    location?: true
  }

  export type BikersMaxAggregateInputType = {
    id?: true
    fullname?: true
    email?: true
    telephone?: true
    password?: true
    code?: true
    expiration?: true
    confirmed?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    location?: true
  }

  export type BikersCountAggregateInputType = {
    id?: true
    fullname?: true
    email?: true
    telephone?: true
    password?: true
    code?: true
    expiration?: true
    confirmed?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    location?: true
    _all?: true
  }

  export type BikersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bikers to aggregate.
     */
    where?: bikersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bikers to fetch.
     */
    orderBy?: bikersOrderByWithRelationInput | bikersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bikersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bikers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bikers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bikers
    **/
    _count?: true | BikersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BikersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BikersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BikersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BikersMaxAggregateInputType
  }

  export type GetBikersAggregateType<T extends BikersAggregateArgs> = {
        [P in keyof T & keyof AggregateBikers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBikers[P]>
      : GetScalarType<T[P], AggregateBikers[P]>
  }




  export type bikersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bikersWhereInput
    orderBy?: bikersOrderByWithAggregationInput | bikersOrderByWithAggregationInput[]
    by: BikersScalarFieldEnum[] | BikersScalarFieldEnum
    having?: bikersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BikersCountAggregateInputType | true
    _avg?: BikersAvgAggregateInputType
    _sum?: BikersSumAggregateInputType
    _min?: BikersMinAggregateInputType
    _max?: BikersMaxAggregateInputType
  }

  export type BikersGroupByOutputType = {
    id: string
    fullname: string
    email: string | null
    telephone: string
    password: string
    code: string | null
    expiration: Date | null
    confirmed: boolean
    del_flg: number
    createdAt: Date
    updatedAt: Date
    location: string | null
    _count: BikersCountAggregateOutputType | null
    _avg: BikersAvgAggregateOutputType | null
    _sum: BikersSumAggregateOutputType | null
    _min: BikersMinAggregateOutputType | null
    _max: BikersMaxAggregateOutputType | null
  }

  type GetBikersGroupByPayload<T extends bikersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BikersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BikersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BikersGroupByOutputType[P]>
            : GetScalarType<T[P], BikersGroupByOutputType[P]>
        }
      >
    >


  export type bikersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
    code?: boolean
    expiration?: boolean
    confirmed?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    location?: boolean
    packagesPickupBikers?: boolean | bikers$packagesPickupBikersArgs<ExtArgs>
    packagesDeliveryBikers?: boolean | bikers$packagesDeliveryBikersArgs<ExtArgs>
    cities?: boolean | bikers$citiesArgs<ExtArgs>
    _count?: boolean | BikersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bikers"]>

  export type bikersSelectScalar = {
    id?: boolean
    fullname?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
    code?: boolean
    expiration?: boolean
    confirmed?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    location?: boolean
  }

  export type bikersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packagesPickupBikers?: boolean | bikers$packagesPickupBikersArgs<ExtArgs>
    packagesDeliveryBikers?: boolean | bikers$packagesDeliveryBikersArgs<ExtArgs>
    cities?: boolean | bikers$citiesArgs<ExtArgs>
    _count?: boolean | BikersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $bikersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "bikers"
    objects: {
      packagesPickupBikers: Prisma.$orderPackagesPayload<ExtArgs>[]
      packagesDeliveryBikers: Prisma.$orderPackagesPayload<ExtArgs>[]
      cities: Prisma.$citiesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullname: string
      email: string | null
      telephone: string
      password: string
      code: string | null
      expiration: Date | null
      confirmed: boolean
      del_flg: number
      createdAt: Date
      updatedAt: Date
      location: string | null
    }, ExtArgs["result"]["bikers"]>
    composites: {}
  }


  type bikersGetPayload<S extends boolean | null | undefined | bikersDefaultArgs> = $Result.GetResult<Prisma.$bikersPayload, S>

  type bikersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<bikersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BikersCountAggregateInputType | true
    }

  export interface bikersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bikers'], meta: { name: 'bikers' } }
    /**
     * Find zero or one Bikers that matches the filter.
     * @param {bikersFindUniqueArgs} args - Arguments to find a Bikers
     * @example
     * // Get one Bikers
     * const bikers = await prisma.bikers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends bikersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, bikersFindUniqueArgs<ExtArgs>>
    ): Prisma__bikersClient<$Result.GetResult<Prisma.$bikersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Bikers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {bikersFindUniqueOrThrowArgs} args - Arguments to find a Bikers
     * @example
     * // Get one Bikers
     * const bikers = await prisma.bikers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends bikersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, bikersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__bikersClient<$Result.GetResult<Prisma.$bikersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Bikers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bikersFindFirstArgs} args - Arguments to find a Bikers
     * @example
     * // Get one Bikers
     * const bikers = await prisma.bikers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends bikersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, bikersFindFirstArgs<ExtArgs>>
    ): Prisma__bikersClient<$Result.GetResult<Prisma.$bikersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Bikers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bikersFindFirstOrThrowArgs} args - Arguments to find a Bikers
     * @example
     * // Get one Bikers
     * const bikers = await prisma.bikers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends bikersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, bikersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__bikersClient<$Result.GetResult<Prisma.$bikersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Bikers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bikersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bikers
     * const bikers = await prisma.bikers.findMany()
     * 
     * // Get first 10 Bikers
     * const bikers = await prisma.bikers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bikersWithIdOnly = await prisma.bikers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends bikersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bikersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bikersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Bikers.
     * @param {bikersCreateArgs} args - Arguments to create a Bikers.
     * @example
     * // Create one Bikers
     * const Bikers = await prisma.bikers.create({
     *   data: {
     *     // ... data to create a Bikers
     *   }
     * })
     * 
    **/
    create<T extends bikersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, bikersCreateArgs<ExtArgs>>
    ): Prisma__bikersClient<$Result.GetResult<Prisma.$bikersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Bikers.
     *     @param {bikersCreateManyArgs} args - Arguments to create many Bikers.
     *     @example
     *     // Create many Bikers
     *     const bikers = await prisma.bikers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends bikersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bikersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bikers.
     * @param {bikersDeleteArgs} args - Arguments to delete one Bikers.
     * @example
     * // Delete one Bikers
     * const Bikers = await prisma.bikers.delete({
     *   where: {
     *     // ... filter to delete one Bikers
     *   }
     * })
     * 
    **/
    delete<T extends bikersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, bikersDeleteArgs<ExtArgs>>
    ): Prisma__bikersClient<$Result.GetResult<Prisma.$bikersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Bikers.
     * @param {bikersUpdateArgs} args - Arguments to update one Bikers.
     * @example
     * // Update one Bikers
     * const bikers = await prisma.bikers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends bikersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, bikersUpdateArgs<ExtArgs>>
    ): Prisma__bikersClient<$Result.GetResult<Prisma.$bikersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Bikers.
     * @param {bikersDeleteManyArgs} args - Arguments to filter Bikers to delete.
     * @example
     * // Delete a few Bikers
     * const { count } = await prisma.bikers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends bikersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, bikersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bikers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bikersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bikers
     * const bikers = await prisma.bikers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends bikersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, bikersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bikers.
     * @param {bikersUpsertArgs} args - Arguments to update or create a Bikers.
     * @example
     * // Update or create a Bikers
     * const bikers = await prisma.bikers.upsert({
     *   create: {
     *     // ... data to create a Bikers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bikers we want to update
     *   }
     * })
    **/
    upsert<T extends bikersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, bikersUpsertArgs<ExtArgs>>
    ): Prisma__bikersClient<$Result.GetResult<Prisma.$bikersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Bikers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bikersCountArgs} args - Arguments to filter Bikers to count.
     * @example
     * // Count the number of Bikers
     * const count = await prisma.bikers.count({
     *   where: {
     *     // ... the filter for the Bikers we want to count
     *   }
     * })
    **/
    count<T extends bikersCountArgs>(
      args?: Subset<T, bikersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BikersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bikers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BikersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BikersAggregateArgs>(args: Subset<T, BikersAggregateArgs>): Prisma.PrismaPromise<GetBikersAggregateType<T>>

    /**
     * Group by Bikers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bikersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bikersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bikersGroupByArgs['orderBy'] }
        : { orderBy?: bikersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bikersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBikersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the bikers model
   */
  readonly fields: bikersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for bikers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bikersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    packagesPickupBikers<T extends bikers$packagesPickupBikersArgs<ExtArgs> = {}>(args?: Subset<T, bikers$packagesPickupBikersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'findMany'> | Null>;

    packagesDeliveryBikers<T extends bikers$packagesDeliveryBikersArgs<ExtArgs> = {}>(args?: Subset<T, bikers$packagesDeliveryBikersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'findMany'> | Null>;

    cities<T extends bikers$citiesArgs<ExtArgs> = {}>(args?: Subset<T, bikers$citiesArgs<ExtArgs>>): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the bikers model
   */ 
  interface bikersFieldRefs {
    readonly id: FieldRef<"bikers", 'String'>
    readonly fullname: FieldRef<"bikers", 'String'>
    readonly email: FieldRef<"bikers", 'String'>
    readonly telephone: FieldRef<"bikers", 'String'>
    readonly password: FieldRef<"bikers", 'String'>
    readonly code: FieldRef<"bikers", 'String'>
    readonly expiration: FieldRef<"bikers", 'DateTime'>
    readonly confirmed: FieldRef<"bikers", 'Boolean'>
    readonly del_flg: FieldRef<"bikers", 'Int'>
    readonly createdAt: FieldRef<"bikers", 'DateTime'>
    readonly updatedAt: FieldRef<"bikers", 'DateTime'>
    readonly location: FieldRef<"bikers", 'String'>
  }
    

  // Custom InputTypes

  /**
   * bikers findUnique
   */
  export type bikersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
    /**
     * Filter, which bikers to fetch.
     */
    where: bikersWhereUniqueInput
  }


  /**
   * bikers findUniqueOrThrow
   */
  export type bikersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
    /**
     * Filter, which bikers to fetch.
     */
    where: bikersWhereUniqueInput
  }


  /**
   * bikers findFirst
   */
  export type bikersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
    /**
     * Filter, which bikers to fetch.
     */
    where?: bikersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bikers to fetch.
     */
    orderBy?: bikersOrderByWithRelationInput | bikersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bikers.
     */
    cursor?: bikersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bikers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bikers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bikers.
     */
    distinct?: BikersScalarFieldEnum | BikersScalarFieldEnum[]
  }


  /**
   * bikers findFirstOrThrow
   */
  export type bikersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
    /**
     * Filter, which bikers to fetch.
     */
    where?: bikersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bikers to fetch.
     */
    orderBy?: bikersOrderByWithRelationInput | bikersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bikers.
     */
    cursor?: bikersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bikers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bikers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bikers.
     */
    distinct?: BikersScalarFieldEnum | BikersScalarFieldEnum[]
  }


  /**
   * bikers findMany
   */
  export type bikersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
    /**
     * Filter, which bikers to fetch.
     */
    where?: bikersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bikers to fetch.
     */
    orderBy?: bikersOrderByWithRelationInput | bikersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bikers.
     */
    cursor?: bikersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bikers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bikers.
     */
    skip?: number
    distinct?: BikersScalarFieldEnum | BikersScalarFieldEnum[]
  }


  /**
   * bikers create
   */
  export type bikersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
    /**
     * The data needed to create a bikers.
     */
    data: XOR<bikersCreateInput, bikersUncheckedCreateInput>
  }


  /**
   * bikers createMany
   */
  export type bikersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many bikers.
     */
    data: bikersCreateManyInput | bikersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * bikers update
   */
  export type bikersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
    /**
     * The data needed to update a bikers.
     */
    data: XOR<bikersUpdateInput, bikersUncheckedUpdateInput>
    /**
     * Choose, which bikers to update.
     */
    where: bikersWhereUniqueInput
  }


  /**
   * bikers updateMany
   */
  export type bikersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update bikers.
     */
    data: XOR<bikersUpdateManyMutationInput, bikersUncheckedUpdateManyInput>
    /**
     * Filter which bikers to update
     */
    where?: bikersWhereInput
  }


  /**
   * bikers upsert
   */
  export type bikersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
    /**
     * The filter to search for the bikers to update in case it exists.
     */
    where: bikersWhereUniqueInput
    /**
     * In case the bikers found by the `where` argument doesn't exist, create a new bikers with this data.
     */
    create: XOR<bikersCreateInput, bikersUncheckedCreateInput>
    /**
     * In case the bikers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bikersUpdateInput, bikersUncheckedUpdateInput>
  }


  /**
   * bikers delete
   */
  export type bikersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
    /**
     * Filter which bikers to delete.
     */
    where: bikersWhereUniqueInput
  }


  /**
   * bikers deleteMany
   */
  export type bikersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bikers to delete
     */
    where?: bikersWhereInput
  }


  /**
   * bikers.packagesPickupBikers
   */
  export type bikers$packagesPickupBikersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    where?: orderPackagesWhereInput
    orderBy?: orderPackagesOrderByWithRelationInput | orderPackagesOrderByWithRelationInput[]
    cursor?: orderPackagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderPackagesScalarFieldEnum | OrderPackagesScalarFieldEnum[]
  }


  /**
   * bikers.packagesDeliveryBikers
   */
  export type bikers$packagesDeliveryBikersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    where?: orderPackagesWhereInput
    orderBy?: orderPackagesOrderByWithRelationInput | orderPackagesOrderByWithRelationInput[]
    cursor?: orderPackagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderPackagesScalarFieldEnum | OrderPackagesScalarFieldEnum[]
  }


  /**
   * bikers.cities
   */
  export type bikers$citiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    where?: citiesWhereInput
  }


  /**
   * bikers without action
   */
  export type bikersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
  }



  /**
   * Model senders
   */

  export type AggregateSenders = {
    _count: SendersCountAggregateOutputType | null
    _avg: SendersAvgAggregateOutputType | null
    _sum: SendersSumAggregateOutputType | null
    _min: SendersMinAggregateOutputType | null
    _max: SendersMaxAggregateOutputType | null
  }

  export type SendersAvgAggregateOutputType = {
    rewardPoints: number | null
    redeemedPoints: number | null
    del_flg: number | null
  }

  export type SendersSumAggregateOutputType = {
    rewardPoints: number | null
    redeemedPoints: number | null
    del_flg: number | null
  }

  export type SendersMinAggregateOutputType = {
    id: string | null
    fullname: string | null
    email: string | null
    telephone: string | null
    pickUpLocation: string | null
    password: string | null
    confirmed: boolean | null
    isDormat: boolean | null
    code: string | null
    expiration: Date | null
    lastLogin: Date | null
    rewardPoints: number | null
    redeemedPoints: number | null
    del_flg: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SendersMaxAggregateOutputType = {
    id: string | null
    fullname: string | null
    email: string | null
    telephone: string | null
    pickUpLocation: string | null
    password: string | null
    confirmed: boolean | null
    isDormat: boolean | null
    code: string | null
    expiration: Date | null
    lastLogin: Date | null
    rewardPoints: number | null
    redeemedPoints: number | null
    del_flg: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SendersCountAggregateOutputType = {
    id: number
    fullname: number
    email: number
    telephone: number
    pickUpLocation: number
    password: number
    confirmed: number
    isDormat: number
    code: number
    expiration: number
    lastLogin: number
    rewardPoints: number
    redeemedPoints: number
    del_flg: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SendersAvgAggregateInputType = {
    rewardPoints?: true
    redeemedPoints?: true
    del_flg?: true
  }

  export type SendersSumAggregateInputType = {
    rewardPoints?: true
    redeemedPoints?: true
    del_flg?: true
  }

  export type SendersMinAggregateInputType = {
    id?: true
    fullname?: true
    email?: true
    telephone?: true
    pickUpLocation?: true
    password?: true
    confirmed?: true
    isDormat?: true
    code?: true
    expiration?: true
    lastLogin?: true
    rewardPoints?: true
    redeemedPoints?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SendersMaxAggregateInputType = {
    id?: true
    fullname?: true
    email?: true
    telephone?: true
    pickUpLocation?: true
    password?: true
    confirmed?: true
    isDormat?: true
    code?: true
    expiration?: true
    lastLogin?: true
    rewardPoints?: true
    redeemedPoints?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SendersCountAggregateInputType = {
    id?: true
    fullname?: true
    email?: true
    telephone?: true
    pickUpLocation?: true
    password?: true
    confirmed?: true
    isDormat?: true
    code?: true
    expiration?: true
    lastLogin?: true
    rewardPoints?: true
    redeemedPoints?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SendersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which senders to aggregate.
     */
    where?: sendersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of senders to fetch.
     */
    orderBy?: sendersOrderByWithRelationInput | sendersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sendersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` senders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` senders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned senders
    **/
    _count?: true | SendersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SendersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SendersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SendersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SendersMaxAggregateInputType
  }

  export type GetSendersAggregateType<T extends SendersAggregateArgs> = {
        [P in keyof T & keyof AggregateSenders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSenders[P]>
      : GetScalarType<T[P], AggregateSenders[P]>
  }




  export type sendersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sendersWhereInput
    orderBy?: sendersOrderByWithAggregationInput | sendersOrderByWithAggregationInput[]
    by: SendersScalarFieldEnum[] | SendersScalarFieldEnum
    having?: sendersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SendersCountAggregateInputType | true
    _avg?: SendersAvgAggregateInputType
    _sum?: SendersSumAggregateInputType
    _min?: SendersMinAggregateInputType
    _max?: SendersMaxAggregateInputType
  }

  export type SendersGroupByOutputType = {
    id: string
    fullname: string
    email: string | null
    telephone: string
    pickUpLocation: string | null
    password: string
    confirmed: boolean
    isDormat: boolean
    code: string | null
    expiration: Date | null
    lastLogin: Date
    rewardPoints: number
    redeemedPoints: number
    del_flg: number
    createdAt: Date
    updatedAt: Date
    _count: SendersCountAggregateOutputType | null
    _avg: SendersAvgAggregateOutputType | null
    _sum: SendersSumAggregateOutputType | null
    _min: SendersMinAggregateOutputType | null
    _max: SendersMaxAggregateOutputType | null
  }

  type GetSendersGroupByPayload<T extends sendersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SendersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SendersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SendersGroupByOutputType[P]>
            : GetScalarType<T[P], SendersGroupByOutputType[P]>
        }
      >
    >


  export type sendersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    email?: boolean
    telephone?: boolean
    pickUpLocation?: boolean
    password?: boolean
    confirmed?: boolean
    isDormat?: boolean
    code?: boolean
    expiration?: boolean
    lastLogin?: boolean
    rewardPoints?: boolean
    redeemedPoints?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    suburbs?: boolean | senders$suburbsArgs<ExtArgs>
    receivers?: boolean | senders$receiversArgs<ExtArgs>
    orders?: boolean | senders$ordersArgs<ExtArgs>
    _count?: boolean | SendersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["senders"]>

  export type sendersSelectScalar = {
    id?: boolean
    fullname?: boolean
    email?: boolean
    telephone?: boolean
    pickUpLocation?: boolean
    password?: boolean
    confirmed?: boolean
    isDormat?: boolean
    code?: boolean
    expiration?: boolean
    lastLogin?: boolean
    rewardPoints?: boolean
    redeemedPoints?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type sendersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    suburbs?: boolean | senders$suburbsArgs<ExtArgs>
    receivers?: boolean | senders$receiversArgs<ExtArgs>
    orders?: boolean | senders$ordersArgs<ExtArgs>
    _count?: boolean | SendersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $sendersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "senders"
    objects: {
      suburbs: Prisma.$suburbsPayload<ExtArgs> | null
      receivers: Prisma.$receiversPayload<ExtArgs>[]
      orders: Prisma.$ordersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullname: string
      email: string | null
      telephone: string
      pickUpLocation: string | null
      password: string
      confirmed: boolean
      isDormat: boolean
      code: string | null
      expiration: Date | null
      lastLogin: Date
      rewardPoints: number
      redeemedPoints: number
      del_flg: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["senders"]>
    composites: {}
  }


  type sendersGetPayload<S extends boolean | null | undefined | sendersDefaultArgs> = $Result.GetResult<Prisma.$sendersPayload, S>

  type sendersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<sendersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SendersCountAggregateInputType | true
    }

  export interface sendersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['senders'], meta: { name: 'senders' } }
    /**
     * Find zero or one Senders that matches the filter.
     * @param {sendersFindUniqueArgs} args - Arguments to find a Senders
     * @example
     * // Get one Senders
     * const senders = await prisma.senders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sendersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, sendersFindUniqueArgs<ExtArgs>>
    ): Prisma__sendersClient<$Result.GetResult<Prisma.$sendersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Senders that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {sendersFindUniqueOrThrowArgs} args - Arguments to find a Senders
     * @example
     * // Get one Senders
     * const senders = await prisma.senders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sendersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sendersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__sendersClient<$Result.GetResult<Prisma.$sendersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Senders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sendersFindFirstArgs} args - Arguments to find a Senders
     * @example
     * // Get one Senders
     * const senders = await prisma.senders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sendersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, sendersFindFirstArgs<ExtArgs>>
    ): Prisma__sendersClient<$Result.GetResult<Prisma.$sendersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Senders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sendersFindFirstOrThrowArgs} args - Arguments to find a Senders
     * @example
     * // Get one Senders
     * const senders = await prisma.senders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sendersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sendersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__sendersClient<$Result.GetResult<Prisma.$sendersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Senders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sendersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Senders
     * const senders = await prisma.senders.findMany()
     * 
     * // Get first 10 Senders
     * const senders = await prisma.senders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sendersWithIdOnly = await prisma.senders.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sendersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sendersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sendersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Senders.
     * @param {sendersCreateArgs} args - Arguments to create a Senders.
     * @example
     * // Create one Senders
     * const Senders = await prisma.senders.create({
     *   data: {
     *     // ... data to create a Senders
     *   }
     * })
     * 
    **/
    create<T extends sendersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, sendersCreateArgs<ExtArgs>>
    ): Prisma__sendersClient<$Result.GetResult<Prisma.$sendersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Senders.
     *     @param {sendersCreateManyArgs} args - Arguments to create many Senders.
     *     @example
     *     // Create many Senders
     *     const senders = await prisma.senders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sendersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sendersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Senders.
     * @param {sendersDeleteArgs} args - Arguments to delete one Senders.
     * @example
     * // Delete one Senders
     * const Senders = await prisma.senders.delete({
     *   where: {
     *     // ... filter to delete one Senders
     *   }
     * })
     * 
    **/
    delete<T extends sendersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, sendersDeleteArgs<ExtArgs>>
    ): Prisma__sendersClient<$Result.GetResult<Prisma.$sendersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Senders.
     * @param {sendersUpdateArgs} args - Arguments to update one Senders.
     * @example
     * // Update one Senders
     * const senders = await prisma.senders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sendersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, sendersUpdateArgs<ExtArgs>>
    ): Prisma__sendersClient<$Result.GetResult<Prisma.$sendersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Senders.
     * @param {sendersDeleteManyArgs} args - Arguments to filter Senders to delete.
     * @example
     * // Delete a few Senders
     * const { count } = await prisma.senders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sendersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sendersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Senders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sendersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Senders
     * const senders = await prisma.senders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sendersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, sendersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Senders.
     * @param {sendersUpsertArgs} args - Arguments to update or create a Senders.
     * @example
     * // Update or create a Senders
     * const senders = await prisma.senders.upsert({
     *   create: {
     *     // ... data to create a Senders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Senders we want to update
     *   }
     * })
    **/
    upsert<T extends sendersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, sendersUpsertArgs<ExtArgs>>
    ): Prisma__sendersClient<$Result.GetResult<Prisma.$sendersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Senders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sendersCountArgs} args - Arguments to filter Senders to count.
     * @example
     * // Count the number of Senders
     * const count = await prisma.senders.count({
     *   where: {
     *     // ... the filter for the Senders we want to count
     *   }
     * })
    **/
    count<T extends sendersCountArgs>(
      args?: Subset<T, sendersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SendersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Senders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SendersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SendersAggregateArgs>(args: Subset<T, SendersAggregateArgs>): Prisma.PrismaPromise<GetSendersAggregateType<T>>

    /**
     * Group by Senders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sendersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sendersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sendersGroupByArgs['orderBy'] }
        : { orderBy?: sendersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sendersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSendersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the senders model
   */
  readonly fields: sendersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for senders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sendersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    suburbs<T extends senders$suburbsArgs<ExtArgs> = {}>(args?: Subset<T, senders$suburbsArgs<ExtArgs>>): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    receivers<T extends senders$receiversArgs<ExtArgs> = {}>(args?: Subset<T, senders$receiversArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$receiversPayload<ExtArgs>, T, 'findMany'> | Null>;

    orders<T extends senders$ordersArgs<ExtArgs> = {}>(args?: Subset<T, senders$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the senders model
   */ 
  interface sendersFieldRefs {
    readonly id: FieldRef<"senders", 'String'>
    readonly fullname: FieldRef<"senders", 'String'>
    readonly email: FieldRef<"senders", 'String'>
    readonly telephone: FieldRef<"senders", 'String'>
    readonly pickUpLocation: FieldRef<"senders", 'String'>
    readonly password: FieldRef<"senders", 'String'>
    readonly confirmed: FieldRef<"senders", 'Boolean'>
    readonly isDormat: FieldRef<"senders", 'Boolean'>
    readonly code: FieldRef<"senders", 'String'>
    readonly expiration: FieldRef<"senders", 'DateTime'>
    readonly lastLogin: FieldRef<"senders", 'DateTime'>
    readonly rewardPoints: FieldRef<"senders", 'Int'>
    readonly redeemedPoints: FieldRef<"senders", 'Int'>
    readonly del_flg: FieldRef<"senders", 'Int'>
    readonly createdAt: FieldRef<"senders", 'DateTime'>
    readonly updatedAt: FieldRef<"senders", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * senders findUnique
   */
  export type sendersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
    /**
     * Filter, which senders to fetch.
     */
    where: sendersWhereUniqueInput
  }


  /**
   * senders findUniqueOrThrow
   */
  export type sendersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
    /**
     * Filter, which senders to fetch.
     */
    where: sendersWhereUniqueInput
  }


  /**
   * senders findFirst
   */
  export type sendersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
    /**
     * Filter, which senders to fetch.
     */
    where?: sendersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of senders to fetch.
     */
    orderBy?: sendersOrderByWithRelationInput | sendersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for senders.
     */
    cursor?: sendersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` senders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` senders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of senders.
     */
    distinct?: SendersScalarFieldEnum | SendersScalarFieldEnum[]
  }


  /**
   * senders findFirstOrThrow
   */
  export type sendersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
    /**
     * Filter, which senders to fetch.
     */
    where?: sendersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of senders to fetch.
     */
    orderBy?: sendersOrderByWithRelationInput | sendersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for senders.
     */
    cursor?: sendersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` senders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` senders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of senders.
     */
    distinct?: SendersScalarFieldEnum | SendersScalarFieldEnum[]
  }


  /**
   * senders findMany
   */
  export type sendersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
    /**
     * Filter, which senders to fetch.
     */
    where?: sendersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of senders to fetch.
     */
    orderBy?: sendersOrderByWithRelationInput | sendersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing senders.
     */
    cursor?: sendersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` senders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` senders.
     */
    skip?: number
    distinct?: SendersScalarFieldEnum | SendersScalarFieldEnum[]
  }


  /**
   * senders create
   */
  export type sendersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
    /**
     * The data needed to create a senders.
     */
    data: XOR<sendersCreateInput, sendersUncheckedCreateInput>
  }


  /**
   * senders createMany
   */
  export type sendersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many senders.
     */
    data: sendersCreateManyInput | sendersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * senders update
   */
  export type sendersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
    /**
     * The data needed to update a senders.
     */
    data: XOR<sendersUpdateInput, sendersUncheckedUpdateInput>
    /**
     * Choose, which senders to update.
     */
    where: sendersWhereUniqueInput
  }


  /**
   * senders updateMany
   */
  export type sendersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update senders.
     */
    data: XOR<sendersUpdateManyMutationInput, sendersUncheckedUpdateManyInput>
    /**
     * Filter which senders to update
     */
    where?: sendersWhereInput
  }


  /**
   * senders upsert
   */
  export type sendersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
    /**
     * The filter to search for the senders to update in case it exists.
     */
    where: sendersWhereUniqueInput
    /**
     * In case the senders found by the `where` argument doesn't exist, create a new senders with this data.
     */
    create: XOR<sendersCreateInput, sendersUncheckedCreateInput>
    /**
     * In case the senders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sendersUpdateInput, sendersUncheckedUpdateInput>
  }


  /**
   * senders delete
   */
  export type sendersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
    /**
     * Filter which senders to delete.
     */
    where: sendersWhereUniqueInput
  }


  /**
   * senders deleteMany
   */
  export type sendersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which senders to delete
     */
    where?: sendersWhereInput
  }


  /**
   * senders.suburbs
   */
  export type senders$suburbsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    where?: suburbsWhereInput
  }


  /**
   * senders.receivers
   */
  export type senders$receiversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
    where?: receiversWhereInput
    orderBy?: receiversOrderByWithRelationInput | receiversOrderByWithRelationInput[]
    cursor?: receiversWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiversScalarFieldEnum | ReceiversScalarFieldEnum[]
  }


  /**
   * senders.orders
   */
  export type senders$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * senders without action
   */
  export type sendersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
  }



  /**
   * Model receivers
   */

  export type AggregateReceivers = {
    _count: ReceiversCountAggregateOutputType | null
    _avg: ReceiversAvgAggregateOutputType | null
    _sum: ReceiversSumAggregateOutputType | null
    _min: ReceiversMinAggregateOutputType | null
    _max: ReceiversMaxAggregateOutputType | null
  }

  export type ReceiversAvgAggregateOutputType = {
    del_flg: number | null
  }

  export type ReceiversSumAggregateOutputType = {
    del_flg: number | null
  }

  export type ReceiversMinAggregateOutputType = {
    id: string | null
    fullname: string | null
    telephone: string | null
    email: string | null
    deliveryLocation: string | null
    del_flg: number | null
    createdAt: Date | null
    updatedAt: Date | null
    senderId: string | null
  }

  export type ReceiversMaxAggregateOutputType = {
    id: string | null
    fullname: string | null
    telephone: string | null
    email: string | null
    deliveryLocation: string | null
    del_flg: number | null
    createdAt: Date | null
    updatedAt: Date | null
    senderId: string | null
  }

  export type ReceiversCountAggregateOutputType = {
    id: number
    fullname: number
    telephone: number
    email: number
    deliveryLocation: number
    del_flg: number
    createdAt: number
    updatedAt: number
    senderId: number
    _all: number
  }


  export type ReceiversAvgAggregateInputType = {
    del_flg?: true
  }

  export type ReceiversSumAggregateInputType = {
    del_flg?: true
  }

  export type ReceiversMinAggregateInputType = {
    id?: true
    fullname?: true
    telephone?: true
    email?: true
    deliveryLocation?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    senderId?: true
  }

  export type ReceiversMaxAggregateInputType = {
    id?: true
    fullname?: true
    telephone?: true
    email?: true
    deliveryLocation?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    senderId?: true
  }

  export type ReceiversCountAggregateInputType = {
    id?: true
    fullname?: true
    telephone?: true
    email?: true
    deliveryLocation?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    senderId?: true
    _all?: true
  }

  export type ReceiversAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which receivers to aggregate.
     */
    where?: receiversWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of receivers to fetch.
     */
    orderBy?: receiversOrderByWithRelationInput | receiversOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: receiversWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` receivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` receivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned receivers
    **/
    _count?: true | ReceiversCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiversAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiversSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiversMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiversMaxAggregateInputType
  }

  export type GetReceiversAggregateType<T extends ReceiversAggregateArgs> = {
        [P in keyof T & keyof AggregateReceivers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceivers[P]>
      : GetScalarType<T[P], AggregateReceivers[P]>
  }




  export type receiversGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: receiversWhereInput
    orderBy?: receiversOrderByWithAggregationInput | receiversOrderByWithAggregationInput[]
    by: ReceiversScalarFieldEnum[] | ReceiversScalarFieldEnum
    having?: receiversScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiversCountAggregateInputType | true
    _avg?: ReceiversAvgAggregateInputType
    _sum?: ReceiversSumAggregateInputType
    _min?: ReceiversMinAggregateInputType
    _max?: ReceiversMaxAggregateInputType
  }

  export type ReceiversGroupByOutputType = {
    id: string
    fullname: string
    telephone: string
    email: string | null
    deliveryLocation: string | null
    del_flg: number
    createdAt: Date
    updatedAt: Date
    senderId: string | null
    _count: ReceiversCountAggregateOutputType | null
    _avg: ReceiversAvgAggregateOutputType | null
    _sum: ReceiversSumAggregateOutputType | null
    _min: ReceiversMinAggregateOutputType | null
    _max: ReceiversMaxAggregateOutputType | null
  }

  type GetReceiversGroupByPayload<T extends receiversGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiversGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiversGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiversGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiversGroupByOutputType[P]>
        }
      >
    >


  export type receiversSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    telephone?: boolean
    email?: boolean
    deliveryLocation?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    senderId?: boolean
    suburbs?: boolean | receivers$suburbsArgs<ExtArgs>
    senders?: boolean | receivers$sendersArgs<ExtArgs>
    packages?: boolean | receivers$packagesArgs<ExtArgs>
    _count?: boolean | ReceiversCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receivers"]>

  export type receiversSelectScalar = {
    id?: boolean
    fullname?: boolean
    telephone?: boolean
    email?: boolean
    deliveryLocation?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    senderId?: boolean
  }

  export type receiversInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    suburbs?: boolean | receivers$suburbsArgs<ExtArgs>
    senders?: boolean | receivers$sendersArgs<ExtArgs>
    packages?: boolean | receivers$packagesArgs<ExtArgs>
    _count?: boolean | ReceiversCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $receiversPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "receivers"
    objects: {
      suburbs: Prisma.$suburbsPayload<ExtArgs> | null
      senders: Prisma.$sendersPayload<ExtArgs> | null
      packages: Prisma.$orderPackagesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullname: string
      telephone: string
      email: string | null
      deliveryLocation: string | null
      del_flg: number
      createdAt: Date
      updatedAt: Date
      senderId: string | null
    }, ExtArgs["result"]["receivers"]>
    composites: {}
  }


  type receiversGetPayload<S extends boolean | null | undefined | receiversDefaultArgs> = $Result.GetResult<Prisma.$receiversPayload, S>

  type receiversCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<receiversFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReceiversCountAggregateInputType | true
    }

  export interface receiversDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['receivers'], meta: { name: 'receivers' } }
    /**
     * Find zero or one Receivers that matches the filter.
     * @param {receiversFindUniqueArgs} args - Arguments to find a Receivers
     * @example
     * // Get one Receivers
     * const receivers = await prisma.receivers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends receiversFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, receiversFindUniqueArgs<ExtArgs>>
    ): Prisma__receiversClient<$Result.GetResult<Prisma.$receiversPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Receivers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {receiversFindUniqueOrThrowArgs} args - Arguments to find a Receivers
     * @example
     * // Get one Receivers
     * const receivers = await prisma.receivers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends receiversFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, receiversFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__receiversClient<$Result.GetResult<Prisma.$receiversPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Receivers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receiversFindFirstArgs} args - Arguments to find a Receivers
     * @example
     * // Get one Receivers
     * const receivers = await prisma.receivers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends receiversFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, receiversFindFirstArgs<ExtArgs>>
    ): Prisma__receiversClient<$Result.GetResult<Prisma.$receiversPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Receivers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receiversFindFirstOrThrowArgs} args - Arguments to find a Receivers
     * @example
     * // Get one Receivers
     * const receivers = await prisma.receivers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends receiversFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, receiversFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__receiversClient<$Result.GetResult<Prisma.$receiversPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Receivers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receiversFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Receivers
     * const receivers = await prisma.receivers.findMany()
     * 
     * // Get first 10 Receivers
     * const receivers = await prisma.receivers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiversWithIdOnly = await prisma.receivers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends receiversFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, receiversFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$receiversPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Receivers.
     * @param {receiversCreateArgs} args - Arguments to create a Receivers.
     * @example
     * // Create one Receivers
     * const Receivers = await prisma.receivers.create({
     *   data: {
     *     // ... data to create a Receivers
     *   }
     * })
     * 
    **/
    create<T extends receiversCreateArgs<ExtArgs>>(
      args: SelectSubset<T, receiversCreateArgs<ExtArgs>>
    ): Prisma__receiversClient<$Result.GetResult<Prisma.$receiversPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Receivers.
     *     @param {receiversCreateManyArgs} args - Arguments to create many Receivers.
     *     @example
     *     // Create many Receivers
     *     const receivers = await prisma.receivers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends receiversCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, receiversCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Receivers.
     * @param {receiversDeleteArgs} args - Arguments to delete one Receivers.
     * @example
     * // Delete one Receivers
     * const Receivers = await prisma.receivers.delete({
     *   where: {
     *     // ... filter to delete one Receivers
     *   }
     * })
     * 
    **/
    delete<T extends receiversDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, receiversDeleteArgs<ExtArgs>>
    ): Prisma__receiversClient<$Result.GetResult<Prisma.$receiversPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Receivers.
     * @param {receiversUpdateArgs} args - Arguments to update one Receivers.
     * @example
     * // Update one Receivers
     * const receivers = await prisma.receivers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends receiversUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, receiversUpdateArgs<ExtArgs>>
    ): Prisma__receiversClient<$Result.GetResult<Prisma.$receiversPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Receivers.
     * @param {receiversDeleteManyArgs} args - Arguments to filter Receivers to delete.
     * @example
     * // Delete a few Receivers
     * const { count } = await prisma.receivers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends receiversDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, receiversDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receivers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receiversUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Receivers
     * const receivers = await prisma.receivers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends receiversUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, receiversUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Receivers.
     * @param {receiversUpsertArgs} args - Arguments to update or create a Receivers.
     * @example
     * // Update or create a Receivers
     * const receivers = await prisma.receivers.upsert({
     *   create: {
     *     // ... data to create a Receivers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Receivers we want to update
     *   }
     * })
    **/
    upsert<T extends receiversUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, receiversUpsertArgs<ExtArgs>>
    ): Prisma__receiversClient<$Result.GetResult<Prisma.$receiversPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Receivers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receiversCountArgs} args - Arguments to filter Receivers to count.
     * @example
     * // Count the number of Receivers
     * const count = await prisma.receivers.count({
     *   where: {
     *     // ... the filter for the Receivers we want to count
     *   }
     * })
    **/
    count<T extends receiversCountArgs>(
      args?: Subset<T, receiversCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiversCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Receivers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiversAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiversAggregateArgs>(args: Subset<T, ReceiversAggregateArgs>): Prisma.PrismaPromise<GetReceiversAggregateType<T>>

    /**
     * Group by Receivers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receiversGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends receiversGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: receiversGroupByArgs['orderBy'] }
        : { orderBy?: receiversGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, receiversGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiversGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the receivers model
   */
  readonly fields: receiversFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for receivers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__receiversClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    suburbs<T extends receivers$suburbsArgs<ExtArgs> = {}>(args?: Subset<T, receivers$suburbsArgs<ExtArgs>>): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    senders<T extends receivers$sendersArgs<ExtArgs> = {}>(args?: Subset<T, receivers$sendersArgs<ExtArgs>>): Prisma__sendersClient<$Result.GetResult<Prisma.$sendersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    packages<T extends receivers$packagesArgs<ExtArgs> = {}>(args?: Subset<T, receivers$packagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the receivers model
   */ 
  interface receiversFieldRefs {
    readonly id: FieldRef<"receivers", 'String'>
    readonly fullname: FieldRef<"receivers", 'String'>
    readonly telephone: FieldRef<"receivers", 'String'>
    readonly email: FieldRef<"receivers", 'String'>
    readonly deliveryLocation: FieldRef<"receivers", 'String'>
    readonly del_flg: FieldRef<"receivers", 'Int'>
    readonly createdAt: FieldRef<"receivers", 'DateTime'>
    readonly updatedAt: FieldRef<"receivers", 'DateTime'>
    readonly senderId: FieldRef<"receivers", 'String'>
  }
    

  // Custom InputTypes

  /**
   * receivers findUnique
   */
  export type receiversFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
    /**
     * Filter, which receivers to fetch.
     */
    where: receiversWhereUniqueInput
  }


  /**
   * receivers findUniqueOrThrow
   */
  export type receiversFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
    /**
     * Filter, which receivers to fetch.
     */
    where: receiversWhereUniqueInput
  }


  /**
   * receivers findFirst
   */
  export type receiversFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
    /**
     * Filter, which receivers to fetch.
     */
    where?: receiversWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of receivers to fetch.
     */
    orderBy?: receiversOrderByWithRelationInput | receiversOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for receivers.
     */
    cursor?: receiversWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` receivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` receivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of receivers.
     */
    distinct?: ReceiversScalarFieldEnum | ReceiversScalarFieldEnum[]
  }


  /**
   * receivers findFirstOrThrow
   */
  export type receiversFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
    /**
     * Filter, which receivers to fetch.
     */
    where?: receiversWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of receivers to fetch.
     */
    orderBy?: receiversOrderByWithRelationInput | receiversOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for receivers.
     */
    cursor?: receiversWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` receivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` receivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of receivers.
     */
    distinct?: ReceiversScalarFieldEnum | ReceiversScalarFieldEnum[]
  }


  /**
   * receivers findMany
   */
  export type receiversFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
    /**
     * Filter, which receivers to fetch.
     */
    where?: receiversWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of receivers to fetch.
     */
    orderBy?: receiversOrderByWithRelationInput | receiversOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing receivers.
     */
    cursor?: receiversWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` receivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` receivers.
     */
    skip?: number
    distinct?: ReceiversScalarFieldEnum | ReceiversScalarFieldEnum[]
  }


  /**
   * receivers create
   */
  export type receiversCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
    /**
     * The data needed to create a receivers.
     */
    data: XOR<receiversCreateInput, receiversUncheckedCreateInput>
  }


  /**
   * receivers createMany
   */
  export type receiversCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many receivers.
     */
    data: receiversCreateManyInput | receiversCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * receivers update
   */
  export type receiversUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
    /**
     * The data needed to update a receivers.
     */
    data: XOR<receiversUpdateInput, receiversUncheckedUpdateInput>
    /**
     * Choose, which receivers to update.
     */
    where: receiversWhereUniqueInput
  }


  /**
   * receivers updateMany
   */
  export type receiversUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update receivers.
     */
    data: XOR<receiversUpdateManyMutationInput, receiversUncheckedUpdateManyInput>
    /**
     * Filter which receivers to update
     */
    where?: receiversWhereInput
  }


  /**
   * receivers upsert
   */
  export type receiversUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
    /**
     * The filter to search for the receivers to update in case it exists.
     */
    where: receiversWhereUniqueInput
    /**
     * In case the receivers found by the `where` argument doesn't exist, create a new receivers with this data.
     */
    create: XOR<receiversCreateInput, receiversUncheckedCreateInput>
    /**
     * In case the receivers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<receiversUpdateInput, receiversUncheckedUpdateInput>
  }


  /**
   * receivers delete
   */
  export type receiversDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
    /**
     * Filter which receivers to delete.
     */
    where: receiversWhereUniqueInput
  }


  /**
   * receivers deleteMany
   */
  export type receiversDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which receivers to delete
     */
    where?: receiversWhereInput
  }


  /**
   * receivers.suburbs
   */
  export type receivers$suburbsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    where?: suburbsWhereInput
  }


  /**
   * receivers.senders
   */
  export type receivers$sendersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
    where?: sendersWhereInput
  }


  /**
   * receivers.packages
   */
  export type receivers$packagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    where?: orderPackagesWhereInput
    orderBy?: orderPackagesOrderByWithRelationInput | orderPackagesOrderByWithRelationInput[]
    cursor?: orderPackagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderPackagesScalarFieldEnum | OrderPackagesScalarFieldEnum[]
  }


  /**
   * receivers without action
   */
  export type receiversDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
  }



  /**
   * Model orders
   */

  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    grandAmount: number | null
    discountAmount: number | null
    discountPercentage: number | null
    totalAmount: number | null
  }

  export type OrdersSumAggregateOutputType = {
    grandAmount: number | null
    discountAmount: number | null
    discountPercentage: number | null
    totalAmount: number | null
  }

  export type OrdersMinAggregateOutputType = {
    orderCode: string | null
    senderId: string | null
    orderType: $Enums.OrderType | null
    grandAmount: number | null
    discountAmount: number | null
    discountPercentage: number | null
    totalAmount: number | null
    del_flg: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    pickUpLocation: string | null
  }

  export type OrdersMaxAggregateOutputType = {
    orderCode: string | null
    senderId: string | null
    orderType: $Enums.OrderType | null
    grandAmount: number | null
    discountAmount: number | null
    discountPercentage: number | null
    totalAmount: number | null
    del_flg: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    pickUpLocation: string | null
  }

  export type OrdersCountAggregateOutputType = {
    orderCode: number
    senderId: number
    orderType: number
    grandAmount: number
    discountAmount: number
    discountPercentage: number
    totalAmount: number
    del_flg: number
    createdAt: number
    updatedAt: number
    pickUpLocation: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    grandAmount?: true
    discountAmount?: true
    discountPercentage?: true
    totalAmount?: true
  }

  export type OrdersSumAggregateInputType = {
    grandAmount?: true
    discountAmount?: true
    discountPercentage?: true
    totalAmount?: true
  }

  export type OrdersMinAggregateInputType = {
    orderCode?: true
    senderId?: true
    orderType?: true
    grandAmount?: true
    discountAmount?: true
    discountPercentage?: true
    totalAmount?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    pickUpLocation?: true
  }

  export type OrdersMaxAggregateInputType = {
    orderCode?: true
    senderId?: true
    orderType?: true
    grandAmount?: true
    discountAmount?: true
    discountPercentage?: true
    totalAmount?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    pickUpLocation?: true
  }

  export type OrdersCountAggregateInputType = {
    orderCode?: true
    senderId?: true
    orderType?: true
    grandAmount?: true
    discountAmount?: true
    discountPercentage?: true
    totalAmount?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    pickUpLocation?: true
    _all?: true
  }

  export type OrdersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to aggregate.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type ordersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithAggregationInput | ordersOrderByWithAggregationInput[]
    by: OrdersScalarFieldEnum[] | OrdersScalarFieldEnum
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }

  export type OrdersGroupByOutputType = {
    orderCode: string
    senderId: string | null
    orderType: $Enums.OrderType | null
    grandAmount: number
    discountAmount: number
    discountPercentage: number
    totalAmount: number
    del_flg: boolean
    createdAt: Date
    updatedAt: Date
    pickUpLocation: string | null
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends ordersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type ordersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    orderCode?: boolean
    senderId?: boolean
    orderType?: boolean
    grandAmount?: boolean
    discountAmount?: boolean
    discountPercentage?: boolean
    totalAmount?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pickUpLocation?: boolean
    sender?: boolean | orders$senderArgs<ExtArgs>
    suburbs?: boolean | orders$suburbsArgs<ExtArgs>
    packages?: boolean | orders$packagesArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>

  export type ordersSelectScalar = {
    orderCode?: boolean
    senderId?: boolean
    orderType?: boolean
    grandAmount?: boolean
    discountAmount?: boolean
    discountPercentage?: boolean
    totalAmount?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pickUpLocation?: boolean
  }

  export type ordersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | orders$senderArgs<ExtArgs>
    suburbs?: boolean | orders$suburbsArgs<ExtArgs>
    packages?: boolean | orders$packagesArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ordersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orders"
    objects: {
      sender: Prisma.$sendersPayload<ExtArgs> | null
      suburbs: Prisma.$suburbsPayload<ExtArgs> | null
      packages: Prisma.$orderPackagesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      orderCode: string
      senderId: string | null
      orderType: $Enums.OrderType | null
      grandAmount: number
      discountAmount: number
      discountPercentage: number
      totalAmount: number
      del_flg: boolean
      createdAt: Date
      updatedAt: Date
      pickUpLocation: string | null
    }, ExtArgs["result"]["orders"]>
    composites: {}
  }


  type ordersGetPayload<S extends boolean | null | undefined | ordersDefaultArgs> = $Result.GetResult<Prisma.$ordersPayload, S>

  type ordersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ordersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface ordersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orders'], meta: { name: 'orders' } }
    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ordersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ordersFindUniqueArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Orders that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ordersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindFirstArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Orders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ordersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `orderCode`
     * const ordersWithOrderCodeOnly = await prisma.orders.findMany({ select: { orderCode: true } })
     * 
    **/
    findMany<T extends ordersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
    **/
    create<T extends ordersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ordersCreateArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Orders.
     *     @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const orders = await prisma.orders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ordersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
    **/
    delete<T extends ordersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ordersDeleteArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ordersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ordersUpdateArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ordersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ordersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ordersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
    **/
    upsert<T extends ordersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ordersUpsertArgs<ExtArgs>>
    ): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ordersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ordersGroupByArgs['orderBy'] }
        : { orderBy?: ordersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ordersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orders model
   */
  readonly fields: ordersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ordersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    sender<T extends orders$senderArgs<ExtArgs> = {}>(args?: Subset<T, orders$senderArgs<ExtArgs>>): Prisma__sendersClient<$Result.GetResult<Prisma.$sendersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    suburbs<T extends orders$suburbsArgs<ExtArgs> = {}>(args?: Subset<T, orders$suburbsArgs<ExtArgs>>): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    packages<T extends orders$packagesArgs<ExtArgs> = {}>(args?: Subset<T, orders$packagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the orders model
   */ 
  interface ordersFieldRefs {
    readonly orderCode: FieldRef<"orders", 'String'>
    readonly senderId: FieldRef<"orders", 'String'>
    readonly orderType: FieldRef<"orders", 'OrderType'>
    readonly grandAmount: FieldRef<"orders", 'Float'>
    readonly discountAmount: FieldRef<"orders", 'Float'>
    readonly discountPercentage: FieldRef<"orders", 'Float'>
    readonly totalAmount: FieldRef<"orders", 'Float'>
    readonly del_flg: FieldRef<"orders", 'Boolean'>
    readonly createdAt: FieldRef<"orders", 'DateTime'>
    readonly updatedAt: FieldRef<"orders", 'DateTime'>
    readonly pickUpLocation: FieldRef<"orders", 'String'>
  }
    

  // Custom InputTypes

  /**
   * orders findUnique
   */
  export type ordersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders findUniqueOrThrow
   */
  export type ordersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders findFirst
   */
  export type ordersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * orders findFirstOrThrow
   */
  export type ordersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * orders findMany
   */
  export type ordersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * orders create
   */
  export type ordersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to create a orders.
     */
    data: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }


  /**
   * orders createMany
   */
  export type ordersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orders.
     */
    data: ordersCreateManyInput | ordersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * orders update
   */
  export type ordersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to update a orders.
     */
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
  }


  /**
   * orders upsert
   */
  export type ordersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The filter to search for the orders to update in case it exists.
     */
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
     */
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }


  /**
   * orders delete
   */
  export type ordersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter which orders to delete.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to delete
     */
    where?: ordersWhereInput
  }


  /**
   * orders.sender
   */
  export type orders$senderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
    where?: sendersWhereInput
  }


  /**
   * orders.suburbs
   */
  export type orders$suburbsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    where?: suburbsWhereInput
  }


  /**
   * orders.packages
   */
  export type orders$packagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    where?: orderPackagesWhereInput
    orderBy?: orderPackagesOrderByWithRelationInput | orderPackagesOrderByWithRelationInput[]
    cursor?: orderPackagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderPackagesScalarFieldEnum | OrderPackagesScalarFieldEnum[]
  }


  /**
   * orders without action
   */
  export type ordersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
  }



  /**
   * Model orderPackages
   */

  export type AggregateOrderPackages = {
    _count: OrderPackagesCountAggregateOutputType | null
    _avg: OrderPackagesAvgAggregateOutputType | null
    _sum: OrderPackagesSumAggregateOutputType | null
    _min: OrderPackagesMinAggregateOutputType | null
    _max: OrderPackagesMaxAggregateOutputType | null
  }

  export type OrderPackagesAvgAggregateOutputType = {
    estimatedWeight: number | null
    baseWeight: number | null
    extraWeight: number | null
    valueOfPackage: number | null
    itemCost: number | null
    deliveryFee: number | null
    pickup_share: number | null
    delivery_share: number | null
    transit_share: number | null
    system_share: number | null
    qcs_share: number | null
  }

  export type OrderPackagesSumAggregateOutputType = {
    estimatedWeight: number | null
    baseWeight: number | null
    extraWeight: number | null
    valueOfPackage: number | null
    itemCost: number | null
    deliveryFee: number | null
    pickup_share: number | null
    delivery_share: number | null
    transit_share: number | null
    system_share: number | null
    qcs_share: number | null
  }

  export type OrderPackagesMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    orderCode: string | null
    receiverId: string | null
    deliveryLocation: string | null
    details: string | null
    paymentBy: $Enums.paymentBy | null
    estimatedWeight: number | null
    baseWeight: number | null
    extraWeight: number | null
    valueOfPackage: number | null
    itemCost: number | null
    deliveryFee: number | null
    itemImage: string | null
    pickupBikerId: string | null
    deliverBikerId: string | null
    status: $Enums.status | null
    secondReceipientName: string | null
    secondReceipientNumber: string | null
    reason: string | null
    pickup_share: number | null
    delivery_share: number | null
    transit_share: number | null
    system_share: number | null
    qcs_share: number | null
    del_flg: boolean | null
    insured: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderPackagesMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    orderCode: string | null
    receiverId: string | null
    deliveryLocation: string | null
    details: string | null
    paymentBy: $Enums.paymentBy | null
    estimatedWeight: number | null
    baseWeight: number | null
    extraWeight: number | null
    valueOfPackage: number | null
    itemCost: number | null
    deliveryFee: number | null
    itemImage: string | null
    pickupBikerId: string | null
    deliverBikerId: string | null
    status: $Enums.status | null
    secondReceipientName: string | null
    secondReceipientNumber: string | null
    reason: string | null
    pickup_share: number | null
    delivery_share: number | null
    transit_share: number | null
    system_share: number | null
    qcs_share: number | null
    del_flg: boolean | null
    insured: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderPackagesCountAggregateOutputType = {
    id: number
    orderId: number
    orderCode: number
    receiverId: number
    deliveryLocation: number
    details: number
    paymentBy: number
    estimatedWeight: number
    baseWeight: number
    extraWeight: number
    valueOfPackage: number
    itemCost: number
    deliveryFee: number
    itemImage: number
    pickupBikerId: number
    deliverBikerId: number
    status: number
    secondReceipientName: number
    secondReceipientNumber: number
    reason: number
    pickup_share: number
    delivery_share: number
    transit_share: number
    system_share: number
    qcs_share: number
    del_flg: number
    insured: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderPackagesAvgAggregateInputType = {
    estimatedWeight?: true
    baseWeight?: true
    extraWeight?: true
    valueOfPackage?: true
    itemCost?: true
    deliveryFee?: true
    pickup_share?: true
    delivery_share?: true
    transit_share?: true
    system_share?: true
    qcs_share?: true
  }

  export type OrderPackagesSumAggregateInputType = {
    estimatedWeight?: true
    baseWeight?: true
    extraWeight?: true
    valueOfPackage?: true
    itemCost?: true
    deliveryFee?: true
    pickup_share?: true
    delivery_share?: true
    transit_share?: true
    system_share?: true
    qcs_share?: true
  }

  export type OrderPackagesMinAggregateInputType = {
    id?: true
    orderId?: true
    orderCode?: true
    receiverId?: true
    deliveryLocation?: true
    details?: true
    paymentBy?: true
    estimatedWeight?: true
    baseWeight?: true
    extraWeight?: true
    valueOfPackage?: true
    itemCost?: true
    deliveryFee?: true
    itemImage?: true
    pickupBikerId?: true
    deliverBikerId?: true
    status?: true
    secondReceipientName?: true
    secondReceipientNumber?: true
    reason?: true
    pickup_share?: true
    delivery_share?: true
    transit_share?: true
    system_share?: true
    qcs_share?: true
    del_flg?: true
    insured?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderPackagesMaxAggregateInputType = {
    id?: true
    orderId?: true
    orderCode?: true
    receiverId?: true
    deliveryLocation?: true
    details?: true
    paymentBy?: true
    estimatedWeight?: true
    baseWeight?: true
    extraWeight?: true
    valueOfPackage?: true
    itemCost?: true
    deliveryFee?: true
    itemImage?: true
    pickupBikerId?: true
    deliverBikerId?: true
    status?: true
    secondReceipientName?: true
    secondReceipientNumber?: true
    reason?: true
    pickup_share?: true
    delivery_share?: true
    transit_share?: true
    system_share?: true
    qcs_share?: true
    del_flg?: true
    insured?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderPackagesCountAggregateInputType = {
    id?: true
    orderId?: true
    orderCode?: true
    receiverId?: true
    deliveryLocation?: true
    details?: true
    paymentBy?: true
    estimatedWeight?: true
    baseWeight?: true
    extraWeight?: true
    valueOfPackage?: true
    itemCost?: true
    deliveryFee?: true
    itemImage?: true
    pickupBikerId?: true
    deliverBikerId?: true
    status?: true
    secondReceipientName?: true
    secondReceipientNumber?: true
    reason?: true
    pickup_share?: true
    delivery_share?: true
    transit_share?: true
    system_share?: true
    qcs_share?: true
    del_flg?: true
    insured?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderPackagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orderPackages to aggregate.
     */
    where?: orderPackagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderPackages to fetch.
     */
    orderBy?: orderPackagesOrderByWithRelationInput | orderPackagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orderPackagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orderPackages
    **/
    _count?: true | OrderPackagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderPackagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderPackagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderPackagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderPackagesMaxAggregateInputType
  }

  export type GetOrderPackagesAggregateType<T extends OrderPackagesAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderPackages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderPackages[P]>
      : GetScalarType<T[P], AggregateOrderPackages[P]>
  }




  export type orderPackagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderPackagesWhereInput
    orderBy?: orderPackagesOrderByWithAggregationInput | orderPackagesOrderByWithAggregationInput[]
    by: OrderPackagesScalarFieldEnum[] | OrderPackagesScalarFieldEnum
    having?: orderPackagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderPackagesCountAggregateInputType | true
    _avg?: OrderPackagesAvgAggregateInputType
    _sum?: OrderPackagesSumAggregateInputType
    _min?: OrderPackagesMinAggregateInputType
    _max?: OrderPackagesMaxAggregateInputType
  }

  export type OrderPackagesGroupByOutputType = {
    id: string
    orderId: string
    orderCode: string
    receiverId: string | null
    deliveryLocation: string | null
    details: string | null
    paymentBy: $Enums.paymentBy
    estimatedWeight: number
    baseWeight: number
    extraWeight: number
    valueOfPackage: number
    itemCost: number
    deliveryFee: number
    itemImage: string | null
    pickupBikerId: string | null
    deliverBikerId: string | null
    status: $Enums.status | null
    secondReceipientName: string | null
    secondReceipientNumber: string | null
    reason: string | null
    pickup_share: number
    delivery_share: number
    transit_share: number
    system_share: number
    qcs_share: number
    del_flg: boolean
    insured: boolean
    createdAt: Date
    updatedAt: Date
    _count: OrderPackagesCountAggregateOutputType | null
    _avg: OrderPackagesAvgAggregateOutputType | null
    _sum: OrderPackagesSumAggregateOutputType | null
    _min: OrderPackagesMinAggregateOutputType | null
    _max: OrderPackagesMaxAggregateOutputType | null
  }

  type GetOrderPackagesGroupByPayload<T extends orderPackagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderPackagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderPackagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderPackagesGroupByOutputType[P]>
            : GetScalarType<T[P], OrderPackagesGroupByOutputType[P]>
        }
      >
    >


  export type orderPackagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    orderCode?: boolean
    receiverId?: boolean
    deliveryLocation?: boolean
    details?: boolean
    paymentBy?: boolean
    estimatedWeight?: boolean
    baseWeight?: boolean
    extraWeight?: boolean
    valueOfPackage?: boolean
    itemCost?: boolean
    deliveryFee?: boolean
    itemImage?: boolean
    pickupBikerId?: boolean
    deliverBikerId?: boolean
    status?: boolean
    secondReceipientName?: boolean
    secondReceipientNumber?: boolean
    reason?: boolean
    pickup_share?: boolean
    delivery_share?: boolean
    transit_share?: boolean
    system_share?: boolean
    qcs_share?: boolean
    del_flg?: boolean
    insured?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orders?: boolean | orderPackages$ordersArgs<ExtArgs>
    receiver?: boolean | orderPackages$receiverArgs<ExtArgs>
    suburb?: boolean | orderPackages$suburbArgs<ExtArgs>
    pickupBiker?: boolean | orderPackages$pickupBikerArgs<ExtArgs>
    deliverBiker?: boolean | orderPackages$deliverBikerArgs<ExtArgs>
    packageHistories?: boolean | orderPackages$packageHistoriesArgs<ExtArgs>
    _count?: boolean | OrderPackagesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderPackages"]>

  export type orderPackagesSelectScalar = {
    id?: boolean
    orderId?: boolean
    orderCode?: boolean
    receiverId?: boolean
    deliveryLocation?: boolean
    details?: boolean
    paymentBy?: boolean
    estimatedWeight?: boolean
    baseWeight?: boolean
    extraWeight?: boolean
    valueOfPackage?: boolean
    itemCost?: boolean
    deliveryFee?: boolean
    itemImage?: boolean
    pickupBikerId?: boolean
    deliverBikerId?: boolean
    status?: boolean
    secondReceipientName?: boolean
    secondReceipientNumber?: boolean
    reason?: boolean
    pickup_share?: boolean
    delivery_share?: boolean
    transit_share?: boolean
    system_share?: boolean
    qcs_share?: boolean
    del_flg?: boolean
    insured?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type orderPackagesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | orderPackages$ordersArgs<ExtArgs>
    receiver?: boolean | orderPackages$receiverArgs<ExtArgs>
    suburb?: boolean | orderPackages$suburbArgs<ExtArgs>
    pickupBiker?: boolean | orderPackages$pickupBikerArgs<ExtArgs>
    deliverBiker?: boolean | orderPackages$deliverBikerArgs<ExtArgs>
    packageHistories?: boolean | orderPackages$packageHistoriesArgs<ExtArgs>
    _count?: boolean | OrderPackagesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $orderPackagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orderPackages"
    objects: {
      orders: Prisma.$ordersPayload<ExtArgs> | null
      receiver: Prisma.$receiversPayload<ExtArgs> | null
      suburb: Prisma.$suburbsPayload<ExtArgs> | null
      pickupBiker: Prisma.$bikersPayload<ExtArgs> | null
      deliverBiker: Prisma.$bikersPayload<ExtArgs> | null
      packageHistories: Prisma.$packageHistoriesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      orderCode: string
      receiverId: string | null
      deliveryLocation: string | null
      details: string | null
      paymentBy: $Enums.paymentBy
      estimatedWeight: number
      baseWeight: number
      extraWeight: number
      valueOfPackage: number
      itemCost: number
      deliveryFee: number
      itemImage: string | null
      pickupBikerId: string | null
      deliverBikerId: string | null
      status: $Enums.status | null
      secondReceipientName: string | null
      secondReceipientNumber: string | null
      reason: string | null
      pickup_share: number
      delivery_share: number
      transit_share: number
      system_share: number
      qcs_share: number
      del_flg: boolean
      insured: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["orderPackages"]>
    composites: {}
  }


  type orderPackagesGetPayload<S extends boolean | null | undefined | orderPackagesDefaultArgs> = $Result.GetResult<Prisma.$orderPackagesPayload, S>

  type orderPackagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<orderPackagesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderPackagesCountAggregateInputType | true
    }

  export interface orderPackagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orderPackages'], meta: { name: 'orderPackages' } }
    /**
     * Find zero or one OrderPackages that matches the filter.
     * @param {orderPackagesFindUniqueArgs} args - Arguments to find a OrderPackages
     * @example
     * // Get one OrderPackages
     * const orderPackages = await prisma.orderPackages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends orderPackagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, orderPackagesFindUniqueArgs<ExtArgs>>
    ): Prisma__orderPackagesClient<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OrderPackages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {orderPackagesFindUniqueOrThrowArgs} args - Arguments to find a OrderPackages
     * @example
     * // Get one OrderPackages
     * const orderPackages = await prisma.orderPackages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends orderPackagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, orderPackagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__orderPackagesClient<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OrderPackages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderPackagesFindFirstArgs} args - Arguments to find a OrderPackages
     * @example
     * // Get one OrderPackages
     * const orderPackages = await prisma.orderPackages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends orderPackagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, orderPackagesFindFirstArgs<ExtArgs>>
    ): Prisma__orderPackagesClient<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OrderPackages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderPackagesFindFirstOrThrowArgs} args - Arguments to find a OrderPackages
     * @example
     * // Get one OrderPackages
     * const orderPackages = await prisma.orderPackages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends orderPackagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, orderPackagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__orderPackagesClient<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OrderPackages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderPackagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderPackages
     * const orderPackages = await prisma.orderPackages.findMany()
     * 
     * // Get first 10 OrderPackages
     * const orderPackages = await prisma.orderPackages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderPackagesWithIdOnly = await prisma.orderPackages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends orderPackagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, orderPackagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OrderPackages.
     * @param {orderPackagesCreateArgs} args - Arguments to create a OrderPackages.
     * @example
     * // Create one OrderPackages
     * const OrderPackages = await prisma.orderPackages.create({
     *   data: {
     *     // ... data to create a OrderPackages
     *   }
     * })
     * 
    **/
    create<T extends orderPackagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, orderPackagesCreateArgs<ExtArgs>>
    ): Prisma__orderPackagesClient<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many OrderPackages.
     *     @param {orderPackagesCreateManyArgs} args - Arguments to create many OrderPackages.
     *     @example
     *     // Create many OrderPackages
     *     const orderPackages = await prisma.orderPackages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends orderPackagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, orderPackagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrderPackages.
     * @param {orderPackagesDeleteArgs} args - Arguments to delete one OrderPackages.
     * @example
     * // Delete one OrderPackages
     * const OrderPackages = await prisma.orderPackages.delete({
     *   where: {
     *     // ... filter to delete one OrderPackages
     *   }
     * })
     * 
    **/
    delete<T extends orderPackagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, orderPackagesDeleteArgs<ExtArgs>>
    ): Prisma__orderPackagesClient<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OrderPackages.
     * @param {orderPackagesUpdateArgs} args - Arguments to update one OrderPackages.
     * @example
     * // Update one OrderPackages
     * const orderPackages = await prisma.orderPackages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends orderPackagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, orderPackagesUpdateArgs<ExtArgs>>
    ): Prisma__orderPackagesClient<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OrderPackages.
     * @param {orderPackagesDeleteManyArgs} args - Arguments to filter OrderPackages to delete.
     * @example
     * // Delete a few OrderPackages
     * const { count } = await prisma.orderPackages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends orderPackagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, orderPackagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderPackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderPackagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderPackages
     * const orderPackages = await prisma.orderPackages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends orderPackagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, orderPackagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderPackages.
     * @param {orderPackagesUpsertArgs} args - Arguments to update or create a OrderPackages.
     * @example
     * // Update or create a OrderPackages
     * const orderPackages = await prisma.orderPackages.upsert({
     *   create: {
     *     // ... data to create a OrderPackages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderPackages we want to update
     *   }
     * })
    **/
    upsert<T extends orderPackagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, orderPackagesUpsertArgs<ExtArgs>>
    ): Prisma__orderPackagesClient<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OrderPackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderPackagesCountArgs} args - Arguments to filter OrderPackages to count.
     * @example
     * // Count the number of OrderPackages
     * const count = await prisma.orderPackages.count({
     *   where: {
     *     // ... the filter for the OrderPackages we want to count
     *   }
     * })
    **/
    count<T extends orderPackagesCountArgs>(
      args?: Subset<T, orderPackagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderPackagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderPackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPackagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderPackagesAggregateArgs>(args: Subset<T, OrderPackagesAggregateArgs>): Prisma.PrismaPromise<GetOrderPackagesAggregateType<T>>

    /**
     * Group by OrderPackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderPackagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends orderPackagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: orderPackagesGroupByArgs['orderBy'] }
        : { orderBy?: orderPackagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, orderPackagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderPackagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orderPackages model
   */
  readonly fields: orderPackagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orderPackages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__orderPackagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    orders<T extends orderPackages$ordersArgs<ExtArgs> = {}>(args?: Subset<T, orderPackages$ordersArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    receiver<T extends orderPackages$receiverArgs<ExtArgs> = {}>(args?: Subset<T, orderPackages$receiverArgs<ExtArgs>>): Prisma__receiversClient<$Result.GetResult<Prisma.$receiversPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    suburb<T extends orderPackages$suburbArgs<ExtArgs> = {}>(args?: Subset<T, orderPackages$suburbArgs<ExtArgs>>): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    pickupBiker<T extends orderPackages$pickupBikerArgs<ExtArgs> = {}>(args?: Subset<T, orderPackages$pickupBikerArgs<ExtArgs>>): Prisma__bikersClient<$Result.GetResult<Prisma.$bikersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    deliverBiker<T extends orderPackages$deliverBikerArgs<ExtArgs> = {}>(args?: Subset<T, orderPackages$deliverBikerArgs<ExtArgs>>): Prisma__bikersClient<$Result.GetResult<Prisma.$bikersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    packageHistories<T extends orderPackages$packageHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, orderPackages$packageHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$packageHistoriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the orderPackages model
   */ 
  interface orderPackagesFieldRefs {
    readonly id: FieldRef<"orderPackages", 'String'>
    readonly orderId: FieldRef<"orderPackages", 'String'>
    readonly orderCode: FieldRef<"orderPackages", 'String'>
    readonly receiverId: FieldRef<"orderPackages", 'String'>
    readonly deliveryLocation: FieldRef<"orderPackages", 'String'>
    readonly details: FieldRef<"orderPackages", 'String'>
    readonly paymentBy: FieldRef<"orderPackages", 'paymentBy'>
    readonly estimatedWeight: FieldRef<"orderPackages", 'Float'>
    readonly baseWeight: FieldRef<"orderPackages", 'Int'>
    readonly extraWeight: FieldRef<"orderPackages", 'Int'>
    readonly valueOfPackage: FieldRef<"orderPackages", 'Float'>
    readonly itemCost: FieldRef<"orderPackages", 'Float'>
    readonly deliveryFee: FieldRef<"orderPackages", 'Float'>
    readonly itemImage: FieldRef<"orderPackages", 'String'>
    readonly pickupBikerId: FieldRef<"orderPackages", 'String'>
    readonly deliverBikerId: FieldRef<"orderPackages", 'String'>
    readonly status: FieldRef<"orderPackages", 'status'>
    readonly secondReceipientName: FieldRef<"orderPackages", 'String'>
    readonly secondReceipientNumber: FieldRef<"orderPackages", 'String'>
    readonly reason: FieldRef<"orderPackages", 'String'>
    readonly pickup_share: FieldRef<"orderPackages", 'Float'>
    readonly delivery_share: FieldRef<"orderPackages", 'Float'>
    readonly transit_share: FieldRef<"orderPackages", 'Float'>
    readonly system_share: FieldRef<"orderPackages", 'Float'>
    readonly qcs_share: FieldRef<"orderPackages", 'Float'>
    readonly del_flg: FieldRef<"orderPackages", 'Boolean'>
    readonly insured: FieldRef<"orderPackages", 'Boolean'>
    readonly createdAt: FieldRef<"orderPackages", 'DateTime'>
    readonly updatedAt: FieldRef<"orderPackages", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * orderPackages findUnique
   */
  export type orderPackagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    /**
     * Filter, which orderPackages to fetch.
     */
    where: orderPackagesWhereUniqueInput
  }


  /**
   * orderPackages findUniqueOrThrow
   */
  export type orderPackagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    /**
     * Filter, which orderPackages to fetch.
     */
    where: orderPackagesWhereUniqueInput
  }


  /**
   * orderPackages findFirst
   */
  export type orderPackagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    /**
     * Filter, which orderPackages to fetch.
     */
    where?: orderPackagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderPackages to fetch.
     */
    orderBy?: orderPackagesOrderByWithRelationInput | orderPackagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderPackages.
     */
    cursor?: orderPackagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderPackages.
     */
    distinct?: OrderPackagesScalarFieldEnum | OrderPackagesScalarFieldEnum[]
  }


  /**
   * orderPackages findFirstOrThrow
   */
  export type orderPackagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    /**
     * Filter, which orderPackages to fetch.
     */
    where?: orderPackagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderPackages to fetch.
     */
    orderBy?: orderPackagesOrderByWithRelationInput | orderPackagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderPackages.
     */
    cursor?: orderPackagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderPackages.
     */
    distinct?: OrderPackagesScalarFieldEnum | OrderPackagesScalarFieldEnum[]
  }


  /**
   * orderPackages findMany
   */
  export type orderPackagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    /**
     * Filter, which orderPackages to fetch.
     */
    where?: orderPackagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderPackages to fetch.
     */
    orderBy?: orderPackagesOrderByWithRelationInput | orderPackagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orderPackages.
     */
    cursor?: orderPackagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderPackages.
     */
    skip?: number
    distinct?: OrderPackagesScalarFieldEnum | OrderPackagesScalarFieldEnum[]
  }


  /**
   * orderPackages create
   */
  export type orderPackagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    /**
     * The data needed to create a orderPackages.
     */
    data: XOR<orderPackagesCreateInput, orderPackagesUncheckedCreateInput>
  }


  /**
   * orderPackages createMany
   */
  export type orderPackagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orderPackages.
     */
    data: orderPackagesCreateManyInput | orderPackagesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * orderPackages update
   */
  export type orderPackagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    /**
     * The data needed to update a orderPackages.
     */
    data: XOR<orderPackagesUpdateInput, orderPackagesUncheckedUpdateInput>
    /**
     * Choose, which orderPackages to update.
     */
    where: orderPackagesWhereUniqueInput
  }


  /**
   * orderPackages updateMany
   */
  export type orderPackagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orderPackages.
     */
    data: XOR<orderPackagesUpdateManyMutationInput, orderPackagesUncheckedUpdateManyInput>
    /**
     * Filter which orderPackages to update
     */
    where?: orderPackagesWhereInput
  }


  /**
   * orderPackages upsert
   */
  export type orderPackagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    /**
     * The filter to search for the orderPackages to update in case it exists.
     */
    where: orderPackagesWhereUniqueInput
    /**
     * In case the orderPackages found by the `where` argument doesn't exist, create a new orderPackages with this data.
     */
    create: XOR<orderPackagesCreateInput, orderPackagesUncheckedCreateInput>
    /**
     * In case the orderPackages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orderPackagesUpdateInput, orderPackagesUncheckedUpdateInput>
  }


  /**
   * orderPackages delete
   */
  export type orderPackagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    /**
     * Filter which orderPackages to delete.
     */
    where: orderPackagesWhereUniqueInput
  }


  /**
   * orderPackages deleteMany
   */
  export type orderPackagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orderPackages to delete
     */
    where?: orderPackagesWhereInput
  }


  /**
   * orderPackages.orders
   */
  export type orderPackages$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
  }


  /**
   * orderPackages.receiver
   */
  export type orderPackages$receiverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
    where?: receiversWhereInput
  }


  /**
   * orderPackages.suburb
   */
  export type orderPackages$suburbArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    where?: suburbsWhereInput
  }


  /**
   * orderPackages.pickupBiker
   */
  export type orderPackages$pickupBikerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
    where?: bikersWhereInput
  }


  /**
   * orderPackages.deliverBiker
   */
  export type orderPackages$deliverBikerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
    where?: bikersWhereInput
  }


  /**
   * orderPackages.packageHistories
   */
  export type orderPackages$packageHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the packageHistories
     */
    select?: packageHistoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: packageHistoriesInclude<ExtArgs> | null
    where?: packageHistoriesWhereInput
    orderBy?: packageHistoriesOrderByWithRelationInput | packageHistoriesOrderByWithRelationInput[]
    cursor?: packageHistoriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageHistoriesScalarFieldEnum | PackageHistoriesScalarFieldEnum[]
  }


  /**
   * orderPackages without action
   */
  export type orderPackagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
  }



  /**
   * Model packageHistories
   */

  export type AggregatePackageHistories = {
    _count: PackageHistoriesCountAggregateOutputType | null
    _avg: PackageHistoriesAvgAggregateOutputType | null
    _sum: PackageHistoriesSumAggregateOutputType | null
    _min: PackageHistoriesMinAggregateOutputType | null
    _max: PackageHistoriesMaxAggregateOutputType | null
  }

  export type PackageHistoriesAvgAggregateOutputType = {
    del_flg: number | null
  }

  export type PackageHistoriesSumAggregateOutputType = {
    del_flg: number | null
  }

  export type PackageHistoriesMinAggregateOutputType = {
    id: string | null
    status: $Enums.status | null
    packageId: string | null
    reason: string | null
    del_flg: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PackageHistoriesMaxAggregateOutputType = {
    id: string | null
    status: $Enums.status | null
    packageId: string | null
    reason: string | null
    del_flg: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PackageHistoriesCountAggregateOutputType = {
    id: number
    status: number
    packageId: number
    reason: number
    del_flg: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PackageHistoriesAvgAggregateInputType = {
    del_flg?: true
  }

  export type PackageHistoriesSumAggregateInputType = {
    del_flg?: true
  }

  export type PackageHistoriesMinAggregateInputType = {
    id?: true
    status?: true
    packageId?: true
    reason?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PackageHistoriesMaxAggregateInputType = {
    id?: true
    status?: true
    packageId?: true
    reason?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PackageHistoriesCountAggregateInputType = {
    id?: true
    status?: true
    packageId?: true
    reason?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PackageHistoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which packageHistories to aggregate.
     */
    where?: packageHistoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of packageHistories to fetch.
     */
    orderBy?: packageHistoriesOrderByWithRelationInput | packageHistoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: packageHistoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` packageHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` packageHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned packageHistories
    **/
    _count?: true | PackageHistoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageHistoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageHistoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageHistoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageHistoriesMaxAggregateInputType
  }

  export type GetPackageHistoriesAggregateType<T extends PackageHistoriesAggregateArgs> = {
        [P in keyof T & keyof AggregatePackageHistories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackageHistories[P]>
      : GetScalarType<T[P], AggregatePackageHistories[P]>
  }




  export type packageHistoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: packageHistoriesWhereInput
    orderBy?: packageHistoriesOrderByWithAggregationInput | packageHistoriesOrderByWithAggregationInput[]
    by: PackageHistoriesScalarFieldEnum[] | PackageHistoriesScalarFieldEnum
    having?: packageHistoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageHistoriesCountAggregateInputType | true
    _avg?: PackageHistoriesAvgAggregateInputType
    _sum?: PackageHistoriesSumAggregateInputType
    _min?: PackageHistoriesMinAggregateInputType
    _max?: PackageHistoriesMaxAggregateInputType
  }

  export type PackageHistoriesGroupByOutputType = {
    id: string
    status: $Enums.status
    packageId: string | null
    reason: string | null
    del_flg: number
    createdAt: Date
    updatedAt: Date
    _count: PackageHistoriesCountAggregateOutputType | null
    _avg: PackageHistoriesAvgAggregateOutputType | null
    _sum: PackageHistoriesSumAggregateOutputType | null
    _min: PackageHistoriesMinAggregateOutputType | null
    _max: PackageHistoriesMaxAggregateOutputType | null
  }

  type GetPackageHistoriesGroupByPayload<T extends packageHistoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageHistoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageHistoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageHistoriesGroupByOutputType[P]>
            : GetScalarType<T[P], PackageHistoriesGroupByOutputType[P]>
        }
      >
    >


  export type packageHistoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    packageId?: boolean
    reason?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    packages?: boolean | packageHistories$packagesArgs<ExtArgs>
  }, ExtArgs["result"]["packageHistories"]>

  export type packageHistoriesSelectScalar = {
    id?: boolean
    status?: boolean
    packageId?: boolean
    reason?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type packageHistoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packages?: boolean | packageHistories$packagesArgs<ExtArgs>
  }


  export type $packageHistoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "packageHistories"
    objects: {
      packages: Prisma.$orderPackagesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: $Enums.status
      packageId: string | null
      reason: string | null
      del_flg: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["packageHistories"]>
    composites: {}
  }


  type packageHistoriesGetPayload<S extends boolean | null | undefined | packageHistoriesDefaultArgs> = $Result.GetResult<Prisma.$packageHistoriesPayload, S>

  type packageHistoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<packageHistoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PackageHistoriesCountAggregateInputType | true
    }

  export interface packageHistoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['packageHistories'], meta: { name: 'packageHistories' } }
    /**
     * Find zero or one PackageHistories that matches the filter.
     * @param {packageHistoriesFindUniqueArgs} args - Arguments to find a PackageHistories
     * @example
     * // Get one PackageHistories
     * const packageHistories = await prisma.packageHistories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends packageHistoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, packageHistoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__packageHistoriesClient<$Result.GetResult<Prisma.$packageHistoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PackageHistories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {packageHistoriesFindUniqueOrThrowArgs} args - Arguments to find a PackageHistories
     * @example
     * // Get one PackageHistories
     * const packageHistories = await prisma.packageHistories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends packageHistoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, packageHistoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__packageHistoriesClient<$Result.GetResult<Prisma.$packageHistoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PackageHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {packageHistoriesFindFirstArgs} args - Arguments to find a PackageHistories
     * @example
     * // Get one PackageHistories
     * const packageHistories = await prisma.packageHistories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends packageHistoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, packageHistoriesFindFirstArgs<ExtArgs>>
    ): Prisma__packageHistoriesClient<$Result.GetResult<Prisma.$packageHistoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PackageHistories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {packageHistoriesFindFirstOrThrowArgs} args - Arguments to find a PackageHistories
     * @example
     * // Get one PackageHistories
     * const packageHistories = await prisma.packageHistories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends packageHistoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, packageHistoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__packageHistoriesClient<$Result.GetResult<Prisma.$packageHistoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PackageHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {packageHistoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PackageHistories
     * const packageHistories = await prisma.packageHistories.findMany()
     * 
     * // Get first 10 PackageHistories
     * const packageHistories = await prisma.packageHistories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packageHistoriesWithIdOnly = await prisma.packageHistories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends packageHistoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, packageHistoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$packageHistoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PackageHistories.
     * @param {packageHistoriesCreateArgs} args - Arguments to create a PackageHistories.
     * @example
     * // Create one PackageHistories
     * const PackageHistories = await prisma.packageHistories.create({
     *   data: {
     *     // ... data to create a PackageHistories
     *   }
     * })
     * 
    **/
    create<T extends packageHistoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, packageHistoriesCreateArgs<ExtArgs>>
    ): Prisma__packageHistoriesClient<$Result.GetResult<Prisma.$packageHistoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PackageHistories.
     *     @param {packageHistoriesCreateManyArgs} args - Arguments to create many PackageHistories.
     *     @example
     *     // Create many PackageHistories
     *     const packageHistories = await prisma.packageHistories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends packageHistoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, packageHistoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PackageHistories.
     * @param {packageHistoriesDeleteArgs} args - Arguments to delete one PackageHistories.
     * @example
     * // Delete one PackageHistories
     * const PackageHistories = await prisma.packageHistories.delete({
     *   where: {
     *     // ... filter to delete one PackageHistories
     *   }
     * })
     * 
    **/
    delete<T extends packageHistoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, packageHistoriesDeleteArgs<ExtArgs>>
    ): Prisma__packageHistoriesClient<$Result.GetResult<Prisma.$packageHistoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PackageHistories.
     * @param {packageHistoriesUpdateArgs} args - Arguments to update one PackageHistories.
     * @example
     * // Update one PackageHistories
     * const packageHistories = await prisma.packageHistories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends packageHistoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, packageHistoriesUpdateArgs<ExtArgs>>
    ): Prisma__packageHistoriesClient<$Result.GetResult<Prisma.$packageHistoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PackageHistories.
     * @param {packageHistoriesDeleteManyArgs} args - Arguments to filter PackageHistories to delete.
     * @example
     * // Delete a few PackageHistories
     * const { count } = await prisma.packageHistories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends packageHistoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, packageHistoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PackageHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {packageHistoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PackageHistories
     * const packageHistories = await prisma.packageHistories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends packageHistoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, packageHistoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PackageHistories.
     * @param {packageHistoriesUpsertArgs} args - Arguments to update or create a PackageHistories.
     * @example
     * // Update or create a PackageHistories
     * const packageHistories = await prisma.packageHistories.upsert({
     *   create: {
     *     // ... data to create a PackageHistories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PackageHistories we want to update
     *   }
     * })
    **/
    upsert<T extends packageHistoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, packageHistoriesUpsertArgs<ExtArgs>>
    ): Prisma__packageHistoriesClient<$Result.GetResult<Prisma.$packageHistoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PackageHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {packageHistoriesCountArgs} args - Arguments to filter PackageHistories to count.
     * @example
     * // Count the number of PackageHistories
     * const count = await prisma.packageHistories.count({
     *   where: {
     *     // ... the filter for the PackageHistories we want to count
     *   }
     * })
    **/
    count<T extends packageHistoriesCountArgs>(
      args?: Subset<T, packageHistoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageHistoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PackageHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageHistoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageHistoriesAggregateArgs>(args: Subset<T, PackageHistoriesAggregateArgs>): Prisma.PrismaPromise<GetPackageHistoriesAggregateType<T>>

    /**
     * Group by PackageHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {packageHistoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends packageHistoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: packageHistoriesGroupByArgs['orderBy'] }
        : { orderBy?: packageHistoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, packageHistoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageHistoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the packageHistories model
   */
  readonly fields: packageHistoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for packageHistories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__packageHistoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    packages<T extends packageHistories$packagesArgs<ExtArgs> = {}>(args?: Subset<T, packageHistories$packagesArgs<ExtArgs>>): Prisma__orderPackagesClient<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the packageHistories model
   */ 
  interface packageHistoriesFieldRefs {
    readonly id: FieldRef<"packageHistories", 'String'>
    readonly status: FieldRef<"packageHistories", 'status'>
    readonly packageId: FieldRef<"packageHistories", 'String'>
    readonly reason: FieldRef<"packageHistories", 'String'>
    readonly del_flg: FieldRef<"packageHistories", 'Int'>
    readonly createdAt: FieldRef<"packageHistories", 'DateTime'>
    readonly updatedAt: FieldRef<"packageHistories", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * packageHistories findUnique
   */
  export type packageHistoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the packageHistories
     */
    select?: packageHistoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: packageHistoriesInclude<ExtArgs> | null
    /**
     * Filter, which packageHistories to fetch.
     */
    where: packageHistoriesWhereUniqueInput
  }


  /**
   * packageHistories findUniqueOrThrow
   */
  export type packageHistoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the packageHistories
     */
    select?: packageHistoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: packageHistoriesInclude<ExtArgs> | null
    /**
     * Filter, which packageHistories to fetch.
     */
    where: packageHistoriesWhereUniqueInput
  }


  /**
   * packageHistories findFirst
   */
  export type packageHistoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the packageHistories
     */
    select?: packageHistoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: packageHistoriesInclude<ExtArgs> | null
    /**
     * Filter, which packageHistories to fetch.
     */
    where?: packageHistoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of packageHistories to fetch.
     */
    orderBy?: packageHistoriesOrderByWithRelationInput | packageHistoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for packageHistories.
     */
    cursor?: packageHistoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` packageHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` packageHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of packageHistories.
     */
    distinct?: PackageHistoriesScalarFieldEnum | PackageHistoriesScalarFieldEnum[]
  }


  /**
   * packageHistories findFirstOrThrow
   */
  export type packageHistoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the packageHistories
     */
    select?: packageHistoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: packageHistoriesInclude<ExtArgs> | null
    /**
     * Filter, which packageHistories to fetch.
     */
    where?: packageHistoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of packageHistories to fetch.
     */
    orderBy?: packageHistoriesOrderByWithRelationInput | packageHistoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for packageHistories.
     */
    cursor?: packageHistoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` packageHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` packageHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of packageHistories.
     */
    distinct?: PackageHistoriesScalarFieldEnum | PackageHistoriesScalarFieldEnum[]
  }


  /**
   * packageHistories findMany
   */
  export type packageHistoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the packageHistories
     */
    select?: packageHistoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: packageHistoriesInclude<ExtArgs> | null
    /**
     * Filter, which packageHistories to fetch.
     */
    where?: packageHistoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of packageHistories to fetch.
     */
    orderBy?: packageHistoriesOrderByWithRelationInput | packageHistoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing packageHistories.
     */
    cursor?: packageHistoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` packageHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` packageHistories.
     */
    skip?: number
    distinct?: PackageHistoriesScalarFieldEnum | PackageHistoriesScalarFieldEnum[]
  }


  /**
   * packageHistories create
   */
  export type packageHistoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the packageHistories
     */
    select?: packageHistoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: packageHistoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a packageHistories.
     */
    data: XOR<packageHistoriesCreateInput, packageHistoriesUncheckedCreateInput>
  }


  /**
   * packageHistories createMany
   */
  export type packageHistoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many packageHistories.
     */
    data: packageHistoriesCreateManyInput | packageHistoriesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * packageHistories update
   */
  export type packageHistoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the packageHistories
     */
    select?: packageHistoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: packageHistoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a packageHistories.
     */
    data: XOR<packageHistoriesUpdateInput, packageHistoriesUncheckedUpdateInput>
    /**
     * Choose, which packageHistories to update.
     */
    where: packageHistoriesWhereUniqueInput
  }


  /**
   * packageHistories updateMany
   */
  export type packageHistoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update packageHistories.
     */
    data: XOR<packageHistoriesUpdateManyMutationInput, packageHistoriesUncheckedUpdateManyInput>
    /**
     * Filter which packageHistories to update
     */
    where?: packageHistoriesWhereInput
  }


  /**
   * packageHistories upsert
   */
  export type packageHistoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the packageHistories
     */
    select?: packageHistoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: packageHistoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the packageHistories to update in case it exists.
     */
    where: packageHistoriesWhereUniqueInput
    /**
     * In case the packageHistories found by the `where` argument doesn't exist, create a new packageHistories with this data.
     */
    create: XOR<packageHistoriesCreateInput, packageHistoriesUncheckedCreateInput>
    /**
     * In case the packageHistories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<packageHistoriesUpdateInput, packageHistoriesUncheckedUpdateInput>
  }


  /**
   * packageHistories delete
   */
  export type packageHistoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the packageHistories
     */
    select?: packageHistoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: packageHistoriesInclude<ExtArgs> | null
    /**
     * Filter which packageHistories to delete.
     */
    where: packageHistoriesWhereUniqueInput
  }


  /**
   * packageHistories deleteMany
   */
  export type packageHistoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which packageHistories to delete
     */
    where?: packageHistoriesWhereInput
  }


  /**
   * packageHistories.packages
   */
  export type packageHistories$packagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    where?: orderPackagesWhereInput
  }


  /**
   * packageHistories without action
   */
  export type packageHistoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the packageHistories
     */
    select?: packageHistoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: packageHistoriesInclude<ExtArgs> | null
  }



  /**
   * Model suburbs
   */

  export type AggregateSuburbs = {
    _count: SuburbsCountAggregateOutputType | null
    _min: SuburbsMinAggregateOutputType | null
    _max: SuburbsMaxAggregateOutputType | null
  }

  export type SuburbsMinAggregateOutputType = {
    id: string | null
    suburb_name: string | null
    del_flg: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    cityId: string | null
  }

  export type SuburbsMaxAggregateOutputType = {
    id: string | null
    suburb_name: string | null
    del_flg: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    cityId: string | null
  }

  export type SuburbsCountAggregateOutputType = {
    id: number
    suburb_name: number
    del_flg: number
    createdAt: number
    updatedAt: number
    cityId: number
    _all: number
  }


  export type SuburbsMinAggregateInputType = {
    id?: true
    suburb_name?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    cityId?: true
  }

  export type SuburbsMaxAggregateInputType = {
    id?: true
    suburb_name?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    cityId?: true
  }

  export type SuburbsCountAggregateInputType = {
    id?: true
    suburb_name?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    cityId?: true
    _all?: true
  }

  export type SuburbsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which suburbs to aggregate.
     */
    where?: suburbsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suburbs to fetch.
     */
    orderBy?: suburbsOrderByWithRelationInput | suburbsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: suburbsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suburbs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suburbs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned suburbs
    **/
    _count?: true | SuburbsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuburbsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuburbsMaxAggregateInputType
  }

  export type GetSuburbsAggregateType<T extends SuburbsAggregateArgs> = {
        [P in keyof T & keyof AggregateSuburbs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuburbs[P]>
      : GetScalarType<T[P], AggregateSuburbs[P]>
  }




  export type suburbsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: suburbsWhereInput
    orderBy?: suburbsOrderByWithAggregationInput | suburbsOrderByWithAggregationInput[]
    by: SuburbsScalarFieldEnum[] | SuburbsScalarFieldEnum
    having?: suburbsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuburbsCountAggregateInputType | true
    _min?: SuburbsMinAggregateInputType
    _max?: SuburbsMaxAggregateInputType
  }

  export type SuburbsGroupByOutputType = {
    id: string
    suburb_name: string
    del_flg: boolean
    createdAt: Date
    updatedAt: Date
    cityId: string | null
    _count: SuburbsCountAggregateOutputType | null
    _min: SuburbsMinAggregateOutputType | null
    _max: SuburbsMaxAggregateOutputType | null
  }

  type GetSuburbsGroupByPayload<T extends suburbsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuburbsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuburbsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuburbsGroupByOutputType[P]>
            : GetScalarType<T[P], SuburbsGroupByOutputType[P]>
        }
      >
    >


  export type suburbsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    suburb_name?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cityId?: boolean
    cities?: boolean | suburbs$citiesArgs<ExtArgs>
    deliveryPrices?: boolean | suburbs$deliveryPricesArgs<ExtArgs>
    orders?: boolean | suburbs$ordersArgs<ExtArgs>
    orderPackages?: boolean | suburbs$orderPackagesArgs<ExtArgs>
    senders?: boolean | suburbs$sendersArgs<ExtArgs>
    receivers?: boolean | suburbs$receiversArgs<ExtArgs>
    _count?: boolean | SuburbsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["suburbs"]>

  export type suburbsSelectScalar = {
    id?: boolean
    suburb_name?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cityId?: boolean
  }

  export type suburbsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cities?: boolean | suburbs$citiesArgs<ExtArgs>
    deliveryPrices?: boolean | suburbs$deliveryPricesArgs<ExtArgs>
    orders?: boolean | suburbs$ordersArgs<ExtArgs>
    orderPackages?: boolean | suburbs$orderPackagesArgs<ExtArgs>
    senders?: boolean | suburbs$sendersArgs<ExtArgs>
    receivers?: boolean | suburbs$receiversArgs<ExtArgs>
    _count?: boolean | SuburbsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $suburbsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "suburbs"
    objects: {
      cities: Prisma.$citiesPayload<ExtArgs> | null
      deliveryPrices: Prisma.$deliveryPricesPayload<ExtArgs>[]
      orders: Prisma.$ordersPayload<ExtArgs>[]
      orderPackages: Prisma.$orderPackagesPayload<ExtArgs>[]
      senders: Prisma.$sendersPayload<ExtArgs>[]
      receivers: Prisma.$receiversPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      suburb_name: string
      del_flg: boolean
      createdAt: Date
      updatedAt: Date
      cityId: string | null
    }, ExtArgs["result"]["suburbs"]>
    composites: {}
  }


  type suburbsGetPayload<S extends boolean | null | undefined | suburbsDefaultArgs> = $Result.GetResult<Prisma.$suburbsPayload, S>

  type suburbsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<suburbsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SuburbsCountAggregateInputType | true
    }

  export interface suburbsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['suburbs'], meta: { name: 'suburbs' } }
    /**
     * Find zero or one Suburbs that matches the filter.
     * @param {suburbsFindUniqueArgs} args - Arguments to find a Suburbs
     * @example
     * // Get one Suburbs
     * const suburbs = await prisma.suburbs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends suburbsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, suburbsFindUniqueArgs<ExtArgs>>
    ): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Suburbs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {suburbsFindUniqueOrThrowArgs} args - Arguments to find a Suburbs
     * @example
     * // Get one Suburbs
     * const suburbs = await prisma.suburbs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends suburbsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, suburbsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Suburbs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suburbsFindFirstArgs} args - Arguments to find a Suburbs
     * @example
     * // Get one Suburbs
     * const suburbs = await prisma.suburbs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends suburbsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, suburbsFindFirstArgs<ExtArgs>>
    ): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Suburbs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suburbsFindFirstOrThrowArgs} args - Arguments to find a Suburbs
     * @example
     * // Get one Suburbs
     * const suburbs = await prisma.suburbs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends suburbsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, suburbsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Suburbs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suburbsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Suburbs
     * const suburbs = await prisma.suburbs.findMany()
     * 
     * // Get first 10 Suburbs
     * const suburbs = await prisma.suburbs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const suburbsWithIdOnly = await prisma.suburbs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends suburbsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, suburbsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Suburbs.
     * @param {suburbsCreateArgs} args - Arguments to create a Suburbs.
     * @example
     * // Create one Suburbs
     * const Suburbs = await prisma.suburbs.create({
     *   data: {
     *     // ... data to create a Suburbs
     *   }
     * })
     * 
    **/
    create<T extends suburbsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, suburbsCreateArgs<ExtArgs>>
    ): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Suburbs.
     *     @param {suburbsCreateManyArgs} args - Arguments to create many Suburbs.
     *     @example
     *     // Create many Suburbs
     *     const suburbs = await prisma.suburbs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends suburbsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, suburbsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Suburbs.
     * @param {suburbsDeleteArgs} args - Arguments to delete one Suburbs.
     * @example
     * // Delete one Suburbs
     * const Suburbs = await prisma.suburbs.delete({
     *   where: {
     *     // ... filter to delete one Suburbs
     *   }
     * })
     * 
    **/
    delete<T extends suburbsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, suburbsDeleteArgs<ExtArgs>>
    ): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Suburbs.
     * @param {suburbsUpdateArgs} args - Arguments to update one Suburbs.
     * @example
     * // Update one Suburbs
     * const suburbs = await prisma.suburbs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends suburbsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, suburbsUpdateArgs<ExtArgs>>
    ): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Suburbs.
     * @param {suburbsDeleteManyArgs} args - Arguments to filter Suburbs to delete.
     * @example
     * // Delete a few Suburbs
     * const { count } = await prisma.suburbs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends suburbsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, suburbsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suburbs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suburbsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Suburbs
     * const suburbs = await prisma.suburbs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends suburbsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, suburbsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Suburbs.
     * @param {suburbsUpsertArgs} args - Arguments to update or create a Suburbs.
     * @example
     * // Update or create a Suburbs
     * const suburbs = await prisma.suburbs.upsert({
     *   create: {
     *     // ... data to create a Suburbs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Suburbs we want to update
     *   }
     * })
    **/
    upsert<T extends suburbsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, suburbsUpsertArgs<ExtArgs>>
    ): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Suburbs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suburbsCountArgs} args - Arguments to filter Suburbs to count.
     * @example
     * // Count the number of Suburbs
     * const count = await prisma.suburbs.count({
     *   where: {
     *     // ... the filter for the Suburbs we want to count
     *   }
     * })
    **/
    count<T extends suburbsCountArgs>(
      args?: Subset<T, suburbsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuburbsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Suburbs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuburbsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuburbsAggregateArgs>(args: Subset<T, SuburbsAggregateArgs>): Prisma.PrismaPromise<GetSuburbsAggregateType<T>>

    /**
     * Group by Suburbs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suburbsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends suburbsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: suburbsGroupByArgs['orderBy'] }
        : { orderBy?: suburbsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, suburbsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuburbsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the suburbs model
   */
  readonly fields: suburbsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for suburbs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__suburbsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cities<T extends suburbs$citiesArgs<ExtArgs> = {}>(args?: Subset<T, suburbs$citiesArgs<ExtArgs>>): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    deliveryPrices<T extends suburbs$deliveryPricesArgs<ExtArgs> = {}>(args?: Subset<T, suburbs$deliveryPricesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deliveryPricesPayload<ExtArgs>, T, 'findMany'> | Null>;

    orders<T extends suburbs$ordersArgs<ExtArgs> = {}>(args?: Subset<T, suburbs$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, 'findMany'> | Null>;

    orderPackages<T extends suburbs$orderPackagesArgs<ExtArgs> = {}>(args?: Subset<T, suburbs$orderPackagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPackagesPayload<ExtArgs>, T, 'findMany'> | Null>;

    senders<T extends suburbs$sendersArgs<ExtArgs> = {}>(args?: Subset<T, suburbs$sendersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sendersPayload<ExtArgs>, T, 'findMany'> | Null>;

    receivers<T extends suburbs$receiversArgs<ExtArgs> = {}>(args?: Subset<T, suburbs$receiversArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$receiversPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the suburbs model
   */ 
  interface suburbsFieldRefs {
    readonly id: FieldRef<"suburbs", 'String'>
    readonly suburb_name: FieldRef<"suburbs", 'String'>
    readonly del_flg: FieldRef<"suburbs", 'Boolean'>
    readonly createdAt: FieldRef<"suburbs", 'DateTime'>
    readonly updatedAt: FieldRef<"suburbs", 'DateTime'>
    readonly cityId: FieldRef<"suburbs", 'String'>
  }
    

  // Custom InputTypes

  /**
   * suburbs findUnique
   */
  export type suburbsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    /**
     * Filter, which suburbs to fetch.
     */
    where: suburbsWhereUniqueInput
  }


  /**
   * suburbs findUniqueOrThrow
   */
  export type suburbsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    /**
     * Filter, which suburbs to fetch.
     */
    where: suburbsWhereUniqueInput
  }


  /**
   * suburbs findFirst
   */
  export type suburbsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    /**
     * Filter, which suburbs to fetch.
     */
    where?: suburbsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suburbs to fetch.
     */
    orderBy?: suburbsOrderByWithRelationInput | suburbsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for suburbs.
     */
    cursor?: suburbsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suburbs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suburbs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of suburbs.
     */
    distinct?: SuburbsScalarFieldEnum | SuburbsScalarFieldEnum[]
  }


  /**
   * suburbs findFirstOrThrow
   */
  export type suburbsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    /**
     * Filter, which suburbs to fetch.
     */
    where?: suburbsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suburbs to fetch.
     */
    orderBy?: suburbsOrderByWithRelationInput | suburbsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for suburbs.
     */
    cursor?: suburbsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suburbs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suburbs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of suburbs.
     */
    distinct?: SuburbsScalarFieldEnum | SuburbsScalarFieldEnum[]
  }


  /**
   * suburbs findMany
   */
  export type suburbsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    /**
     * Filter, which suburbs to fetch.
     */
    where?: suburbsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suburbs to fetch.
     */
    orderBy?: suburbsOrderByWithRelationInput | suburbsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing suburbs.
     */
    cursor?: suburbsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suburbs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suburbs.
     */
    skip?: number
    distinct?: SuburbsScalarFieldEnum | SuburbsScalarFieldEnum[]
  }


  /**
   * suburbs create
   */
  export type suburbsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    /**
     * The data needed to create a suburbs.
     */
    data: XOR<suburbsCreateInput, suburbsUncheckedCreateInput>
  }


  /**
   * suburbs createMany
   */
  export type suburbsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many suburbs.
     */
    data: suburbsCreateManyInput | suburbsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * suburbs update
   */
  export type suburbsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    /**
     * The data needed to update a suburbs.
     */
    data: XOR<suburbsUpdateInput, suburbsUncheckedUpdateInput>
    /**
     * Choose, which suburbs to update.
     */
    where: suburbsWhereUniqueInput
  }


  /**
   * suburbs updateMany
   */
  export type suburbsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update suburbs.
     */
    data: XOR<suburbsUpdateManyMutationInput, suburbsUncheckedUpdateManyInput>
    /**
     * Filter which suburbs to update
     */
    where?: suburbsWhereInput
  }


  /**
   * suburbs upsert
   */
  export type suburbsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    /**
     * The filter to search for the suburbs to update in case it exists.
     */
    where: suburbsWhereUniqueInput
    /**
     * In case the suburbs found by the `where` argument doesn't exist, create a new suburbs with this data.
     */
    create: XOR<suburbsCreateInput, suburbsUncheckedCreateInput>
    /**
     * In case the suburbs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<suburbsUpdateInput, suburbsUncheckedUpdateInput>
  }


  /**
   * suburbs delete
   */
  export type suburbsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    /**
     * Filter which suburbs to delete.
     */
    where: suburbsWhereUniqueInput
  }


  /**
   * suburbs deleteMany
   */
  export type suburbsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which suburbs to delete
     */
    where?: suburbsWhereInput
  }


  /**
   * suburbs.cities
   */
  export type suburbs$citiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    where?: citiesWhereInput
  }


  /**
   * suburbs.deliveryPrices
   */
  export type suburbs$deliveryPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
    where?: deliveryPricesWhereInput
    orderBy?: deliveryPricesOrderByWithRelationInput | deliveryPricesOrderByWithRelationInput[]
    cursor?: deliveryPricesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeliveryPricesScalarFieldEnum | DeliveryPricesScalarFieldEnum[]
  }


  /**
   * suburbs.orders
   */
  export type suburbs$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }


  /**
   * suburbs.orderPackages
   */
  export type suburbs$orderPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderPackages
     */
    select?: orderPackagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderPackagesInclude<ExtArgs> | null
    where?: orderPackagesWhereInput
    orderBy?: orderPackagesOrderByWithRelationInput | orderPackagesOrderByWithRelationInput[]
    cursor?: orderPackagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderPackagesScalarFieldEnum | OrderPackagesScalarFieldEnum[]
  }


  /**
   * suburbs.senders
   */
  export type suburbs$sendersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the senders
     */
    select?: sendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sendersInclude<ExtArgs> | null
    where?: sendersWhereInput
    orderBy?: sendersOrderByWithRelationInput | sendersOrderByWithRelationInput[]
    cursor?: sendersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SendersScalarFieldEnum | SendersScalarFieldEnum[]
  }


  /**
   * suburbs.receivers
   */
  export type suburbs$receiversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receivers
     */
    select?: receiversSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: receiversInclude<ExtArgs> | null
    where?: receiversWhereInput
    orderBy?: receiversOrderByWithRelationInput | receiversOrderByWithRelationInput[]
    cursor?: receiversWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiversScalarFieldEnum | ReceiversScalarFieldEnum[]
  }


  /**
   * suburbs without action
   */
  export type suburbsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
  }



  /**
   * Model cities
   */

  export type AggregateCities = {
    _count: CitiesCountAggregateOutputType | null
    _min: CitiesMinAggregateOutputType | null
    _max: CitiesMaxAggregateOutputType | null
  }

  export type CitiesMinAggregateOutputType = {
    id: string | null
    city_name: string | null
    initials: string | null
    del_flg: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CitiesMaxAggregateOutputType = {
    id: string | null
    city_name: string | null
    initials: string | null
    del_flg: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CitiesCountAggregateOutputType = {
    id: number
    city_name: number
    initials: number
    del_flg: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CitiesMinAggregateInputType = {
    id?: true
    city_name?: true
    initials?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CitiesMaxAggregateInputType = {
    id?: true
    city_name?: true
    initials?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CitiesCountAggregateInputType = {
    id?: true
    city_name?: true
    initials?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CitiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cities to aggregate.
     */
    where?: citiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cities to fetch.
     */
    orderBy?: citiesOrderByWithRelationInput | citiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: citiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cities
    **/
    _count?: true | CitiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CitiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CitiesMaxAggregateInputType
  }

  export type GetCitiesAggregateType<T extends CitiesAggregateArgs> = {
        [P in keyof T & keyof AggregateCities]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCities[P]>
      : GetScalarType<T[P], AggregateCities[P]>
  }




  export type citiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: citiesWhereInput
    orderBy?: citiesOrderByWithAggregationInput | citiesOrderByWithAggregationInput[]
    by: CitiesScalarFieldEnum[] | CitiesScalarFieldEnum
    having?: citiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CitiesCountAggregateInputType | true
    _min?: CitiesMinAggregateInputType
    _max?: CitiesMaxAggregateInputType
  }

  export type CitiesGroupByOutputType = {
    id: string
    city_name: string
    initials: string
    del_flg: boolean
    createdAt: Date
    updatedAt: Date
    _count: CitiesCountAggregateOutputType | null
    _min: CitiesMinAggregateOutputType | null
    _max: CitiesMaxAggregateOutputType | null
  }

  type GetCitiesGroupByPayload<T extends citiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CitiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CitiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CitiesGroupByOutputType[P]>
            : GetScalarType<T[P], CitiesGroupByOutputType[P]>
        }
      >
    >


  export type citiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    city_name?: boolean
    initials?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    suburbs?: boolean | cities$suburbsArgs<ExtArgs>
    users?: boolean | cities$usersArgs<ExtArgs>
    biker?: boolean | cities$bikerArgs<ExtArgs>
    citydeliveryPrices?: boolean | cities$citydeliveryPricesArgs<ExtArgs>
    destinationdeliveryPrices?: boolean | cities$destinationdeliveryPricesArgs<ExtArgs>
    _count?: boolean | CitiesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cities"]>

  export type citiesSelectScalar = {
    id?: boolean
    city_name?: boolean
    initials?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type citiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    suburbs?: boolean | cities$suburbsArgs<ExtArgs>
    users?: boolean | cities$usersArgs<ExtArgs>
    biker?: boolean | cities$bikerArgs<ExtArgs>
    citydeliveryPrices?: boolean | cities$citydeliveryPricesArgs<ExtArgs>
    destinationdeliveryPrices?: boolean | cities$destinationdeliveryPricesArgs<ExtArgs>
    _count?: boolean | CitiesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $citiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cities"
    objects: {
      suburbs: Prisma.$suburbsPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs>[]
      biker: Prisma.$bikersPayload<ExtArgs>[]
      citydeliveryPrices: Prisma.$deliveryPricesPayload<ExtArgs>[]
      destinationdeliveryPrices: Prisma.$deliveryPricesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      city_name: string
      initials: string
      del_flg: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["cities"]>
    composites: {}
  }


  type citiesGetPayload<S extends boolean | null | undefined | citiesDefaultArgs> = $Result.GetResult<Prisma.$citiesPayload, S>

  type citiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<citiesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CitiesCountAggregateInputType | true
    }

  export interface citiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cities'], meta: { name: 'cities' } }
    /**
     * Find zero or one Cities that matches the filter.
     * @param {citiesFindUniqueArgs} args - Arguments to find a Cities
     * @example
     * // Get one Cities
     * const cities = await prisma.cities.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends citiesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, citiesFindUniqueArgs<ExtArgs>>
    ): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cities that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {citiesFindUniqueOrThrowArgs} args - Arguments to find a Cities
     * @example
     * // Get one Cities
     * const cities = await prisma.cities.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends citiesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, citiesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {citiesFindFirstArgs} args - Arguments to find a Cities
     * @example
     * // Get one Cities
     * const cities = await prisma.cities.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends citiesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, citiesFindFirstArgs<ExtArgs>>
    ): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cities that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {citiesFindFirstOrThrowArgs} args - Arguments to find a Cities
     * @example
     * // Get one Cities
     * const cities = await prisma.cities.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends citiesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, citiesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {citiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cities
     * const cities = await prisma.cities.findMany()
     * 
     * // Get first 10 Cities
     * const cities = await prisma.cities.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const citiesWithIdOnly = await prisma.cities.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends citiesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, citiesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cities.
     * @param {citiesCreateArgs} args - Arguments to create a Cities.
     * @example
     * // Create one Cities
     * const Cities = await prisma.cities.create({
     *   data: {
     *     // ... data to create a Cities
     *   }
     * })
     * 
    **/
    create<T extends citiesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, citiesCreateArgs<ExtArgs>>
    ): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cities.
     *     @param {citiesCreateManyArgs} args - Arguments to create many Cities.
     *     @example
     *     // Create many Cities
     *     const cities = await prisma.cities.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends citiesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, citiesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cities.
     * @param {citiesDeleteArgs} args - Arguments to delete one Cities.
     * @example
     * // Delete one Cities
     * const Cities = await prisma.cities.delete({
     *   where: {
     *     // ... filter to delete one Cities
     *   }
     * })
     * 
    **/
    delete<T extends citiesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, citiesDeleteArgs<ExtArgs>>
    ): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cities.
     * @param {citiesUpdateArgs} args - Arguments to update one Cities.
     * @example
     * // Update one Cities
     * const cities = await prisma.cities.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends citiesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, citiesUpdateArgs<ExtArgs>>
    ): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cities.
     * @param {citiesDeleteManyArgs} args - Arguments to filter Cities to delete.
     * @example
     * // Delete a few Cities
     * const { count } = await prisma.cities.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends citiesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, citiesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {citiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cities
     * const cities = await prisma.cities.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends citiesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, citiesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cities.
     * @param {citiesUpsertArgs} args - Arguments to update or create a Cities.
     * @example
     * // Update or create a Cities
     * const cities = await prisma.cities.upsert({
     *   create: {
     *     // ... data to create a Cities
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cities we want to update
     *   }
     * })
    **/
    upsert<T extends citiesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, citiesUpsertArgs<ExtArgs>>
    ): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {citiesCountArgs} args - Arguments to filter Cities to count.
     * @example
     * // Count the number of Cities
     * const count = await prisma.cities.count({
     *   where: {
     *     // ... the filter for the Cities we want to count
     *   }
     * })
    **/
    count<T extends citiesCountArgs>(
      args?: Subset<T, citiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CitiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CitiesAggregateArgs>(args: Subset<T, CitiesAggregateArgs>): Prisma.PrismaPromise<GetCitiesAggregateType<T>>

    /**
     * Group by Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {citiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends citiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: citiesGroupByArgs['orderBy'] }
        : { orderBy?: citiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, citiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCitiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cities model
   */
  readonly fields: citiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cities.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__citiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    suburbs<T extends cities$suburbsArgs<ExtArgs> = {}>(args?: Subset<T, cities$suburbsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends cities$usersArgs<ExtArgs> = {}>(args?: Subset<T, cities$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'> | Null>;

    biker<T extends cities$bikerArgs<ExtArgs> = {}>(args?: Subset<T, cities$bikerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bikersPayload<ExtArgs>, T, 'findMany'> | Null>;

    citydeliveryPrices<T extends cities$citydeliveryPricesArgs<ExtArgs> = {}>(args?: Subset<T, cities$citydeliveryPricesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deliveryPricesPayload<ExtArgs>, T, 'findMany'> | Null>;

    destinationdeliveryPrices<T extends cities$destinationdeliveryPricesArgs<ExtArgs> = {}>(args?: Subset<T, cities$destinationdeliveryPricesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deliveryPricesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cities model
   */ 
  interface citiesFieldRefs {
    readonly id: FieldRef<"cities", 'String'>
    readonly city_name: FieldRef<"cities", 'String'>
    readonly initials: FieldRef<"cities", 'String'>
    readonly del_flg: FieldRef<"cities", 'Boolean'>
    readonly createdAt: FieldRef<"cities", 'DateTime'>
    readonly updatedAt: FieldRef<"cities", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * cities findUnique
   */
  export type citiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    /**
     * Filter, which cities to fetch.
     */
    where: citiesWhereUniqueInput
  }


  /**
   * cities findUniqueOrThrow
   */
  export type citiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    /**
     * Filter, which cities to fetch.
     */
    where: citiesWhereUniqueInput
  }


  /**
   * cities findFirst
   */
  export type citiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    /**
     * Filter, which cities to fetch.
     */
    where?: citiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cities to fetch.
     */
    orderBy?: citiesOrderByWithRelationInput | citiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cities.
     */
    cursor?: citiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cities.
     */
    distinct?: CitiesScalarFieldEnum | CitiesScalarFieldEnum[]
  }


  /**
   * cities findFirstOrThrow
   */
  export type citiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    /**
     * Filter, which cities to fetch.
     */
    where?: citiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cities to fetch.
     */
    orderBy?: citiesOrderByWithRelationInput | citiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cities.
     */
    cursor?: citiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cities.
     */
    distinct?: CitiesScalarFieldEnum | CitiesScalarFieldEnum[]
  }


  /**
   * cities findMany
   */
  export type citiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    /**
     * Filter, which cities to fetch.
     */
    where?: citiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cities to fetch.
     */
    orderBy?: citiesOrderByWithRelationInput | citiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cities.
     */
    cursor?: citiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cities.
     */
    skip?: number
    distinct?: CitiesScalarFieldEnum | CitiesScalarFieldEnum[]
  }


  /**
   * cities create
   */
  export type citiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    /**
     * The data needed to create a cities.
     */
    data: XOR<citiesCreateInput, citiesUncheckedCreateInput>
  }


  /**
   * cities createMany
   */
  export type citiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cities.
     */
    data: citiesCreateManyInput | citiesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * cities update
   */
  export type citiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    /**
     * The data needed to update a cities.
     */
    data: XOR<citiesUpdateInput, citiesUncheckedUpdateInput>
    /**
     * Choose, which cities to update.
     */
    where: citiesWhereUniqueInput
  }


  /**
   * cities updateMany
   */
  export type citiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cities.
     */
    data: XOR<citiesUpdateManyMutationInput, citiesUncheckedUpdateManyInput>
    /**
     * Filter which cities to update
     */
    where?: citiesWhereInput
  }


  /**
   * cities upsert
   */
  export type citiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    /**
     * The filter to search for the cities to update in case it exists.
     */
    where: citiesWhereUniqueInput
    /**
     * In case the cities found by the `where` argument doesn't exist, create a new cities with this data.
     */
    create: XOR<citiesCreateInput, citiesUncheckedCreateInput>
    /**
     * In case the cities was found with the provided `where` argument, update it with this data.
     */
    update: XOR<citiesUpdateInput, citiesUncheckedUpdateInput>
  }


  /**
   * cities delete
   */
  export type citiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    /**
     * Filter which cities to delete.
     */
    where: citiesWhereUniqueInput
  }


  /**
   * cities deleteMany
   */
  export type citiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cities to delete
     */
    where?: citiesWhereInput
  }


  /**
   * cities.suburbs
   */
  export type cities$suburbsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    where?: suburbsWhereInput
    orderBy?: suburbsOrderByWithRelationInput | suburbsOrderByWithRelationInput[]
    cursor?: suburbsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SuburbsScalarFieldEnum | SuburbsScalarFieldEnum[]
  }


  /**
   * cities.users
   */
  export type cities$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * cities.biker
   */
  export type cities$bikerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bikers
     */
    select?: bikersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: bikersInclude<ExtArgs> | null
    where?: bikersWhereInput
    orderBy?: bikersOrderByWithRelationInput | bikersOrderByWithRelationInput[]
    cursor?: bikersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BikersScalarFieldEnum | BikersScalarFieldEnum[]
  }


  /**
   * cities.citydeliveryPrices
   */
  export type cities$citydeliveryPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
    where?: deliveryPricesWhereInput
    orderBy?: deliveryPricesOrderByWithRelationInput | deliveryPricesOrderByWithRelationInput[]
    cursor?: deliveryPricesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeliveryPricesScalarFieldEnum | DeliveryPricesScalarFieldEnum[]
  }


  /**
   * cities.destinationdeliveryPrices
   */
  export type cities$destinationdeliveryPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
    where?: deliveryPricesWhereInput
    orderBy?: deliveryPricesOrderByWithRelationInput | deliveryPricesOrderByWithRelationInput[]
    cursor?: deliveryPricesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeliveryPricesScalarFieldEnum | DeliveryPricesScalarFieldEnum[]
  }


  /**
   * cities without action
   */
  export type citiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
  }



  /**
   * Model deliveryPrices
   */

  export type AggregateDeliveryPrices = {
    _count: DeliveryPricesCountAggregateOutputType | null
    _avg: DeliveryPricesAvgAggregateOutputType | null
    _sum: DeliveryPricesSumAggregateOutputType | null
    _min: DeliveryPricesMinAggregateOutputType | null
    _max: DeliveryPricesMaxAggregateOutputType | null
  }

  export type DeliveryPricesAvgAggregateOutputType = {
    baseWeightPrice: number | null
    extraWeightPrice: number | null
  }

  export type DeliveryPricesSumAggregateOutputType = {
    baseWeightPrice: number | null
    extraWeightPrice: number | null
  }

  export type DeliveryPricesMinAggregateOutputType = {
    id: string | null
    destinationId: string | null
    cityId: string | null
    baseWeightPrice: number | null
    extraWeightPrice: number | null
    del_flg: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    suburbsId: string | null
  }

  export type DeliveryPricesMaxAggregateOutputType = {
    id: string | null
    destinationId: string | null
    cityId: string | null
    baseWeightPrice: number | null
    extraWeightPrice: number | null
    del_flg: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    suburbsId: string | null
  }

  export type DeliveryPricesCountAggregateOutputType = {
    id: number
    destinationId: number
    cityId: number
    baseWeightPrice: number
    extraWeightPrice: number
    del_flg: number
    createdAt: number
    updatedAt: number
    suburbsId: number
    _all: number
  }


  export type DeliveryPricesAvgAggregateInputType = {
    baseWeightPrice?: true
    extraWeightPrice?: true
  }

  export type DeliveryPricesSumAggregateInputType = {
    baseWeightPrice?: true
    extraWeightPrice?: true
  }

  export type DeliveryPricesMinAggregateInputType = {
    id?: true
    destinationId?: true
    cityId?: true
    baseWeightPrice?: true
    extraWeightPrice?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    suburbsId?: true
  }

  export type DeliveryPricesMaxAggregateInputType = {
    id?: true
    destinationId?: true
    cityId?: true
    baseWeightPrice?: true
    extraWeightPrice?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    suburbsId?: true
  }

  export type DeliveryPricesCountAggregateInputType = {
    id?: true
    destinationId?: true
    cityId?: true
    baseWeightPrice?: true
    extraWeightPrice?: true
    del_flg?: true
    createdAt?: true
    updatedAt?: true
    suburbsId?: true
    _all?: true
  }

  export type DeliveryPricesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which deliveryPrices to aggregate.
     */
    where?: deliveryPricesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliveryPrices to fetch.
     */
    orderBy?: deliveryPricesOrderByWithRelationInput | deliveryPricesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: deliveryPricesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliveryPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliveryPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned deliveryPrices
    **/
    _count?: true | DeliveryPricesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeliveryPricesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeliveryPricesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeliveryPricesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeliveryPricesMaxAggregateInputType
  }

  export type GetDeliveryPricesAggregateType<T extends DeliveryPricesAggregateArgs> = {
        [P in keyof T & keyof AggregateDeliveryPrices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeliveryPrices[P]>
      : GetScalarType<T[P], AggregateDeliveryPrices[P]>
  }




  export type deliveryPricesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: deliveryPricesWhereInput
    orderBy?: deliveryPricesOrderByWithAggregationInput | deliveryPricesOrderByWithAggregationInput[]
    by: DeliveryPricesScalarFieldEnum[] | DeliveryPricesScalarFieldEnum
    having?: deliveryPricesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeliveryPricesCountAggregateInputType | true
    _avg?: DeliveryPricesAvgAggregateInputType
    _sum?: DeliveryPricesSumAggregateInputType
    _min?: DeliveryPricesMinAggregateInputType
    _max?: DeliveryPricesMaxAggregateInputType
  }

  export type DeliveryPricesGroupByOutputType = {
    id: string
    destinationId: string | null
    cityId: string | null
    baseWeightPrice: number
    extraWeightPrice: number
    del_flg: boolean
    createdAt: Date
    updatedAt: Date
    suburbsId: string | null
    _count: DeliveryPricesCountAggregateOutputType | null
    _avg: DeliveryPricesAvgAggregateOutputType | null
    _sum: DeliveryPricesSumAggregateOutputType | null
    _min: DeliveryPricesMinAggregateOutputType | null
    _max: DeliveryPricesMaxAggregateOutputType | null
  }

  type GetDeliveryPricesGroupByPayload<T extends deliveryPricesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeliveryPricesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeliveryPricesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeliveryPricesGroupByOutputType[P]>
            : GetScalarType<T[P], DeliveryPricesGroupByOutputType[P]>
        }
      >
    >


  export type deliveryPricesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    destinationId?: boolean
    cityId?: boolean
    baseWeightPrice?: boolean
    extraWeightPrice?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    suburbsId?: boolean
    destination?: boolean | deliveryPrices$destinationArgs<ExtArgs>
    cities?: boolean | deliveryPrices$citiesArgs<ExtArgs>
    suburbs?: boolean | deliveryPrices$suburbsArgs<ExtArgs>
  }, ExtArgs["result"]["deliveryPrices"]>

  export type deliveryPricesSelectScalar = {
    id?: boolean
    destinationId?: boolean
    cityId?: boolean
    baseWeightPrice?: boolean
    extraWeightPrice?: boolean
    del_flg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    suburbsId?: boolean
  }

  export type deliveryPricesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    destination?: boolean | deliveryPrices$destinationArgs<ExtArgs>
    cities?: boolean | deliveryPrices$citiesArgs<ExtArgs>
    suburbs?: boolean | deliveryPrices$suburbsArgs<ExtArgs>
  }


  export type $deliveryPricesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "deliveryPrices"
    objects: {
      destination: Prisma.$citiesPayload<ExtArgs> | null
      cities: Prisma.$citiesPayload<ExtArgs> | null
      suburbs: Prisma.$suburbsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      destinationId: string | null
      cityId: string | null
      baseWeightPrice: number
      extraWeightPrice: number
      del_flg: boolean
      createdAt: Date
      updatedAt: Date
      suburbsId: string | null
    }, ExtArgs["result"]["deliveryPrices"]>
    composites: {}
  }


  type deliveryPricesGetPayload<S extends boolean | null | undefined | deliveryPricesDefaultArgs> = $Result.GetResult<Prisma.$deliveryPricesPayload, S>

  type deliveryPricesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<deliveryPricesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DeliveryPricesCountAggregateInputType | true
    }

  export interface deliveryPricesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['deliveryPrices'], meta: { name: 'deliveryPrices' } }
    /**
     * Find zero or one DeliveryPrices that matches the filter.
     * @param {deliveryPricesFindUniqueArgs} args - Arguments to find a DeliveryPrices
     * @example
     * // Get one DeliveryPrices
     * const deliveryPrices = await prisma.deliveryPrices.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends deliveryPricesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, deliveryPricesFindUniqueArgs<ExtArgs>>
    ): Prisma__deliveryPricesClient<$Result.GetResult<Prisma.$deliveryPricesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DeliveryPrices that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {deliveryPricesFindUniqueOrThrowArgs} args - Arguments to find a DeliveryPrices
     * @example
     * // Get one DeliveryPrices
     * const deliveryPrices = await prisma.deliveryPrices.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends deliveryPricesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, deliveryPricesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__deliveryPricesClient<$Result.GetResult<Prisma.$deliveryPricesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DeliveryPrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveryPricesFindFirstArgs} args - Arguments to find a DeliveryPrices
     * @example
     * // Get one DeliveryPrices
     * const deliveryPrices = await prisma.deliveryPrices.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends deliveryPricesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, deliveryPricesFindFirstArgs<ExtArgs>>
    ): Prisma__deliveryPricesClient<$Result.GetResult<Prisma.$deliveryPricesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DeliveryPrices that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveryPricesFindFirstOrThrowArgs} args - Arguments to find a DeliveryPrices
     * @example
     * // Get one DeliveryPrices
     * const deliveryPrices = await prisma.deliveryPrices.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends deliveryPricesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, deliveryPricesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__deliveryPricesClient<$Result.GetResult<Prisma.$deliveryPricesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DeliveryPrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveryPricesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeliveryPrices
     * const deliveryPrices = await prisma.deliveryPrices.findMany()
     * 
     * // Get first 10 DeliveryPrices
     * const deliveryPrices = await prisma.deliveryPrices.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deliveryPricesWithIdOnly = await prisma.deliveryPrices.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends deliveryPricesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, deliveryPricesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deliveryPricesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DeliveryPrices.
     * @param {deliveryPricesCreateArgs} args - Arguments to create a DeliveryPrices.
     * @example
     * // Create one DeliveryPrices
     * const DeliveryPrices = await prisma.deliveryPrices.create({
     *   data: {
     *     // ... data to create a DeliveryPrices
     *   }
     * })
     * 
    **/
    create<T extends deliveryPricesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, deliveryPricesCreateArgs<ExtArgs>>
    ): Prisma__deliveryPricesClient<$Result.GetResult<Prisma.$deliveryPricesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DeliveryPrices.
     *     @param {deliveryPricesCreateManyArgs} args - Arguments to create many DeliveryPrices.
     *     @example
     *     // Create many DeliveryPrices
     *     const deliveryPrices = await prisma.deliveryPrices.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends deliveryPricesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, deliveryPricesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DeliveryPrices.
     * @param {deliveryPricesDeleteArgs} args - Arguments to delete one DeliveryPrices.
     * @example
     * // Delete one DeliveryPrices
     * const DeliveryPrices = await prisma.deliveryPrices.delete({
     *   where: {
     *     // ... filter to delete one DeliveryPrices
     *   }
     * })
     * 
    **/
    delete<T extends deliveryPricesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, deliveryPricesDeleteArgs<ExtArgs>>
    ): Prisma__deliveryPricesClient<$Result.GetResult<Prisma.$deliveryPricesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DeliveryPrices.
     * @param {deliveryPricesUpdateArgs} args - Arguments to update one DeliveryPrices.
     * @example
     * // Update one DeliveryPrices
     * const deliveryPrices = await prisma.deliveryPrices.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends deliveryPricesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, deliveryPricesUpdateArgs<ExtArgs>>
    ): Prisma__deliveryPricesClient<$Result.GetResult<Prisma.$deliveryPricesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DeliveryPrices.
     * @param {deliveryPricesDeleteManyArgs} args - Arguments to filter DeliveryPrices to delete.
     * @example
     * // Delete a few DeliveryPrices
     * const { count } = await prisma.deliveryPrices.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends deliveryPricesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, deliveryPricesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeliveryPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveryPricesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeliveryPrices
     * const deliveryPrices = await prisma.deliveryPrices.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends deliveryPricesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, deliveryPricesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DeliveryPrices.
     * @param {deliveryPricesUpsertArgs} args - Arguments to update or create a DeliveryPrices.
     * @example
     * // Update or create a DeliveryPrices
     * const deliveryPrices = await prisma.deliveryPrices.upsert({
     *   create: {
     *     // ... data to create a DeliveryPrices
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeliveryPrices we want to update
     *   }
     * })
    **/
    upsert<T extends deliveryPricesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, deliveryPricesUpsertArgs<ExtArgs>>
    ): Prisma__deliveryPricesClient<$Result.GetResult<Prisma.$deliveryPricesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DeliveryPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveryPricesCountArgs} args - Arguments to filter DeliveryPrices to count.
     * @example
     * // Count the number of DeliveryPrices
     * const count = await prisma.deliveryPrices.count({
     *   where: {
     *     // ... the filter for the DeliveryPrices we want to count
     *   }
     * })
    **/
    count<T extends deliveryPricesCountArgs>(
      args?: Subset<T, deliveryPricesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeliveryPricesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeliveryPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryPricesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeliveryPricesAggregateArgs>(args: Subset<T, DeliveryPricesAggregateArgs>): Prisma.PrismaPromise<GetDeliveryPricesAggregateType<T>>

    /**
     * Group by DeliveryPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveryPricesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends deliveryPricesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: deliveryPricesGroupByArgs['orderBy'] }
        : { orderBy?: deliveryPricesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, deliveryPricesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeliveryPricesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the deliveryPrices model
   */
  readonly fields: deliveryPricesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for deliveryPrices.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__deliveryPricesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    destination<T extends deliveryPrices$destinationArgs<ExtArgs> = {}>(args?: Subset<T, deliveryPrices$destinationArgs<ExtArgs>>): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    cities<T extends deliveryPrices$citiesArgs<ExtArgs> = {}>(args?: Subset<T, deliveryPrices$citiesArgs<ExtArgs>>): Prisma__citiesClient<$Result.GetResult<Prisma.$citiesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    suburbs<T extends deliveryPrices$suburbsArgs<ExtArgs> = {}>(args?: Subset<T, deliveryPrices$suburbsArgs<ExtArgs>>): Prisma__suburbsClient<$Result.GetResult<Prisma.$suburbsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the deliveryPrices model
   */ 
  interface deliveryPricesFieldRefs {
    readonly id: FieldRef<"deliveryPrices", 'String'>
    readonly destinationId: FieldRef<"deliveryPrices", 'String'>
    readonly cityId: FieldRef<"deliveryPrices", 'String'>
    readonly baseWeightPrice: FieldRef<"deliveryPrices", 'Float'>
    readonly extraWeightPrice: FieldRef<"deliveryPrices", 'Float'>
    readonly del_flg: FieldRef<"deliveryPrices", 'Boolean'>
    readonly createdAt: FieldRef<"deliveryPrices", 'DateTime'>
    readonly updatedAt: FieldRef<"deliveryPrices", 'DateTime'>
    readonly suburbsId: FieldRef<"deliveryPrices", 'String'>
  }
    

  // Custom InputTypes

  /**
   * deliveryPrices findUnique
   */
  export type deliveryPricesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
    /**
     * Filter, which deliveryPrices to fetch.
     */
    where: deliveryPricesWhereUniqueInput
  }


  /**
   * deliveryPrices findUniqueOrThrow
   */
  export type deliveryPricesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
    /**
     * Filter, which deliveryPrices to fetch.
     */
    where: deliveryPricesWhereUniqueInput
  }


  /**
   * deliveryPrices findFirst
   */
  export type deliveryPricesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
    /**
     * Filter, which deliveryPrices to fetch.
     */
    where?: deliveryPricesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliveryPrices to fetch.
     */
    orderBy?: deliveryPricesOrderByWithRelationInput | deliveryPricesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deliveryPrices.
     */
    cursor?: deliveryPricesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliveryPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliveryPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deliveryPrices.
     */
    distinct?: DeliveryPricesScalarFieldEnum | DeliveryPricesScalarFieldEnum[]
  }


  /**
   * deliveryPrices findFirstOrThrow
   */
  export type deliveryPricesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
    /**
     * Filter, which deliveryPrices to fetch.
     */
    where?: deliveryPricesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliveryPrices to fetch.
     */
    orderBy?: deliveryPricesOrderByWithRelationInput | deliveryPricesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deliveryPrices.
     */
    cursor?: deliveryPricesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliveryPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliveryPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deliveryPrices.
     */
    distinct?: DeliveryPricesScalarFieldEnum | DeliveryPricesScalarFieldEnum[]
  }


  /**
   * deliveryPrices findMany
   */
  export type deliveryPricesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
    /**
     * Filter, which deliveryPrices to fetch.
     */
    where?: deliveryPricesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliveryPrices to fetch.
     */
    orderBy?: deliveryPricesOrderByWithRelationInput | deliveryPricesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing deliveryPrices.
     */
    cursor?: deliveryPricesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliveryPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliveryPrices.
     */
    skip?: number
    distinct?: DeliveryPricesScalarFieldEnum | DeliveryPricesScalarFieldEnum[]
  }


  /**
   * deliveryPrices create
   */
  export type deliveryPricesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
    /**
     * The data needed to create a deliveryPrices.
     */
    data: XOR<deliveryPricesCreateInput, deliveryPricesUncheckedCreateInput>
  }


  /**
   * deliveryPrices createMany
   */
  export type deliveryPricesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many deliveryPrices.
     */
    data: deliveryPricesCreateManyInput | deliveryPricesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * deliveryPrices update
   */
  export type deliveryPricesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
    /**
     * The data needed to update a deliveryPrices.
     */
    data: XOR<deliveryPricesUpdateInput, deliveryPricesUncheckedUpdateInput>
    /**
     * Choose, which deliveryPrices to update.
     */
    where: deliveryPricesWhereUniqueInput
  }


  /**
   * deliveryPrices updateMany
   */
  export type deliveryPricesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update deliveryPrices.
     */
    data: XOR<deliveryPricesUpdateManyMutationInput, deliveryPricesUncheckedUpdateManyInput>
    /**
     * Filter which deliveryPrices to update
     */
    where?: deliveryPricesWhereInput
  }


  /**
   * deliveryPrices upsert
   */
  export type deliveryPricesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
    /**
     * The filter to search for the deliveryPrices to update in case it exists.
     */
    where: deliveryPricesWhereUniqueInput
    /**
     * In case the deliveryPrices found by the `where` argument doesn't exist, create a new deliveryPrices with this data.
     */
    create: XOR<deliveryPricesCreateInput, deliveryPricesUncheckedCreateInput>
    /**
     * In case the deliveryPrices was found with the provided `where` argument, update it with this data.
     */
    update: XOR<deliveryPricesUpdateInput, deliveryPricesUncheckedUpdateInput>
  }


  /**
   * deliveryPrices delete
   */
  export type deliveryPricesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
    /**
     * Filter which deliveryPrices to delete.
     */
    where: deliveryPricesWhereUniqueInput
  }


  /**
   * deliveryPrices deleteMany
   */
  export type deliveryPricesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which deliveryPrices to delete
     */
    where?: deliveryPricesWhereInput
  }


  /**
   * deliveryPrices.destination
   */
  export type deliveryPrices$destinationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    where?: citiesWhereInput
  }


  /**
   * deliveryPrices.cities
   */
  export type deliveryPrices$citiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cities
     */
    select?: citiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: citiesInclude<ExtArgs> | null
    where?: citiesWhereInput
  }


  /**
   * deliveryPrices.suburbs
   */
  export type deliveryPrices$suburbsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suburbs
     */
    select?: suburbsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suburbsInclude<ExtArgs> | null
    where?: suburbsWhereInput
  }


  /**
   * deliveryPrices without action
   */
  export type deliveryPricesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliveryPrices
     */
    select?: deliveryPricesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryPricesInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    email: 'email',
    telephone: 'telephone',
    password: 'password',
    location: 'location',
    code: 'code',
    expiration: 'expiration',
    role_name: 'role_name',
    confirmed: 'confirmed',
    del_flg: 'del_flg',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const PaymentsScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    type: 'type',
    reference: 'reference',
    orderCode: 'orderCode',
    narration: 'narration'
  };

  export type PaymentsScalarFieldEnum = (typeof PaymentsScalarFieldEnum)[keyof typeof PaymentsScalarFieldEnum]


  export const BikersScalarFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    email: 'email',
    telephone: 'telephone',
    password: 'password',
    code: 'code',
    expiration: 'expiration',
    confirmed: 'confirmed',
    del_flg: 'del_flg',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    location: 'location'
  };

  export type BikersScalarFieldEnum = (typeof BikersScalarFieldEnum)[keyof typeof BikersScalarFieldEnum]


  export const SendersScalarFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    email: 'email',
    telephone: 'telephone',
    pickUpLocation: 'pickUpLocation',
    password: 'password',
    confirmed: 'confirmed',
    isDormat: 'isDormat',
    code: 'code',
    expiration: 'expiration',
    lastLogin: 'lastLogin',
    rewardPoints: 'rewardPoints',
    redeemedPoints: 'redeemedPoints',
    del_flg: 'del_flg',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SendersScalarFieldEnum = (typeof SendersScalarFieldEnum)[keyof typeof SendersScalarFieldEnum]


  export const ReceiversScalarFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    telephone: 'telephone',
    email: 'email',
    deliveryLocation: 'deliveryLocation',
    del_flg: 'del_flg',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    senderId: 'senderId'
  };

  export type ReceiversScalarFieldEnum = (typeof ReceiversScalarFieldEnum)[keyof typeof ReceiversScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    orderCode: 'orderCode',
    senderId: 'senderId',
    orderType: 'orderType',
    grandAmount: 'grandAmount',
    discountAmount: 'discountAmount',
    discountPercentage: 'discountPercentage',
    totalAmount: 'totalAmount',
    del_flg: 'del_flg',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    pickUpLocation: 'pickUpLocation'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const OrderPackagesScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    orderCode: 'orderCode',
    receiverId: 'receiverId',
    deliveryLocation: 'deliveryLocation',
    details: 'details',
    paymentBy: 'paymentBy',
    estimatedWeight: 'estimatedWeight',
    baseWeight: 'baseWeight',
    extraWeight: 'extraWeight',
    valueOfPackage: 'valueOfPackage',
    itemCost: 'itemCost',
    deliveryFee: 'deliveryFee',
    itemImage: 'itemImage',
    pickupBikerId: 'pickupBikerId',
    deliverBikerId: 'deliverBikerId',
    status: 'status',
    secondReceipientName: 'secondReceipientName',
    secondReceipientNumber: 'secondReceipientNumber',
    reason: 'reason',
    pickup_share: 'pickup_share',
    delivery_share: 'delivery_share',
    transit_share: 'transit_share',
    system_share: 'system_share',
    qcs_share: 'qcs_share',
    del_flg: 'del_flg',
    insured: 'insured',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderPackagesScalarFieldEnum = (typeof OrderPackagesScalarFieldEnum)[keyof typeof OrderPackagesScalarFieldEnum]


  export const PackageHistoriesScalarFieldEnum: {
    id: 'id',
    status: 'status',
    packageId: 'packageId',
    reason: 'reason',
    del_flg: 'del_flg',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PackageHistoriesScalarFieldEnum = (typeof PackageHistoriesScalarFieldEnum)[keyof typeof PackageHistoriesScalarFieldEnum]


  export const SuburbsScalarFieldEnum: {
    id: 'id',
    suburb_name: 'suburb_name',
    del_flg: 'del_flg',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    cityId: 'cityId'
  };

  export type SuburbsScalarFieldEnum = (typeof SuburbsScalarFieldEnum)[keyof typeof SuburbsScalarFieldEnum]


  export const CitiesScalarFieldEnum: {
    id: 'id',
    city_name: 'city_name',
    initials: 'initials',
    del_flg: 'del_flg',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CitiesScalarFieldEnum = (typeof CitiesScalarFieldEnum)[keyof typeof CitiesScalarFieldEnum]


  export const DeliveryPricesScalarFieldEnum: {
    id: 'id',
    destinationId: 'destinationId',
    cityId: 'cityId',
    baseWeightPrice: 'baseWeightPrice',
    extraWeightPrice: 'extraWeightPrice',
    del_flg: 'del_flg',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    suburbsId: 'suburbsId'
  };

  export type DeliveryPricesScalarFieldEnum = (typeof DeliveryPricesScalarFieldEnum)[keyof typeof DeliveryPricesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'OrderType'
   */
  export type EnumOrderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderType'>
    


  /**
   * Reference to a field of type 'OrderType[]'
   */
  export type ListEnumOrderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderType[]'>
    


  /**
   * Reference to a field of type 'paymentBy'
   */
  export type EnumpaymentByFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'paymentBy'>
    


  /**
   * Reference to a field of type 'paymentBy[]'
   */
  export type ListEnumpaymentByFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'paymentBy[]'>
    


  /**
   * Reference to a field of type 'status'
   */
  export type EnumstatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'status'>
    


  /**
   * Reference to a field of type 'status[]'
   */
  export type ListEnumstatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'status[]'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: StringFilter<"users"> | string
    fullname?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    telephone?: StringNullableFilter<"users"> | string | null
    password?: StringFilter<"users"> | string
    location?: StringNullableFilter<"users"> | string | null
    code?: StringNullableFilter<"users"> | string | null
    expiration?: DateTimeNullableFilter<"users"> | Date | string | null
    role_name?: StringNullableFilter<"users"> | string | null
    confirmed?: BoolFilter<"users"> | boolean
    del_flg?: IntFilter<"users"> | number
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    cities?: XOR<CitiesNullableRelationFilter, citiesWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    telephone?: SortOrderInput | SortOrder
    password?: SortOrder
    location?: SortOrderInput | SortOrder
    code?: SortOrderInput | SortOrder
    expiration?: SortOrderInput | SortOrder
    role_name?: SortOrderInput | SortOrder
    confirmed?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cities?: citiesOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    fullname?: StringFilter<"users"> | string
    telephone?: StringNullableFilter<"users"> | string | null
    password?: StringFilter<"users"> | string
    location?: StringNullableFilter<"users"> | string | null
    code?: StringNullableFilter<"users"> | string | null
    expiration?: DateTimeNullableFilter<"users"> | Date | string | null
    role_name?: StringNullableFilter<"users"> | string | null
    confirmed?: BoolFilter<"users"> | boolean
    del_flg?: IntFilter<"users"> | number
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    cities?: XOR<CitiesNullableRelationFilter, citiesWhereInput> | null
  }, "id" | "id" | "email">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    telephone?: SortOrderInput | SortOrder
    password?: SortOrder
    location?: SortOrderInput | SortOrder
    code?: SortOrderInput | SortOrder
    expiration?: SortOrderInput | SortOrder
    role_name?: SortOrderInput | SortOrder
    confirmed?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"users"> | string
    fullname?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    telephone?: StringNullableWithAggregatesFilter<"users"> | string | null
    password?: StringWithAggregatesFilter<"users"> | string
    location?: StringNullableWithAggregatesFilter<"users"> | string | null
    code?: StringNullableWithAggregatesFilter<"users"> | string | null
    expiration?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    role_name?: StringNullableWithAggregatesFilter<"users"> | string | null
    confirmed?: BoolWithAggregatesFilter<"users"> | boolean
    del_flg?: IntWithAggregatesFilter<"users"> | number
    createdAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
  }

  export type paymentsWhereInput = {
    AND?: paymentsWhereInput | paymentsWhereInput[]
    OR?: paymentsWhereInput[]
    NOT?: paymentsWhereInput | paymentsWhereInput[]
    id?: StringFilter<"payments"> | string
    amount?: FloatFilter<"payments"> | number
    type?: StringFilter<"payments"> | string
    reference?: StringNullableFilter<"payments"> | string | null
    orderCode?: IntFilter<"payments"> | number
    narration?: StringFilter<"payments"> | string
  }

  export type paymentsOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    reference?: SortOrderInput | SortOrder
    orderCode?: SortOrder
    narration?: SortOrder
  }

  export type paymentsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: paymentsWhereInput | paymentsWhereInput[]
    OR?: paymentsWhereInput[]
    NOT?: paymentsWhereInput | paymentsWhereInput[]
    amount?: FloatFilter<"payments"> | number
    type?: StringFilter<"payments"> | string
    reference?: StringNullableFilter<"payments"> | string | null
    orderCode?: IntFilter<"payments"> | number
    narration?: StringFilter<"payments"> | string
  }, "id" | "id">

  export type paymentsOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    reference?: SortOrderInput | SortOrder
    orderCode?: SortOrder
    narration?: SortOrder
    _count?: paymentsCountOrderByAggregateInput
    _avg?: paymentsAvgOrderByAggregateInput
    _max?: paymentsMaxOrderByAggregateInput
    _min?: paymentsMinOrderByAggregateInput
    _sum?: paymentsSumOrderByAggregateInput
  }

  export type paymentsScalarWhereWithAggregatesInput = {
    AND?: paymentsScalarWhereWithAggregatesInput | paymentsScalarWhereWithAggregatesInput[]
    OR?: paymentsScalarWhereWithAggregatesInput[]
    NOT?: paymentsScalarWhereWithAggregatesInput | paymentsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"payments"> | string
    amount?: FloatWithAggregatesFilter<"payments"> | number
    type?: StringWithAggregatesFilter<"payments"> | string
    reference?: StringNullableWithAggregatesFilter<"payments"> | string | null
    orderCode?: IntWithAggregatesFilter<"payments"> | number
    narration?: StringWithAggregatesFilter<"payments"> | string
  }

  export type bikersWhereInput = {
    AND?: bikersWhereInput | bikersWhereInput[]
    OR?: bikersWhereInput[]
    NOT?: bikersWhereInput | bikersWhereInput[]
    id?: StringFilter<"bikers"> | string
    fullname?: StringFilter<"bikers"> | string
    email?: StringNullableFilter<"bikers"> | string | null
    telephone?: StringFilter<"bikers"> | string
    password?: StringFilter<"bikers"> | string
    code?: StringNullableFilter<"bikers"> | string | null
    expiration?: DateTimeNullableFilter<"bikers"> | Date | string | null
    confirmed?: BoolFilter<"bikers"> | boolean
    del_flg?: IntFilter<"bikers"> | number
    createdAt?: DateTimeFilter<"bikers"> | Date | string
    updatedAt?: DateTimeFilter<"bikers"> | Date | string
    location?: StringNullableFilter<"bikers"> | string | null
    packagesPickupBikers?: OrderPackagesListRelationFilter
    packagesDeliveryBikers?: OrderPackagesListRelationFilter
    cities?: XOR<CitiesNullableRelationFilter, citiesWhereInput> | null
  }

  export type bikersOrderByWithRelationInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrderInput | SortOrder
    telephone?: SortOrder
    password?: SortOrder
    code?: SortOrderInput | SortOrder
    expiration?: SortOrderInput | SortOrder
    confirmed?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    location?: SortOrderInput | SortOrder
    packagesPickupBikers?: orderPackagesOrderByRelationAggregateInput
    packagesDeliveryBikers?: orderPackagesOrderByRelationAggregateInput
    cities?: citiesOrderByWithRelationInput
  }

  export type bikersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    telephone?: string
    AND?: bikersWhereInput | bikersWhereInput[]
    OR?: bikersWhereInput[]
    NOT?: bikersWhereInput | bikersWhereInput[]
    fullname?: StringFilter<"bikers"> | string
    email?: StringNullableFilter<"bikers"> | string | null
    password?: StringFilter<"bikers"> | string
    code?: StringNullableFilter<"bikers"> | string | null
    expiration?: DateTimeNullableFilter<"bikers"> | Date | string | null
    confirmed?: BoolFilter<"bikers"> | boolean
    del_flg?: IntFilter<"bikers"> | number
    createdAt?: DateTimeFilter<"bikers"> | Date | string
    updatedAt?: DateTimeFilter<"bikers"> | Date | string
    location?: StringNullableFilter<"bikers"> | string | null
    packagesPickupBikers?: OrderPackagesListRelationFilter
    packagesDeliveryBikers?: OrderPackagesListRelationFilter
    cities?: XOR<CitiesNullableRelationFilter, citiesWhereInput> | null
  }, "id" | "id" | "telephone">

  export type bikersOrderByWithAggregationInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrderInput | SortOrder
    telephone?: SortOrder
    password?: SortOrder
    code?: SortOrderInput | SortOrder
    expiration?: SortOrderInput | SortOrder
    confirmed?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    location?: SortOrderInput | SortOrder
    _count?: bikersCountOrderByAggregateInput
    _avg?: bikersAvgOrderByAggregateInput
    _max?: bikersMaxOrderByAggregateInput
    _min?: bikersMinOrderByAggregateInput
    _sum?: bikersSumOrderByAggregateInput
  }

  export type bikersScalarWhereWithAggregatesInput = {
    AND?: bikersScalarWhereWithAggregatesInput | bikersScalarWhereWithAggregatesInput[]
    OR?: bikersScalarWhereWithAggregatesInput[]
    NOT?: bikersScalarWhereWithAggregatesInput | bikersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"bikers"> | string
    fullname?: StringWithAggregatesFilter<"bikers"> | string
    email?: StringNullableWithAggregatesFilter<"bikers"> | string | null
    telephone?: StringWithAggregatesFilter<"bikers"> | string
    password?: StringWithAggregatesFilter<"bikers"> | string
    code?: StringNullableWithAggregatesFilter<"bikers"> | string | null
    expiration?: DateTimeNullableWithAggregatesFilter<"bikers"> | Date | string | null
    confirmed?: BoolWithAggregatesFilter<"bikers"> | boolean
    del_flg?: IntWithAggregatesFilter<"bikers"> | number
    createdAt?: DateTimeWithAggregatesFilter<"bikers"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"bikers"> | Date | string
    location?: StringNullableWithAggregatesFilter<"bikers"> | string | null
  }

  export type sendersWhereInput = {
    AND?: sendersWhereInput | sendersWhereInput[]
    OR?: sendersWhereInput[]
    NOT?: sendersWhereInput | sendersWhereInput[]
    id?: StringFilter<"senders"> | string
    fullname?: StringFilter<"senders"> | string
    email?: StringNullableFilter<"senders"> | string | null
    telephone?: StringFilter<"senders"> | string
    pickUpLocation?: StringNullableFilter<"senders"> | string | null
    password?: StringFilter<"senders"> | string
    confirmed?: BoolFilter<"senders"> | boolean
    isDormat?: BoolFilter<"senders"> | boolean
    code?: StringNullableFilter<"senders"> | string | null
    expiration?: DateTimeNullableFilter<"senders"> | Date | string | null
    lastLogin?: DateTimeFilter<"senders"> | Date | string
    rewardPoints?: IntFilter<"senders"> | number
    redeemedPoints?: IntFilter<"senders"> | number
    del_flg?: IntFilter<"senders"> | number
    createdAt?: DateTimeFilter<"senders"> | Date | string
    updatedAt?: DateTimeFilter<"senders"> | Date | string
    suburbs?: XOR<SuburbsNullableRelationFilter, suburbsWhereInput> | null
    receivers?: ReceiversListRelationFilter
    orders?: OrdersListRelationFilter
  }

  export type sendersOrderByWithRelationInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrderInput | SortOrder
    telephone?: SortOrder
    pickUpLocation?: SortOrderInput | SortOrder
    password?: SortOrder
    confirmed?: SortOrder
    isDormat?: SortOrder
    code?: SortOrderInput | SortOrder
    expiration?: SortOrderInput | SortOrder
    lastLogin?: SortOrder
    rewardPoints?: SortOrder
    redeemedPoints?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    suburbs?: suburbsOrderByWithRelationInput
    receivers?: receiversOrderByRelationAggregateInput
    orders?: ordersOrderByRelationAggregateInput
  }

  export type sendersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    telephone?: string
    AND?: sendersWhereInput | sendersWhereInput[]
    OR?: sendersWhereInput[]
    NOT?: sendersWhereInput | sendersWhereInput[]
    fullname?: StringFilter<"senders"> | string
    email?: StringNullableFilter<"senders"> | string | null
    pickUpLocation?: StringNullableFilter<"senders"> | string | null
    password?: StringFilter<"senders"> | string
    confirmed?: BoolFilter<"senders"> | boolean
    isDormat?: BoolFilter<"senders"> | boolean
    code?: StringNullableFilter<"senders"> | string | null
    expiration?: DateTimeNullableFilter<"senders"> | Date | string | null
    lastLogin?: DateTimeFilter<"senders"> | Date | string
    rewardPoints?: IntFilter<"senders"> | number
    redeemedPoints?: IntFilter<"senders"> | number
    del_flg?: IntFilter<"senders"> | number
    createdAt?: DateTimeFilter<"senders"> | Date | string
    updatedAt?: DateTimeFilter<"senders"> | Date | string
    suburbs?: XOR<SuburbsNullableRelationFilter, suburbsWhereInput> | null
    receivers?: ReceiversListRelationFilter
    orders?: OrdersListRelationFilter
  }, "id" | "id" | "telephone">

  export type sendersOrderByWithAggregationInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrderInput | SortOrder
    telephone?: SortOrder
    pickUpLocation?: SortOrderInput | SortOrder
    password?: SortOrder
    confirmed?: SortOrder
    isDormat?: SortOrder
    code?: SortOrderInput | SortOrder
    expiration?: SortOrderInput | SortOrder
    lastLogin?: SortOrder
    rewardPoints?: SortOrder
    redeemedPoints?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: sendersCountOrderByAggregateInput
    _avg?: sendersAvgOrderByAggregateInput
    _max?: sendersMaxOrderByAggregateInput
    _min?: sendersMinOrderByAggregateInput
    _sum?: sendersSumOrderByAggregateInput
  }

  export type sendersScalarWhereWithAggregatesInput = {
    AND?: sendersScalarWhereWithAggregatesInput | sendersScalarWhereWithAggregatesInput[]
    OR?: sendersScalarWhereWithAggregatesInput[]
    NOT?: sendersScalarWhereWithAggregatesInput | sendersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"senders"> | string
    fullname?: StringWithAggregatesFilter<"senders"> | string
    email?: StringNullableWithAggregatesFilter<"senders"> | string | null
    telephone?: StringWithAggregatesFilter<"senders"> | string
    pickUpLocation?: StringNullableWithAggregatesFilter<"senders"> | string | null
    password?: StringWithAggregatesFilter<"senders"> | string
    confirmed?: BoolWithAggregatesFilter<"senders"> | boolean
    isDormat?: BoolWithAggregatesFilter<"senders"> | boolean
    code?: StringNullableWithAggregatesFilter<"senders"> | string | null
    expiration?: DateTimeNullableWithAggregatesFilter<"senders"> | Date | string | null
    lastLogin?: DateTimeWithAggregatesFilter<"senders"> | Date | string
    rewardPoints?: IntWithAggregatesFilter<"senders"> | number
    redeemedPoints?: IntWithAggregatesFilter<"senders"> | number
    del_flg?: IntWithAggregatesFilter<"senders"> | number
    createdAt?: DateTimeWithAggregatesFilter<"senders"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"senders"> | Date | string
  }

  export type receiversWhereInput = {
    AND?: receiversWhereInput | receiversWhereInput[]
    OR?: receiversWhereInput[]
    NOT?: receiversWhereInput | receiversWhereInput[]
    id?: StringFilter<"receivers"> | string
    fullname?: StringFilter<"receivers"> | string
    telephone?: StringFilter<"receivers"> | string
    email?: StringNullableFilter<"receivers"> | string | null
    deliveryLocation?: StringNullableFilter<"receivers"> | string | null
    del_flg?: IntFilter<"receivers"> | number
    createdAt?: DateTimeFilter<"receivers"> | Date | string
    updatedAt?: DateTimeFilter<"receivers"> | Date | string
    senderId?: StringNullableFilter<"receivers"> | string | null
    suburbs?: XOR<SuburbsNullableRelationFilter, suburbsWhereInput> | null
    senders?: XOR<SendersNullableRelationFilter, sendersWhereInput> | null
    packages?: OrderPackagesListRelationFilter
  }

  export type receiversOrderByWithRelationInput = {
    id?: SortOrder
    fullname?: SortOrder
    telephone?: SortOrder
    email?: SortOrderInput | SortOrder
    deliveryLocation?: SortOrderInput | SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    senderId?: SortOrderInput | SortOrder
    suburbs?: suburbsOrderByWithRelationInput
    senders?: sendersOrderByWithRelationInput
    packages?: orderPackagesOrderByRelationAggregateInput
  }

  export type receiversWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    telephone?: string
    AND?: receiversWhereInput | receiversWhereInput[]
    OR?: receiversWhereInput[]
    NOT?: receiversWhereInput | receiversWhereInput[]
    fullname?: StringFilter<"receivers"> | string
    email?: StringNullableFilter<"receivers"> | string | null
    deliveryLocation?: StringNullableFilter<"receivers"> | string | null
    del_flg?: IntFilter<"receivers"> | number
    createdAt?: DateTimeFilter<"receivers"> | Date | string
    updatedAt?: DateTimeFilter<"receivers"> | Date | string
    senderId?: StringNullableFilter<"receivers"> | string | null
    suburbs?: XOR<SuburbsNullableRelationFilter, suburbsWhereInput> | null
    senders?: XOR<SendersNullableRelationFilter, sendersWhereInput> | null
    packages?: OrderPackagesListRelationFilter
  }, "id" | "id" | "telephone">

  export type receiversOrderByWithAggregationInput = {
    id?: SortOrder
    fullname?: SortOrder
    telephone?: SortOrder
    email?: SortOrderInput | SortOrder
    deliveryLocation?: SortOrderInput | SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    senderId?: SortOrderInput | SortOrder
    _count?: receiversCountOrderByAggregateInput
    _avg?: receiversAvgOrderByAggregateInput
    _max?: receiversMaxOrderByAggregateInput
    _min?: receiversMinOrderByAggregateInput
    _sum?: receiversSumOrderByAggregateInput
  }

  export type receiversScalarWhereWithAggregatesInput = {
    AND?: receiversScalarWhereWithAggregatesInput | receiversScalarWhereWithAggregatesInput[]
    OR?: receiversScalarWhereWithAggregatesInput[]
    NOT?: receiversScalarWhereWithAggregatesInput | receiversScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"receivers"> | string
    fullname?: StringWithAggregatesFilter<"receivers"> | string
    telephone?: StringWithAggregatesFilter<"receivers"> | string
    email?: StringNullableWithAggregatesFilter<"receivers"> | string | null
    deliveryLocation?: StringNullableWithAggregatesFilter<"receivers"> | string | null
    del_flg?: IntWithAggregatesFilter<"receivers"> | number
    createdAt?: DateTimeWithAggregatesFilter<"receivers"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"receivers"> | Date | string
    senderId?: StringNullableWithAggregatesFilter<"receivers"> | string | null
  }

  export type ordersWhereInput = {
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    orderCode?: StringFilter<"orders"> | string
    senderId?: StringNullableFilter<"orders"> | string | null
    orderType?: EnumOrderTypeNullableFilter<"orders"> | $Enums.OrderType | null
    grandAmount?: FloatFilter<"orders"> | number
    discountAmount?: FloatFilter<"orders"> | number
    discountPercentage?: FloatFilter<"orders"> | number
    totalAmount?: FloatFilter<"orders"> | number
    del_flg?: BoolFilter<"orders"> | boolean
    createdAt?: DateTimeFilter<"orders"> | Date | string
    updatedAt?: DateTimeFilter<"orders"> | Date | string
    pickUpLocation?: StringNullableFilter<"orders"> | string | null
    sender?: XOR<SendersNullableRelationFilter, sendersWhereInput> | null
    suburbs?: XOR<SuburbsNullableRelationFilter, suburbsWhereInput> | null
    packages?: OrderPackagesListRelationFilter
  }

  export type ordersOrderByWithRelationInput = {
    orderCode?: SortOrder
    senderId?: SortOrderInput | SortOrder
    orderType?: SortOrderInput | SortOrder
    grandAmount?: SortOrder
    discountAmount?: SortOrder
    discountPercentage?: SortOrder
    totalAmount?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pickUpLocation?: SortOrderInput | SortOrder
    sender?: sendersOrderByWithRelationInput
    suburbs?: suburbsOrderByWithRelationInput
    packages?: orderPackagesOrderByRelationAggregateInput
  }

  export type ordersWhereUniqueInput = Prisma.AtLeast<{
    orderCode?: string
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    senderId?: StringNullableFilter<"orders"> | string | null
    orderType?: EnumOrderTypeNullableFilter<"orders"> | $Enums.OrderType | null
    grandAmount?: FloatFilter<"orders"> | number
    discountAmount?: FloatFilter<"orders"> | number
    discountPercentage?: FloatFilter<"orders"> | number
    totalAmount?: FloatFilter<"orders"> | number
    del_flg?: BoolFilter<"orders"> | boolean
    createdAt?: DateTimeFilter<"orders"> | Date | string
    updatedAt?: DateTimeFilter<"orders"> | Date | string
    pickUpLocation?: StringNullableFilter<"orders"> | string | null
    sender?: XOR<SendersNullableRelationFilter, sendersWhereInput> | null
    suburbs?: XOR<SuburbsNullableRelationFilter, suburbsWhereInput> | null
    packages?: OrderPackagesListRelationFilter
  }, "orderCode" | "orderCode">

  export type ordersOrderByWithAggregationInput = {
    orderCode?: SortOrder
    senderId?: SortOrderInput | SortOrder
    orderType?: SortOrderInput | SortOrder
    grandAmount?: SortOrder
    discountAmount?: SortOrder
    discountPercentage?: SortOrder
    totalAmount?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pickUpLocation?: SortOrderInput | SortOrder
    _count?: ordersCountOrderByAggregateInput
    _avg?: ordersAvgOrderByAggregateInput
    _max?: ordersMaxOrderByAggregateInput
    _min?: ordersMinOrderByAggregateInput
    _sum?: ordersSumOrderByAggregateInput
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    OR?: ordersScalarWhereWithAggregatesInput[]
    NOT?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    orderCode?: StringWithAggregatesFilter<"orders"> | string
    senderId?: StringNullableWithAggregatesFilter<"orders"> | string | null
    orderType?: EnumOrderTypeNullableWithAggregatesFilter<"orders"> | $Enums.OrderType | null
    grandAmount?: FloatWithAggregatesFilter<"orders"> | number
    discountAmount?: FloatWithAggregatesFilter<"orders"> | number
    discountPercentage?: FloatWithAggregatesFilter<"orders"> | number
    totalAmount?: FloatWithAggregatesFilter<"orders"> | number
    del_flg?: BoolWithAggregatesFilter<"orders"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"orders"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"orders"> | Date | string
    pickUpLocation?: StringNullableWithAggregatesFilter<"orders"> | string | null
  }

  export type orderPackagesWhereInput = {
    AND?: orderPackagesWhereInput | orderPackagesWhereInput[]
    OR?: orderPackagesWhereInput[]
    NOT?: orderPackagesWhereInput | orderPackagesWhereInput[]
    id?: StringFilter<"orderPackages"> | string
    orderId?: StringFilter<"orderPackages"> | string
    orderCode?: StringFilter<"orderPackages"> | string
    receiverId?: StringNullableFilter<"orderPackages"> | string | null
    deliveryLocation?: StringNullableFilter<"orderPackages"> | string | null
    details?: StringNullableFilter<"orderPackages"> | string | null
    paymentBy?: EnumpaymentByFilter<"orderPackages"> | $Enums.paymentBy
    estimatedWeight?: FloatFilter<"orderPackages"> | number
    baseWeight?: IntFilter<"orderPackages"> | number
    extraWeight?: IntFilter<"orderPackages"> | number
    valueOfPackage?: FloatFilter<"orderPackages"> | number
    itemCost?: FloatFilter<"orderPackages"> | number
    deliveryFee?: FloatFilter<"orderPackages"> | number
    itemImage?: StringNullableFilter<"orderPackages"> | string | null
    pickupBikerId?: StringNullableFilter<"orderPackages"> | string | null
    deliverBikerId?: StringNullableFilter<"orderPackages"> | string | null
    status?: EnumstatusNullableFilter<"orderPackages"> | $Enums.status | null
    secondReceipientName?: StringNullableFilter<"orderPackages"> | string | null
    secondReceipientNumber?: StringNullableFilter<"orderPackages"> | string | null
    reason?: StringNullableFilter<"orderPackages"> | string | null
    pickup_share?: FloatFilter<"orderPackages"> | number
    delivery_share?: FloatFilter<"orderPackages"> | number
    transit_share?: FloatFilter<"orderPackages"> | number
    system_share?: FloatFilter<"orderPackages"> | number
    qcs_share?: FloatFilter<"orderPackages"> | number
    del_flg?: BoolFilter<"orderPackages"> | boolean
    insured?: BoolFilter<"orderPackages"> | boolean
    createdAt?: DateTimeFilter<"orderPackages"> | Date | string
    updatedAt?: DateTimeFilter<"orderPackages"> | Date | string
    orders?: XOR<OrdersNullableRelationFilter, ordersWhereInput> | null
    receiver?: XOR<ReceiversNullableRelationFilter, receiversWhereInput> | null
    suburb?: XOR<SuburbsNullableRelationFilter, suburbsWhereInput> | null
    pickupBiker?: XOR<BikersNullableRelationFilter, bikersWhereInput> | null
    deliverBiker?: XOR<BikersNullableRelationFilter, bikersWhereInput> | null
    packageHistories?: PackageHistoriesListRelationFilter
  }

  export type orderPackagesOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    orderCode?: SortOrder
    receiverId?: SortOrderInput | SortOrder
    deliveryLocation?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    paymentBy?: SortOrder
    estimatedWeight?: SortOrder
    baseWeight?: SortOrder
    extraWeight?: SortOrder
    valueOfPackage?: SortOrder
    itemCost?: SortOrder
    deliveryFee?: SortOrder
    itemImage?: SortOrderInput | SortOrder
    pickupBikerId?: SortOrderInput | SortOrder
    deliverBikerId?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    secondReceipientName?: SortOrderInput | SortOrder
    secondReceipientNumber?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    pickup_share?: SortOrder
    delivery_share?: SortOrder
    transit_share?: SortOrder
    system_share?: SortOrder
    qcs_share?: SortOrder
    del_flg?: SortOrder
    insured?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orders?: ordersOrderByWithRelationInput
    receiver?: receiversOrderByWithRelationInput
    suburb?: suburbsOrderByWithRelationInput
    pickupBiker?: bikersOrderByWithRelationInput
    deliverBiker?: bikersOrderByWithRelationInput
    packageHistories?: packageHistoriesOrderByRelationAggregateInput
  }

  export type orderPackagesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: orderPackagesWhereInput | orderPackagesWhereInput[]
    OR?: orderPackagesWhereInput[]
    NOT?: orderPackagesWhereInput | orderPackagesWhereInput[]
    orderId?: StringFilter<"orderPackages"> | string
    orderCode?: StringFilter<"orderPackages"> | string
    receiverId?: StringNullableFilter<"orderPackages"> | string | null
    deliveryLocation?: StringNullableFilter<"orderPackages"> | string | null
    details?: StringNullableFilter<"orderPackages"> | string | null
    paymentBy?: EnumpaymentByFilter<"orderPackages"> | $Enums.paymentBy
    estimatedWeight?: FloatFilter<"orderPackages"> | number
    baseWeight?: IntFilter<"orderPackages"> | number
    extraWeight?: IntFilter<"orderPackages"> | number
    valueOfPackage?: FloatFilter<"orderPackages"> | number
    itemCost?: FloatFilter<"orderPackages"> | number
    deliveryFee?: FloatFilter<"orderPackages"> | number
    itemImage?: StringNullableFilter<"orderPackages"> | string | null
    pickupBikerId?: StringNullableFilter<"orderPackages"> | string | null
    deliverBikerId?: StringNullableFilter<"orderPackages"> | string | null
    status?: EnumstatusNullableFilter<"orderPackages"> | $Enums.status | null
    secondReceipientName?: StringNullableFilter<"orderPackages"> | string | null
    secondReceipientNumber?: StringNullableFilter<"orderPackages"> | string | null
    reason?: StringNullableFilter<"orderPackages"> | string | null
    pickup_share?: FloatFilter<"orderPackages"> | number
    delivery_share?: FloatFilter<"orderPackages"> | number
    transit_share?: FloatFilter<"orderPackages"> | number
    system_share?: FloatFilter<"orderPackages"> | number
    qcs_share?: FloatFilter<"orderPackages"> | number
    del_flg?: BoolFilter<"orderPackages"> | boolean
    insured?: BoolFilter<"orderPackages"> | boolean
    createdAt?: DateTimeFilter<"orderPackages"> | Date | string
    updatedAt?: DateTimeFilter<"orderPackages"> | Date | string
    orders?: XOR<OrdersNullableRelationFilter, ordersWhereInput> | null
    receiver?: XOR<ReceiversNullableRelationFilter, receiversWhereInput> | null
    suburb?: XOR<SuburbsNullableRelationFilter, suburbsWhereInput> | null
    pickupBiker?: XOR<BikersNullableRelationFilter, bikersWhereInput> | null
    deliverBiker?: XOR<BikersNullableRelationFilter, bikersWhereInput> | null
    packageHistories?: PackageHistoriesListRelationFilter
  }, "id" | "id">

  export type orderPackagesOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    orderCode?: SortOrder
    receiverId?: SortOrderInput | SortOrder
    deliveryLocation?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    paymentBy?: SortOrder
    estimatedWeight?: SortOrder
    baseWeight?: SortOrder
    extraWeight?: SortOrder
    valueOfPackage?: SortOrder
    itemCost?: SortOrder
    deliveryFee?: SortOrder
    itemImage?: SortOrderInput | SortOrder
    pickupBikerId?: SortOrderInput | SortOrder
    deliverBikerId?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    secondReceipientName?: SortOrderInput | SortOrder
    secondReceipientNumber?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    pickup_share?: SortOrder
    delivery_share?: SortOrder
    transit_share?: SortOrder
    system_share?: SortOrder
    qcs_share?: SortOrder
    del_flg?: SortOrder
    insured?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: orderPackagesCountOrderByAggregateInput
    _avg?: orderPackagesAvgOrderByAggregateInput
    _max?: orderPackagesMaxOrderByAggregateInput
    _min?: orderPackagesMinOrderByAggregateInput
    _sum?: orderPackagesSumOrderByAggregateInput
  }

  export type orderPackagesScalarWhereWithAggregatesInput = {
    AND?: orderPackagesScalarWhereWithAggregatesInput | orderPackagesScalarWhereWithAggregatesInput[]
    OR?: orderPackagesScalarWhereWithAggregatesInput[]
    NOT?: orderPackagesScalarWhereWithAggregatesInput | orderPackagesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"orderPackages"> | string
    orderId?: StringWithAggregatesFilter<"orderPackages"> | string
    orderCode?: StringWithAggregatesFilter<"orderPackages"> | string
    receiverId?: StringNullableWithAggregatesFilter<"orderPackages"> | string | null
    deliveryLocation?: StringNullableWithAggregatesFilter<"orderPackages"> | string | null
    details?: StringNullableWithAggregatesFilter<"orderPackages"> | string | null
    paymentBy?: EnumpaymentByWithAggregatesFilter<"orderPackages"> | $Enums.paymentBy
    estimatedWeight?: FloatWithAggregatesFilter<"orderPackages"> | number
    baseWeight?: IntWithAggregatesFilter<"orderPackages"> | number
    extraWeight?: IntWithAggregatesFilter<"orderPackages"> | number
    valueOfPackage?: FloatWithAggregatesFilter<"orderPackages"> | number
    itemCost?: FloatWithAggregatesFilter<"orderPackages"> | number
    deliveryFee?: FloatWithAggregatesFilter<"orderPackages"> | number
    itemImage?: StringNullableWithAggregatesFilter<"orderPackages"> | string | null
    pickupBikerId?: StringNullableWithAggregatesFilter<"orderPackages"> | string | null
    deliverBikerId?: StringNullableWithAggregatesFilter<"orderPackages"> | string | null
    status?: EnumstatusNullableWithAggregatesFilter<"orderPackages"> | $Enums.status | null
    secondReceipientName?: StringNullableWithAggregatesFilter<"orderPackages"> | string | null
    secondReceipientNumber?: StringNullableWithAggregatesFilter<"orderPackages"> | string | null
    reason?: StringNullableWithAggregatesFilter<"orderPackages"> | string | null
    pickup_share?: FloatWithAggregatesFilter<"orderPackages"> | number
    delivery_share?: FloatWithAggregatesFilter<"orderPackages"> | number
    transit_share?: FloatWithAggregatesFilter<"orderPackages"> | number
    system_share?: FloatWithAggregatesFilter<"orderPackages"> | number
    qcs_share?: FloatWithAggregatesFilter<"orderPackages"> | number
    del_flg?: BoolWithAggregatesFilter<"orderPackages"> | boolean
    insured?: BoolWithAggregatesFilter<"orderPackages"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"orderPackages"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"orderPackages"> | Date | string
  }

  export type packageHistoriesWhereInput = {
    AND?: packageHistoriesWhereInput | packageHistoriesWhereInput[]
    OR?: packageHistoriesWhereInput[]
    NOT?: packageHistoriesWhereInput | packageHistoriesWhereInput[]
    id?: StringFilter<"packageHistories"> | string
    status?: EnumstatusFilter<"packageHistories"> | $Enums.status
    packageId?: StringNullableFilter<"packageHistories"> | string | null
    reason?: StringNullableFilter<"packageHistories"> | string | null
    del_flg?: IntFilter<"packageHistories"> | number
    createdAt?: DateTimeFilter<"packageHistories"> | Date | string
    updatedAt?: DateTimeFilter<"packageHistories"> | Date | string
    packages?: XOR<OrderPackagesNullableRelationFilter, orderPackagesWhereInput> | null
  }

  export type packageHistoriesOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    packageId?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    packages?: orderPackagesOrderByWithRelationInput
  }

  export type packageHistoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: packageHistoriesWhereInput | packageHistoriesWhereInput[]
    OR?: packageHistoriesWhereInput[]
    NOT?: packageHistoriesWhereInput | packageHistoriesWhereInput[]
    status?: EnumstatusFilter<"packageHistories"> | $Enums.status
    packageId?: StringNullableFilter<"packageHistories"> | string | null
    reason?: StringNullableFilter<"packageHistories"> | string | null
    del_flg?: IntFilter<"packageHistories"> | number
    createdAt?: DateTimeFilter<"packageHistories"> | Date | string
    updatedAt?: DateTimeFilter<"packageHistories"> | Date | string
    packages?: XOR<OrderPackagesNullableRelationFilter, orderPackagesWhereInput> | null
  }, "id" | "id">

  export type packageHistoriesOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    packageId?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: packageHistoriesCountOrderByAggregateInput
    _avg?: packageHistoriesAvgOrderByAggregateInput
    _max?: packageHistoriesMaxOrderByAggregateInput
    _min?: packageHistoriesMinOrderByAggregateInput
    _sum?: packageHistoriesSumOrderByAggregateInput
  }

  export type packageHistoriesScalarWhereWithAggregatesInput = {
    AND?: packageHistoriesScalarWhereWithAggregatesInput | packageHistoriesScalarWhereWithAggregatesInput[]
    OR?: packageHistoriesScalarWhereWithAggregatesInput[]
    NOT?: packageHistoriesScalarWhereWithAggregatesInput | packageHistoriesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"packageHistories"> | string
    status?: EnumstatusWithAggregatesFilter<"packageHistories"> | $Enums.status
    packageId?: StringNullableWithAggregatesFilter<"packageHistories"> | string | null
    reason?: StringNullableWithAggregatesFilter<"packageHistories"> | string | null
    del_flg?: IntWithAggregatesFilter<"packageHistories"> | number
    createdAt?: DateTimeWithAggregatesFilter<"packageHistories"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"packageHistories"> | Date | string
  }

  export type suburbsWhereInput = {
    AND?: suburbsWhereInput | suburbsWhereInput[]
    OR?: suburbsWhereInput[]
    NOT?: suburbsWhereInput | suburbsWhereInput[]
    id?: StringFilter<"suburbs"> | string
    suburb_name?: StringFilter<"suburbs"> | string
    del_flg?: BoolFilter<"suburbs"> | boolean
    createdAt?: DateTimeFilter<"suburbs"> | Date | string
    updatedAt?: DateTimeFilter<"suburbs"> | Date | string
    cityId?: StringNullableFilter<"suburbs"> | string | null
    cities?: XOR<CitiesNullableRelationFilter, citiesWhereInput> | null
    deliveryPrices?: DeliveryPricesListRelationFilter
    orders?: OrdersListRelationFilter
    orderPackages?: OrderPackagesListRelationFilter
    senders?: SendersListRelationFilter
    receivers?: ReceiversListRelationFilter
  }

  export type suburbsOrderByWithRelationInput = {
    id?: SortOrder
    suburb_name?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cityId?: SortOrderInput | SortOrder
    cities?: citiesOrderByWithRelationInput
    deliveryPrices?: deliveryPricesOrderByRelationAggregateInput
    orders?: ordersOrderByRelationAggregateInput
    orderPackages?: orderPackagesOrderByRelationAggregateInput
    senders?: sendersOrderByRelationAggregateInput
    receivers?: receiversOrderByRelationAggregateInput
  }

  export type suburbsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: suburbsWhereInput | suburbsWhereInput[]
    OR?: suburbsWhereInput[]
    NOT?: suburbsWhereInput | suburbsWhereInput[]
    suburb_name?: StringFilter<"suburbs"> | string
    del_flg?: BoolFilter<"suburbs"> | boolean
    createdAt?: DateTimeFilter<"suburbs"> | Date | string
    updatedAt?: DateTimeFilter<"suburbs"> | Date | string
    cityId?: StringNullableFilter<"suburbs"> | string | null
    cities?: XOR<CitiesNullableRelationFilter, citiesWhereInput> | null
    deliveryPrices?: DeliveryPricesListRelationFilter
    orders?: OrdersListRelationFilter
    orderPackages?: OrderPackagesListRelationFilter
    senders?: SendersListRelationFilter
    receivers?: ReceiversListRelationFilter
  }, "id" | "id">

  export type suburbsOrderByWithAggregationInput = {
    id?: SortOrder
    suburb_name?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cityId?: SortOrderInput | SortOrder
    _count?: suburbsCountOrderByAggregateInput
    _max?: suburbsMaxOrderByAggregateInput
    _min?: suburbsMinOrderByAggregateInput
  }

  export type suburbsScalarWhereWithAggregatesInput = {
    AND?: suburbsScalarWhereWithAggregatesInput | suburbsScalarWhereWithAggregatesInput[]
    OR?: suburbsScalarWhereWithAggregatesInput[]
    NOT?: suburbsScalarWhereWithAggregatesInput | suburbsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"suburbs"> | string
    suburb_name?: StringWithAggregatesFilter<"suburbs"> | string
    del_flg?: BoolWithAggregatesFilter<"suburbs"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"suburbs"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"suburbs"> | Date | string
    cityId?: StringNullableWithAggregatesFilter<"suburbs"> | string | null
  }

  export type citiesWhereInput = {
    AND?: citiesWhereInput | citiesWhereInput[]
    OR?: citiesWhereInput[]
    NOT?: citiesWhereInput | citiesWhereInput[]
    id?: StringFilter<"cities"> | string
    city_name?: StringFilter<"cities"> | string
    initials?: StringFilter<"cities"> | string
    del_flg?: BoolFilter<"cities"> | boolean
    createdAt?: DateTimeFilter<"cities"> | Date | string
    updatedAt?: DateTimeFilter<"cities"> | Date | string
    suburbs?: SuburbsListRelationFilter
    users?: UsersListRelationFilter
    biker?: BikersListRelationFilter
    citydeliveryPrices?: DeliveryPricesListRelationFilter
    destinationdeliveryPrices?: DeliveryPricesListRelationFilter
  }

  export type citiesOrderByWithRelationInput = {
    id?: SortOrder
    city_name?: SortOrder
    initials?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    suburbs?: suburbsOrderByRelationAggregateInput
    users?: usersOrderByRelationAggregateInput
    biker?: bikersOrderByRelationAggregateInput
    citydeliveryPrices?: deliveryPricesOrderByRelationAggregateInput
    destinationdeliveryPrices?: deliveryPricesOrderByRelationAggregateInput
  }

  export type citiesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: citiesWhereInput | citiesWhereInput[]
    OR?: citiesWhereInput[]
    NOT?: citiesWhereInput | citiesWhereInput[]
    city_name?: StringFilter<"cities"> | string
    initials?: StringFilter<"cities"> | string
    del_flg?: BoolFilter<"cities"> | boolean
    createdAt?: DateTimeFilter<"cities"> | Date | string
    updatedAt?: DateTimeFilter<"cities"> | Date | string
    suburbs?: SuburbsListRelationFilter
    users?: UsersListRelationFilter
    biker?: BikersListRelationFilter
    citydeliveryPrices?: DeliveryPricesListRelationFilter
    destinationdeliveryPrices?: DeliveryPricesListRelationFilter
  }, "id" | "id">

  export type citiesOrderByWithAggregationInput = {
    id?: SortOrder
    city_name?: SortOrder
    initials?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: citiesCountOrderByAggregateInput
    _max?: citiesMaxOrderByAggregateInput
    _min?: citiesMinOrderByAggregateInput
  }

  export type citiesScalarWhereWithAggregatesInput = {
    AND?: citiesScalarWhereWithAggregatesInput | citiesScalarWhereWithAggregatesInput[]
    OR?: citiesScalarWhereWithAggregatesInput[]
    NOT?: citiesScalarWhereWithAggregatesInput | citiesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"cities"> | string
    city_name?: StringWithAggregatesFilter<"cities"> | string
    initials?: StringWithAggregatesFilter<"cities"> | string
    del_flg?: BoolWithAggregatesFilter<"cities"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"cities"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"cities"> | Date | string
  }

  export type deliveryPricesWhereInput = {
    AND?: deliveryPricesWhereInput | deliveryPricesWhereInput[]
    OR?: deliveryPricesWhereInput[]
    NOT?: deliveryPricesWhereInput | deliveryPricesWhereInput[]
    id?: StringFilter<"deliveryPrices"> | string
    destinationId?: StringNullableFilter<"deliveryPrices"> | string | null
    cityId?: StringNullableFilter<"deliveryPrices"> | string | null
    baseWeightPrice?: FloatFilter<"deliveryPrices"> | number
    extraWeightPrice?: FloatFilter<"deliveryPrices"> | number
    del_flg?: BoolFilter<"deliveryPrices"> | boolean
    createdAt?: DateTimeFilter<"deliveryPrices"> | Date | string
    updatedAt?: DateTimeFilter<"deliveryPrices"> | Date | string
    suburbsId?: StringNullableFilter<"deliveryPrices"> | string | null
    destination?: XOR<CitiesNullableRelationFilter, citiesWhereInput> | null
    cities?: XOR<CitiesNullableRelationFilter, citiesWhereInput> | null
    suburbs?: XOR<SuburbsNullableRelationFilter, suburbsWhereInput> | null
  }

  export type deliveryPricesOrderByWithRelationInput = {
    id?: SortOrder
    destinationId?: SortOrderInput | SortOrder
    cityId?: SortOrderInput | SortOrder
    baseWeightPrice?: SortOrder
    extraWeightPrice?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    suburbsId?: SortOrderInput | SortOrder
    destination?: citiesOrderByWithRelationInput
    cities?: citiesOrderByWithRelationInput
    suburbs?: suburbsOrderByWithRelationInput
  }

  export type deliveryPricesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: deliveryPricesWhereInput | deliveryPricesWhereInput[]
    OR?: deliveryPricesWhereInput[]
    NOT?: deliveryPricesWhereInput | deliveryPricesWhereInput[]
    destinationId?: StringNullableFilter<"deliveryPrices"> | string | null
    cityId?: StringNullableFilter<"deliveryPrices"> | string | null
    baseWeightPrice?: FloatFilter<"deliveryPrices"> | number
    extraWeightPrice?: FloatFilter<"deliveryPrices"> | number
    del_flg?: BoolFilter<"deliveryPrices"> | boolean
    createdAt?: DateTimeFilter<"deliveryPrices"> | Date | string
    updatedAt?: DateTimeFilter<"deliveryPrices"> | Date | string
    suburbsId?: StringNullableFilter<"deliveryPrices"> | string | null
    destination?: XOR<CitiesNullableRelationFilter, citiesWhereInput> | null
    cities?: XOR<CitiesNullableRelationFilter, citiesWhereInput> | null
    suburbs?: XOR<SuburbsNullableRelationFilter, suburbsWhereInput> | null
  }, "id" | "id">

  export type deliveryPricesOrderByWithAggregationInput = {
    id?: SortOrder
    destinationId?: SortOrderInput | SortOrder
    cityId?: SortOrderInput | SortOrder
    baseWeightPrice?: SortOrder
    extraWeightPrice?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    suburbsId?: SortOrderInput | SortOrder
    _count?: deliveryPricesCountOrderByAggregateInput
    _avg?: deliveryPricesAvgOrderByAggregateInput
    _max?: deliveryPricesMaxOrderByAggregateInput
    _min?: deliveryPricesMinOrderByAggregateInput
    _sum?: deliveryPricesSumOrderByAggregateInput
  }

  export type deliveryPricesScalarWhereWithAggregatesInput = {
    AND?: deliveryPricesScalarWhereWithAggregatesInput | deliveryPricesScalarWhereWithAggregatesInput[]
    OR?: deliveryPricesScalarWhereWithAggregatesInput[]
    NOT?: deliveryPricesScalarWhereWithAggregatesInput | deliveryPricesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"deliveryPrices"> | string
    destinationId?: StringNullableWithAggregatesFilter<"deliveryPrices"> | string | null
    cityId?: StringNullableWithAggregatesFilter<"deliveryPrices"> | string | null
    baseWeightPrice?: FloatWithAggregatesFilter<"deliveryPrices"> | number
    extraWeightPrice?: FloatWithAggregatesFilter<"deliveryPrices"> | number
    del_flg?: BoolWithAggregatesFilter<"deliveryPrices"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"deliveryPrices"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"deliveryPrices"> | Date | string
    suburbsId?: StringNullableWithAggregatesFilter<"deliveryPrices"> | string | null
  }

  export type usersCreateInput = {
    id?: string
    fullname: string
    email: string
    telephone?: string | null
    password: string
    code?: string | null
    expiration?: Date | string | null
    role_name?: string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cities?: citiesCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: string
    fullname: string
    email: string
    telephone?: string | null
    password: string
    location?: string | null
    code?: string | null
    expiration?: Date | string | null
    role_name?: string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: citiesUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateManyInput = {
    id?: string
    fullname: string
    email: string
    telephone?: string | null
    password: string
    location?: string | null
    code?: string | null
    expiration?: Date | string | null
    role_name?: string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentsCreateInput = {
    id?: string
    amount?: number
    type: string
    reference?: string | null
    orderCode: number
    narration: string
  }

  export type paymentsUncheckedCreateInput = {
    id?: string
    amount?: number
    type: string
    reference?: string | null
    orderCode: number
    narration: string
  }

  export type paymentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    orderCode?: IntFieldUpdateOperationsInput | number
    narration?: StringFieldUpdateOperationsInput | string
  }

  export type paymentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    orderCode?: IntFieldUpdateOperationsInput | number
    narration?: StringFieldUpdateOperationsInput | string
  }

  export type paymentsCreateManyInput = {
    id?: string
    amount?: number
    type: string
    reference?: string | null
    orderCode: number
    narration: string
  }

  export type paymentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    orderCode?: IntFieldUpdateOperationsInput | number
    narration?: StringFieldUpdateOperationsInput | string
  }

  export type paymentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    orderCode?: IntFieldUpdateOperationsInput | number
    narration?: StringFieldUpdateOperationsInput | string
  }

  export type bikersCreateInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    code?: string | null
    expiration?: Date | string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    packagesPickupBikers?: orderPackagesCreateNestedManyWithoutPickupBikerInput
    packagesDeliveryBikers?: orderPackagesCreateNestedManyWithoutDeliverBikerInput
    cities?: citiesCreateNestedOneWithoutBikerInput
  }

  export type bikersUncheckedCreateInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    code?: string | null
    expiration?: Date | string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    packagesPickupBikers?: orderPackagesUncheckedCreateNestedManyWithoutPickupBikerInput
    packagesDeliveryBikers?: orderPackagesUncheckedCreateNestedManyWithoutDeliverBikerInput
  }

  export type bikersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packagesPickupBikers?: orderPackagesUpdateManyWithoutPickupBikerNestedInput
    packagesDeliveryBikers?: orderPackagesUpdateManyWithoutDeliverBikerNestedInput
    cities?: citiesUpdateOneWithoutBikerNestedInput
  }

  export type bikersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    packagesPickupBikers?: orderPackagesUncheckedUpdateManyWithoutPickupBikerNestedInput
    packagesDeliveryBikers?: orderPackagesUncheckedUpdateManyWithoutDeliverBikerNestedInput
  }

  export type bikersCreateManyInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    code?: string | null
    expiration?: Date | string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
  }

  export type bikersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type bikersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sendersCreateInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    confirmed?: boolean
    isDormat?: boolean
    code?: string | null
    expiration?: Date | string | null
    lastLogin?: Date | string
    rewardPoints?: number
    redeemedPoints?: number
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsCreateNestedOneWithoutSendersInput
    receivers?: receiversCreateNestedManyWithoutSendersInput
    orders?: ordersCreateNestedManyWithoutSenderInput
  }

  export type sendersUncheckedCreateInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    pickUpLocation?: string | null
    password: string
    confirmed?: boolean
    isDormat?: boolean
    code?: string | null
    expiration?: Date | string | null
    lastLogin?: Date | string
    rewardPoints?: number
    redeemedPoints?: number
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    receivers?: receiversUncheckedCreateNestedManyWithoutSendersInput
    orders?: ordersUncheckedCreateNestedManyWithoutSenderInput
  }

  export type sendersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    isDormat?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardPoints?: IntFieldUpdateOperationsInput | number
    redeemedPoints?: IntFieldUpdateOperationsInput | number
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUpdateOneWithoutSendersNestedInput
    receivers?: receiversUpdateManyWithoutSendersNestedInput
    orders?: ordersUpdateManyWithoutSenderNestedInput
  }

  export type sendersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    pickUpLocation?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    isDormat?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardPoints?: IntFieldUpdateOperationsInput | number
    redeemedPoints?: IntFieldUpdateOperationsInput | number
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivers?: receiversUncheckedUpdateManyWithoutSendersNestedInput
    orders?: ordersUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type sendersCreateManyInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    pickUpLocation?: string | null
    password: string
    confirmed?: boolean
    isDormat?: boolean
    code?: string | null
    expiration?: Date | string | null
    lastLogin?: Date | string
    rewardPoints?: number
    redeemedPoints?: number
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type sendersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    isDormat?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardPoints?: IntFieldUpdateOperationsInput | number
    redeemedPoints?: IntFieldUpdateOperationsInput | number
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sendersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    pickUpLocation?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    isDormat?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardPoints?: IntFieldUpdateOperationsInput | number
    redeemedPoints?: IntFieldUpdateOperationsInput | number
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type receiversCreateInput = {
    id?: string
    fullname: string
    telephone: string
    email?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsCreateNestedOneWithoutReceiversInput
    senders?: sendersCreateNestedOneWithoutReceiversInput
    packages?: orderPackagesCreateNestedManyWithoutReceiverInput
  }

  export type receiversUncheckedCreateInput = {
    id?: string
    fullname: string
    telephone: string
    email?: string | null
    deliveryLocation?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    senderId?: string | null
    packages?: orderPackagesUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type receiversUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUpdateOneWithoutReceiversNestedInput
    senders?: sendersUpdateOneWithoutReceiversNestedInput
    packages?: orderPackagesUpdateManyWithoutReceiverNestedInput
  }

  export type receiversUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    packages?: orderPackagesUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type receiversCreateManyInput = {
    id?: string
    fullname: string
    telephone: string
    email?: string | null
    deliveryLocation?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    senderId?: string | null
  }

  export type receiversUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type receiversUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ordersCreateInput = {
    orderCode: string
    orderType?: $Enums.OrderType | null
    grandAmount?: number
    discountAmount?: number
    discountPercentage?: number
    totalAmount?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sender?: sendersCreateNestedOneWithoutOrdersInput
    suburbs?: suburbsCreateNestedOneWithoutOrdersInput
    packages?: orderPackagesCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateInput = {
    orderCode: string
    senderId?: string | null
    orderType?: $Enums.OrderType | null
    grandAmount?: number
    discountAmount?: number
    discountPercentage?: number
    totalAmount?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pickUpLocation?: string | null
    packages?: orderPackagesUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersUpdateInput = {
    orderCode?: StringFieldUpdateOperationsInput | string
    orderType?: NullableEnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType | null
    grandAmount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: sendersUpdateOneWithoutOrdersNestedInput
    suburbs?: suburbsUpdateOneWithoutOrdersNestedInput
    packages?: orderPackagesUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateInput = {
    orderCode?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderType?: NullableEnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType | null
    grandAmount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pickUpLocation?: NullableStringFieldUpdateOperationsInput | string | null
    packages?: orderPackagesUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersCreateManyInput = {
    orderCode: string
    senderId?: string | null
    orderType?: $Enums.OrderType | null
    grandAmount?: number
    discountAmount?: number
    discountPercentage?: number
    totalAmount?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pickUpLocation?: string | null
  }

  export type ordersUpdateManyMutationInput = {
    orderCode?: StringFieldUpdateOperationsInput | string
    orderType?: NullableEnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType | null
    grandAmount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUncheckedUpdateManyInput = {
    orderCode?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderType?: NullableEnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType | null
    grandAmount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pickUpLocation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type orderPackagesCreateInput = {
    id?: string
    orderCode: string
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: ordersCreateNestedOneWithoutPackagesInput
    receiver?: receiversCreateNestedOneWithoutPackagesInput
    suburb?: suburbsCreateNestedOneWithoutOrderPackagesInput
    pickupBiker?: bikersCreateNestedOneWithoutPackagesPickupBikersInput
    deliverBiker?: bikersCreateNestedOneWithoutPackagesDeliveryBikersInput
    packageHistories?: packageHistoriesCreateNestedManyWithoutPackagesInput
  }

  export type orderPackagesUncheckedCreateInput = {
    id?: string
    orderId: string
    orderCode: string
    receiverId?: string | null
    deliveryLocation?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    pickupBikerId?: string | null
    deliverBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packageHistories?: packageHistoriesUncheckedCreateNestedManyWithoutPackagesInput
  }

  export type orderPackagesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUpdateOneWithoutPackagesNestedInput
    receiver?: receiversUpdateOneWithoutPackagesNestedInput
    suburb?: suburbsUpdateOneWithoutOrderPackagesNestedInput
    pickupBiker?: bikersUpdateOneWithoutPackagesPickupBikersNestedInput
    deliverBiker?: bikersUpdateOneWithoutPackagesDeliveryBikersNestedInput
    packageHistories?: packageHistoriesUpdateManyWithoutPackagesNestedInput
  }

  export type orderPackagesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    pickupBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    deliverBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageHistories?: packageHistoriesUncheckedUpdateManyWithoutPackagesNestedInput
  }

  export type orderPackagesCreateManyInput = {
    id?: string
    orderId: string
    orderCode: string
    receiverId?: string | null
    deliveryLocation?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    pickupBikerId?: string | null
    deliverBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderPackagesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderPackagesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    pickupBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    deliverBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type packageHistoriesCreateInput = {
    id?: string
    status: $Enums.status
    reason?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: orderPackagesCreateNestedOneWithoutPackageHistoriesInput
  }

  export type packageHistoriesUncheckedCreateInput = {
    id?: string
    status: $Enums.status
    packageId?: string | null
    reason?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type packageHistoriesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: orderPackagesUpdateOneWithoutPackageHistoriesNestedInput
  }

  export type packageHistoriesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type packageHistoriesCreateManyInput = {
    id?: string
    status: $Enums.status
    packageId?: string | null
    reason?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type packageHistoriesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type packageHistoriesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type suburbsCreateInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cities?: citiesCreateNestedOneWithoutSuburbsInput
    deliveryPrices?: deliveryPricesCreateNestedManyWithoutSuburbsInput
    orders?: ordersCreateNestedManyWithoutSuburbsInput
    orderPackages?: orderPackagesCreateNestedManyWithoutSuburbInput
    senders?: sendersCreateNestedManyWithoutSuburbsInput
    receivers?: receiversCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsUncheckedCreateInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cityId?: string | null
    deliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutSuburbsInput
    orders?: ordersUncheckedCreateNestedManyWithoutSuburbsInput
    orderPackages?: orderPackagesUncheckedCreateNestedManyWithoutSuburbInput
    senders?: sendersUncheckedCreateNestedManyWithoutSuburbsInput
    receivers?: receiversUncheckedCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: citiesUpdateOneWithoutSuburbsNestedInput
    deliveryPrices?: deliveryPricesUpdateManyWithoutSuburbsNestedInput
    orders?: ordersUpdateManyWithoutSuburbsNestedInput
    orderPackages?: orderPackagesUpdateManyWithoutSuburbNestedInput
    senders?: sendersUpdateManyWithoutSuburbsNestedInput
    receivers?: receiversUpdateManyWithoutSuburbsNestedInput
  }

  export type suburbsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutSuburbsNestedInput
    orders?: ordersUncheckedUpdateManyWithoutSuburbsNestedInput
    orderPackages?: orderPackagesUncheckedUpdateManyWithoutSuburbNestedInput
    senders?: sendersUncheckedUpdateManyWithoutSuburbsNestedInput
    receivers?: receiversUncheckedUpdateManyWithoutSuburbsNestedInput
  }

  export type suburbsCreateManyInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cityId?: string | null
  }

  export type suburbsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type suburbsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type citiesCreateInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsCreateNestedManyWithoutCitiesInput
    users?: usersCreateNestedManyWithoutCitiesInput
    biker?: bikersCreateNestedManyWithoutCitiesInput
    citydeliveryPrices?: deliveryPricesCreateNestedManyWithoutCitiesInput
    destinationdeliveryPrices?: deliveryPricesCreateNestedManyWithoutDestinationInput
  }

  export type citiesUncheckedCreateInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsUncheckedCreateNestedManyWithoutCitiesInput
    users?: usersUncheckedCreateNestedManyWithoutCitiesInput
    biker?: bikersUncheckedCreateNestedManyWithoutCitiesInput
    citydeliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutCitiesInput
    destinationdeliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutDestinationInput
  }

  export type citiesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUpdateManyWithoutCitiesNestedInput
    users?: usersUpdateManyWithoutCitiesNestedInput
    biker?: bikersUpdateManyWithoutCitiesNestedInput
    citydeliveryPrices?: deliveryPricesUpdateManyWithoutCitiesNestedInput
    destinationdeliveryPrices?: deliveryPricesUpdateManyWithoutDestinationNestedInput
  }

  export type citiesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUncheckedUpdateManyWithoutCitiesNestedInput
    users?: usersUncheckedUpdateManyWithoutCitiesNestedInput
    biker?: bikersUncheckedUpdateManyWithoutCitiesNestedInput
    citydeliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutCitiesNestedInput
    destinationdeliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutDestinationNestedInput
  }

  export type citiesCreateManyInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type citiesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type citiesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type deliveryPricesCreateInput = {
    id?: string
    baseWeightPrice?: number
    extraWeightPrice?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    destination?: citiesCreateNestedOneWithoutDestinationdeliveryPricesInput
    cities?: citiesCreateNestedOneWithoutCitydeliveryPricesInput
    suburbs?: suburbsCreateNestedOneWithoutDeliveryPricesInput
  }

  export type deliveryPricesUncheckedCreateInput = {
    id?: string
    destinationId?: string | null
    cityId?: string | null
    baseWeightPrice?: number
    extraWeightPrice?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbsId?: string | null
  }

  export type deliveryPricesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: citiesUpdateOneWithoutDestinationdeliveryPricesNestedInput
    cities?: citiesUpdateOneWithoutCitydeliveryPricesNestedInput
    suburbs?: suburbsUpdateOneWithoutDeliveryPricesNestedInput
  }

  export type deliveryPricesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    destinationId?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type deliveryPricesCreateManyInput = {
    id?: string
    destinationId?: string | null
    cityId?: string | null
    baseWeightPrice?: number
    extraWeightPrice?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbsId?: string | null
  }

  export type deliveryPricesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type deliveryPricesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    destinationId?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CitiesNullableRelationFilter = {
    is?: citiesWhereInput | null
    isNot?: citiesWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    location?: SortOrder
    code?: SortOrder
    expiration?: SortOrder
    role_name?: SortOrder
    confirmed?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    del_flg?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    location?: SortOrder
    code?: SortOrder
    expiration?: SortOrder
    role_name?: SortOrder
    confirmed?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    location?: SortOrder
    code?: SortOrder
    expiration?: SortOrder
    role_name?: SortOrder
    confirmed?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    del_flg?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type paymentsCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    reference?: SortOrder
    orderCode?: SortOrder
    narration?: SortOrder
  }

  export type paymentsAvgOrderByAggregateInput = {
    amount?: SortOrder
    orderCode?: SortOrder
  }

  export type paymentsMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    reference?: SortOrder
    orderCode?: SortOrder
    narration?: SortOrder
  }

  export type paymentsMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    reference?: SortOrder
    orderCode?: SortOrder
    narration?: SortOrder
  }

  export type paymentsSumOrderByAggregateInput = {
    amount?: SortOrder
    orderCode?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type OrderPackagesListRelationFilter = {
    every?: orderPackagesWhereInput
    some?: orderPackagesWhereInput
    none?: orderPackagesWhereInput
  }

  export type orderPackagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type bikersCountOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    code?: SortOrder
    expiration?: SortOrder
    confirmed?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    location?: SortOrder
  }

  export type bikersAvgOrderByAggregateInput = {
    del_flg?: SortOrder
  }

  export type bikersMaxOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    code?: SortOrder
    expiration?: SortOrder
    confirmed?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    location?: SortOrder
  }

  export type bikersMinOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    code?: SortOrder
    expiration?: SortOrder
    confirmed?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    location?: SortOrder
  }

  export type bikersSumOrderByAggregateInput = {
    del_flg?: SortOrder
  }

  export type SuburbsNullableRelationFilter = {
    is?: suburbsWhereInput | null
    isNot?: suburbsWhereInput | null
  }

  export type ReceiversListRelationFilter = {
    every?: receiversWhereInput
    some?: receiversWhereInput
    none?: receiversWhereInput
  }

  export type OrdersListRelationFilter = {
    every?: ordersWhereInput
    some?: ordersWhereInput
    none?: ordersWhereInput
  }

  export type receiversOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ordersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sendersCountOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    pickUpLocation?: SortOrder
    password?: SortOrder
    confirmed?: SortOrder
    isDormat?: SortOrder
    code?: SortOrder
    expiration?: SortOrder
    lastLogin?: SortOrder
    rewardPoints?: SortOrder
    redeemedPoints?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type sendersAvgOrderByAggregateInput = {
    rewardPoints?: SortOrder
    redeemedPoints?: SortOrder
    del_flg?: SortOrder
  }

  export type sendersMaxOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    pickUpLocation?: SortOrder
    password?: SortOrder
    confirmed?: SortOrder
    isDormat?: SortOrder
    code?: SortOrder
    expiration?: SortOrder
    lastLogin?: SortOrder
    rewardPoints?: SortOrder
    redeemedPoints?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type sendersMinOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    pickUpLocation?: SortOrder
    password?: SortOrder
    confirmed?: SortOrder
    isDormat?: SortOrder
    code?: SortOrder
    expiration?: SortOrder
    lastLogin?: SortOrder
    rewardPoints?: SortOrder
    redeemedPoints?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type sendersSumOrderByAggregateInput = {
    rewardPoints?: SortOrder
    redeemedPoints?: SortOrder
    del_flg?: SortOrder
  }

  export type SendersNullableRelationFilter = {
    is?: sendersWhereInput | null
    isNot?: sendersWhereInput | null
  }

  export type receiversCountOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    deliveryLocation?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    senderId?: SortOrder
  }

  export type receiversAvgOrderByAggregateInput = {
    del_flg?: SortOrder
  }

  export type receiversMaxOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    deliveryLocation?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    senderId?: SortOrder
  }

  export type receiversMinOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    deliveryLocation?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    senderId?: SortOrder
  }

  export type receiversSumOrderByAggregateInput = {
    del_flg?: SortOrder
  }

  export type EnumOrderTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderType | EnumOrderTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOrderTypeNullableFilter<$PrismaModel> | $Enums.OrderType | null
  }

  export type ordersCountOrderByAggregateInput = {
    orderCode?: SortOrder
    senderId?: SortOrder
    orderType?: SortOrder
    grandAmount?: SortOrder
    discountAmount?: SortOrder
    discountPercentage?: SortOrder
    totalAmount?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pickUpLocation?: SortOrder
  }

  export type ordersAvgOrderByAggregateInput = {
    grandAmount?: SortOrder
    discountAmount?: SortOrder
    discountPercentage?: SortOrder
    totalAmount?: SortOrder
  }

  export type ordersMaxOrderByAggregateInput = {
    orderCode?: SortOrder
    senderId?: SortOrder
    orderType?: SortOrder
    grandAmount?: SortOrder
    discountAmount?: SortOrder
    discountPercentage?: SortOrder
    totalAmount?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pickUpLocation?: SortOrder
  }

  export type ordersMinOrderByAggregateInput = {
    orderCode?: SortOrder
    senderId?: SortOrder
    orderType?: SortOrder
    grandAmount?: SortOrder
    discountAmount?: SortOrder
    discountPercentage?: SortOrder
    totalAmount?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pickUpLocation?: SortOrder
  }

  export type ordersSumOrderByAggregateInput = {
    grandAmount?: SortOrder
    discountAmount?: SortOrder
    discountPercentage?: SortOrder
    totalAmount?: SortOrder
  }

  export type EnumOrderTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderType | EnumOrderTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOrderTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.OrderType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOrderTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumOrderTypeNullableFilter<$PrismaModel>
  }

  export type EnumpaymentByFilter<$PrismaModel = never> = {
    equals?: $Enums.paymentBy | EnumpaymentByFieldRefInput<$PrismaModel>
    in?: $Enums.paymentBy[] | ListEnumpaymentByFieldRefInput<$PrismaModel>
    notIn?: $Enums.paymentBy[] | ListEnumpaymentByFieldRefInput<$PrismaModel>
    not?: NestedEnumpaymentByFilter<$PrismaModel> | $Enums.paymentBy
  }

  export type EnumstatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumstatusNullableFilter<$PrismaModel> | $Enums.status | null
  }

  export type OrdersNullableRelationFilter = {
    is?: ordersWhereInput | null
    isNot?: ordersWhereInput | null
  }

  export type ReceiversNullableRelationFilter = {
    is?: receiversWhereInput | null
    isNot?: receiversWhereInput | null
  }

  export type BikersNullableRelationFilter = {
    is?: bikersWhereInput | null
    isNot?: bikersWhereInput | null
  }

  export type PackageHistoriesListRelationFilter = {
    every?: packageHistoriesWhereInput
    some?: packageHistoriesWhereInput
    none?: packageHistoriesWhereInput
  }

  export type packageHistoriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type orderPackagesCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    orderCode?: SortOrder
    receiverId?: SortOrder
    deliveryLocation?: SortOrder
    details?: SortOrder
    paymentBy?: SortOrder
    estimatedWeight?: SortOrder
    baseWeight?: SortOrder
    extraWeight?: SortOrder
    valueOfPackage?: SortOrder
    itemCost?: SortOrder
    deliveryFee?: SortOrder
    itemImage?: SortOrder
    pickupBikerId?: SortOrder
    deliverBikerId?: SortOrder
    status?: SortOrder
    secondReceipientName?: SortOrder
    secondReceipientNumber?: SortOrder
    reason?: SortOrder
    pickup_share?: SortOrder
    delivery_share?: SortOrder
    transit_share?: SortOrder
    system_share?: SortOrder
    qcs_share?: SortOrder
    del_flg?: SortOrder
    insured?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderPackagesAvgOrderByAggregateInput = {
    estimatedWeight?: SortOrder
    baseWeight?: SortOrder
    extraWeight?: SortOrder
    valueOfPackage?: SortOrder
    itemCost?: SortOrder
    deliveryFee?: SortOrder
    pickup_share?: SortOrder
    delivery_share?: SortOrder
    transit_share?: SortOrder
    system_share?: SortOrder
    qcs_share?: SortOrder
  }

  export type orderPackagesMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    orderCode?: SortOrder
    receiverId?: SortOrder
    deliveryLocation?: SortOrder
    details?: SortOrder
    paymentBy?: SortOrder
    estimatedWeight?: SortOrder
    baseWeight?: SortOrder
    extraWeight?: SortOrder
    valueOfPackage?: SortOrder
    itemCost?: SortOrder
    deliveryFee?: SortOrder
    itemImage?: SortOrder
    pickupBikerId?: SortOrder
    deliverBikerId?: SortOrder
    status?: SortOrder
    secondReceipientName?: SortOrder
    secondReceipientNumber?: SortOrder
    reason?: SortOrder
    pickup_share?: SortOrder
    delivery_share?: SortOrder
    transit_share?: SortOrder
    system_share?: SortOrder
    qcs_share?: SortOrder
    del_flg?: SortOrder
    insured?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderPackagesMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    orderCode?: SortOrder
    receiverId?: SortOrder
    deliveryLocation?: SortOrder
    details?: SortOrder
    paymentBy?: SortOrder
    estimatedWeight?: SortOrder
    baseWeight?: SortOrder
    extraWeight?: SortOrder
    valueOfPackage?: SortOrder
    itemCost?: SortOrder
    deliveryFee?: SortOrder
    itemImage?: SortOrder
    pickupBikerId?: SortOrder
    deliverBikerId?: SortOrder
    status?: SortOrder
    secondReceipientName?: SortOrder
    secondReceipientNumber?: SortOrder
    reason?: SortOrder
    pickup_share?: SortOrder
    delivery_share?: SortOrder
    transit_share?: SortOrder
    system_share?: SortOrder
    qcs_share?: SortOrder
    del_flg?: SortOrder
    insured?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderPackagesSumOrderByAggregateInput = {
    estimatedWeight?: SortOrder
    baseWeight?: SortOrder
    extraWeight?: SortOrder
    valueOfPackage?: SortOrder
    itemCost?: SortOrder
    deliveryFee?: SortOrder
    pickup_share?: SortOrder
    delivery_share?: SortOrder
    transit_share?: SortOrder
    system_share?: SortOrder
    qcs_share?: SortOrder
  }

  export type EnumpaymentByWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.paymentBy | EnumpaymentByFieldRefInput<$PrismaModel>
    in?: $Enums.paymentBy[] | ListEnumpaymentByFieldRefInput<$PrismaModel>
    notIn?: $Enums.paymentBy[] | ListEnumpaymentByFieldRefInput<$PrismaModel>
    not?: NestedEnumpaymentByWithAggregatesFilter<$PrismaModel> | $Enums.paymentBy
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumpaymentByFilter<$PrismaModel>
    _max?: NestedEnumpaymentByFilter<$PrismaModel>
  }

  export type EnumstatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumstatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumstatusNullableFilter<$PrismaModel>
    _max?: NestedEnumstatusNullableFilter<$PrismaModel>
  }

  export type EnumstatusFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumstatusFilter<$PrismaModel> | $Enums.status
  }

  export type OrderPackagesNullableRelationFilter = {
    is?: orderPackagesWhereInput | null
    isNot?: orderPackagesWhereInput | null
  }

  export type packageHistoriesCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    packageId?: SortOrder
    reason?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type packageHistoriesAvgOrderByAggregateInput = {
    del_flg?: SortOrder
  }

  export type packageHistoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    packageId?: SortOrder
    reason?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type packageHistoriesMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    packageId?: SortOrder
    reason?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type packageHistoriesSumOrderByAggregateInput = {
    del_flg?: SortOrder
  }

  export type EnumstatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumstatusWithAggregatesFilter<$PrismaModel> | $Enums.status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatusFilter<$PrismaModel>
    _max?: NestedEnumstatusFilter<$PrismaModel>
  }

  export type DeliveryPricesListRelationFilter = {
    every?: deliveryPricesWhereInput
    some?: deliveryPricesWhereInput
    none?: deliveryPricesWhereInput
  }

  export type SendersListRelationFilter = {
    every?: sendersWhereInput
    some?: sendersWhereInput
    none?: sendersWhereInput
  }

  export type deliveryPricesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sendersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type suburbsCountOrderByAggregateInput = {
    id?: SortOrder
    suburb_name?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cityId?: SortOrder
  }

  export type suburbsMaxOrderByAggregateInput = {
    id?: SortOrder
    suburb_name?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cityId?: SortOrder
  }

  export type suburbsMinOrderByAggregateInput = {
    id?: SortOrder
    suburb_name?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cityId?: SortOrder
  }

  export type SuburbsListRelationFilter = {
    every?: suburbsWhereInput
    some?: suburbsWhereInput
    none?: suburbsWhereInput
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type BikersListRelationFilter = {
    every?: bikersWhereInput
    some?: bikersWhereInput
    none?: bikersWhereInput
  }

  export type suburbsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type bikersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type citiesCountOrderByAggregateInput = {
    id?: SortOrder
    city_name?: SortOrder
    initials?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type citiesMaxOrderByAggregateInput = {
    id?: SortOrder
    city_name?: SortOrder
    initials?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type citiesMinOrderByAggregateInput = {
    id?: SortOrder
    city_name?: SortOrder
    initials?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type deliveryPricesCountOrderByAggregateInput = {
    id?: SortOrder
    destinationId?: SortOrder
    cityId?: SortOrder
    baseWeightPrice?: SortOrder
    extraWeightPrice?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    suburbsId?: SortOrder
  }

  export type deliveryPricesAvgOrderByAggregateInput = {
    baseWeightPrice?: SortOrder
    extraWeightPrice?: SortOrder
  }

  export type deliveryPricesMaxOrderByAggregateInput = {
    id?: SortOrder
    destinationId?: SortOrder
    cityId?: SortOrder
    baseWeightPrice?: SortOrder
    extraWeightPrice?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    suburbsId?: SortOrder
  }

  export type deliveryPricesMinOrderByAggregateInput = {
    id?: SortOrder
    destinationId?: SortOrder
    cityId?: SortOrder
    baseWeightPrice?: SortOrder
    extraWeightPrice?: SortOrder
    del_flg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    suburbsId?: SortOrder
  }

  export type deliveryPricesSumOrderByAggregateInput = {
    baseWeightPrice?: SortOrder
    extraWeightPrice?: SortOrder
  }

  export type citiesCreateNestedOneWithoutUsersInput = {
    create?: XOR<citiesCreateWithoutUsersInput, citiesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: citiesCreateOrConnectWithoutUsersInput
    connect?: citiesWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type citiesUpdateOneWithoutUsersNestedInput = {
    create?: XOR<citiesCreateWithoutUsersInput, citiesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: citiesCreateOrConnectWithoutUsersInput
    upsert?: citiesUpsertWithoutUsersInput
    disconnect?: citiesWhereInput | boolean
    delete?: citiesWhereInput | boolean
    connect?: citiesWhereUniqueInput
    update?: XOR<XOR<citiesUpdateToOneWithWhereWithoutUsersInput, citiesUpdateWithoutUsersInput>, citiesUncheckedUpdateWithoutUsersInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type orderPackagesCreateNestedManyWithoutPickupBikerInput = {
    create?: XOR<orderPackagesCreateWithoutPickupBikerInput, orderPackagesUncheckedCreateWithoutPickupBikerInput> | orderPackagesCreateWithoutPickupBikerInput[] | orderPackagesUncheckedCreateWithoutPickupBikerInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutPickupBikerInput | orderPackagesCreateOrConnectWithoutPickupBikerInput[]
    createMany?: orderPackagesCreateManyPickupBikerInputEnvelope
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
  }

  export type orderPackagesCreateNestedManyWithoutDeliverBikerInput = {
    create?: XOR<orderPackagesCreateWithoutDeliverBikerInput, orderPackagesUncheckedCreateWithoutDeliverBikerInput> | orderPackagesCreateWithoutDeliverBikerInput[] | orderPackagesUncheckedCreateWithoutDeliverBikerInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutDeliverBikerInput | orderPackagesCreateOrConnectWithoutDeliverBikerInput[]
    createMany?: orderPackagesCreateManyDeliverBikerInputEnvelope
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
  }

  export type citiesCreateNestedOneWithoutBikerInput = {
    create?: XOR<citiesCreateWithoutBikerInput, citiesUncheckedCreateWithoutBikerInput>
    connectOrCreate?: citiesCreateOrConnectWithoutBikerInput
    connect?: citiesWhereUniqueInput
  }

  export type orderPackagesUncheckedCreateNestedManyWithoutPickupBikerInput = {
    create?: XOR<orderPackagesCreateWithoutPickupBikerInput, orderPackagesUncheckedCreateWithoutPickupBikerInput> | orderPackagesCreateWithoutPickupBikerInput[] | orderPackagesUncheckedCreateWithoutPickupBikerInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutPickupBikerInput | orderPackagesCreateOrConnectWithoutPickupBikerInput[]
    createMany?: orderPackagesCreateManyPickupBikerInputEnvelope
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
  }

  export type orderPackagesUncheckedCreateNestedManyWithoutDeliverBikerInput = {
    create?: XOR<orderPackagesCreateWithoutDeliverBikerInput, orderPackagesUncheckedCreateWithoutDeliverBikerInput> | orderPackagesCreateWithoutDeliverBikerInput[] | orderPackagesUncheckedCreateWithoutDeliverBikerInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutDeliverBikerInput | orderPackagesCreateOrConnectWithoutDeliverBikerInput[]
    createMany?: orderPackagesCreateManyDeliverBikerInputEnvelope
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
  }

  export type orderPackagesUpdateManyWithoutPickupBikerNestedInput = {
    create?: XOR<orderPackagesCreateWithoutPickupBikerInput, orderPackagesUncheckedCreateWithoutPickupBikerInput> | orderPackagesCreateWithoutPickupBikerInput[] | orderPackagesUncheckedCreateWithoutPickupBikerInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutPickupBikerInput | orderPackagesCreateOrConnectWithoutPickupBikerInput[]
    upsert?: orderPackagesUpsertWithWhereUniqueWithoutPickupBikerInput | orderPackagesUpsertWithWhereUniqueWithoutPickupBikerInput[]
    createMany?: orderPackagesCreateManyPickupBikerInputEnvelope
    set?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    disconnect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    delete?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    update?: orderPackagesUpdateWithWhereUniqueWithoutPickupBikerInput | orderPackagesUpdateWithWhereUniqueWithoutPickupBikerInput[]
    updateMany?: orderPackagesUpdateManyWithWhereWithoutPickupBikerInput | orderPackagesUpdateManyWithWhereWithoutPickupBikerInput[]
    deleteMany?: orderPackagesScalarWhereInput | orderPackagesScalarWhereInput[]
  }

  export type orderPackagesUpdateManyWithoutDeliverBikerNestedInput = {
    create?: XOR<orderPackagesCreateWithoutDeliverBikerInput, orderPackagesUncheckedCreateWithoutDeliverBikerInput> | orderPackagesCreateWithoutDeliverBikerInput[] | orderPackagesUncheckedCreateWithoutDeliverBikerInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutDeliverBikerInput | orderPackagesCreateOrConnectWithoutDeliverBikerInput[]
    upsert?: orderPackagesUpsertWithWhereUniqueWithoutDeliverBikerInput | orderPackagesUpsertWithWhereUniqueWithoutDeliverBikerInput[]
    createMany?: orderPackagesCreateManyDeliverBikerInputEnvelope
    set?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    disconnect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    delete?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    update?: orderPackagesUpdateWithWhereUniqueWithoutDeliverBikerInput | orderPackagesUpdateWithWhereUniqueWithoutDeliverBikerInput[]
    updateMany?: orderPackagesUpdateManyWithWhereWithoutDeliverBikerInput | orderPackagesUpdateManyWithWhereWithoutDeliverBikerInput[]
    deleteMany?: orderPackagesScalarWhereInput | orderPackagesScalarWhereInput[]
  }

  export type citiesUpdateOneWithoutBikerNestedInput = {
    create?: XOR<citiesCreateWithoutBikerInput, citiesUncheckedCreateWithoutBikerInput>
    connectOrCreate?: citiesCreateOrConnectWithoutBikerInput
    upsert?: citiesUpsertWithoutBikerInput
    disconnect?: citiesWhereInput | boolean
    delete?: citiesWhereInput | boolean
    connect?: citiesWhereUniqueInput
    update?: XOR<XOR<citiesUpdateToOneWithWhereWithoutBikerInput, citiesUpdateWithoutBikerInput>, citiesUncheckedUpdateWithoutBikerInput>
  }

  export type orderPackagesUncheckedUpdateManyWithoutPickupBikerNestedInput = {
    create?: XOR<orderPackagesCreateWithoutPickupBikerInput, orderPackagesUncheckedCreateWithoutPickupBikerInput> | orderPackagesCreateWithoutPickupBikerInput[] | orderPackagesUncheckedCreateWithoutPickupBikerInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutPickupBikerInput | orderPackagesCreateOrConnectWithoutPickupBikerInput[]
    upsert?: orderPackagesUpsertWithWhereUniqueWithoutPickupBikerInput | orderPackagesUpsertWithWhereUniqueWithoutPickupBikerInput[]
    createMany?: orderPackagesCreateManyPickupBikerInputEnvelope
    set?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    disconnect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    delete?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    update?: orderPackagesUpdateWithWhereUniqueWithoutPickupBikerInput | orderPackagesUpdateWithWhereUniqueWithoutPickupBikerInput[]
    updateMany?: orderPackagesUpdateManyWithWhereWithoutPickupBikerInput | orderPackagesUpdateManyWithWhereWithoutPickupBikerInput[]
    deleteMany?: orderPackagesScalarWhereInput | orderPackagesScalarWhereInput[]
  }

  export type orderPackagesUncheckedUpdateManyWithoutDeliverBikerNestedInput = {
    create?: XOR<orderPackagesCreateWithoutDeliverBikerInput, orderPackagesUncheckedCreateWithoutDeliverBikerInput> | orderPackagesCreateWithoutDeliverBikerInput[] | orderPackagesUncheckedCreateWithoutDeliverBikerInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutDeliverBikerInput | orderPackagesCreateOrConnectWithoutDeliverBikerInput[]
    upsert?: orderPackagesUpsertWithWhereUniqueWithoutDeliverBikerInput | orderPackagesUpsertWithWhereUniqueWithoutDeliverBikerInput[]
    createMany?: orderPackagesCreateManyDeliverBikerInputEnvelope
    set?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    disconnect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    delete?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    update?: orderPackagesUpdateWithWhereUniqueWithoutDeliverBikerInput | orderPackagesUpdateWithWhereUniqueWithoutDeliverBikerInput[]
    updateMany?: orderPackagesUpdateManyWithWhereWithoutDeliverBikerInput | orderPackagesUpdateManyWithWhereWithoutDeliverBikerInput[]
    deleteMany?: orderPackagesScalarWhereInput | orderPackagesScalarWhereInput[]
  }

  export type suburbsCreateNestedOneWithoutSendersInput = {
    create?: XOR<suburbsCreateWithoutSendersInput, suburbsUncheckedCreateWithoutSendersInput>
    connectOrCreate?: suburbsCreateOrConnectWithoutSendersInput
    connect?: suburbsWhereUniqueInput
  }

  export type receiversCreateNestedManyWithoutSendersInput = {
    create?: XOR<receiversCreateWithoutSendersInput, receiversUncheckedCreateWithoutSendersInput> | receiversCreateWithoutSendersInput[] | receiversUncheckedCreateWithoutSendersInput[]
    connectOrCreate?: receiversCreateOrConnectWithoutSendersInput | receiversCreateOrConnectWithoutSendersInput[]
    createMany?: receiversCreateManySendersInputEnvelope
    connect?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
  }

  export type ordersCreateNestedManyWithoutSenderInput = {
    create?: XOR<ordersCreateWithoutSenderInput, ordersUncheckedCreateWithoutSenderInput> | ordersCreateWithoutSenderInput[] | ordersUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutSenderInput | ordersCreateOrConnectWithoutSenderInput[]
    createMany?: ordersCreateManySenderInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type receiversUncheckedCreateNestedManyWithoutSendersInput = {
    create?: XOR<receiversCreateWithoutSendersInput, receiversUncheckedCreateWithoutSendersInput> | receiversCreateWithoutSendersInput[] | receiversUncheckedCreateWithoutSendersInput[]
    connectOrCreate?: receiversCreateOrConnectWithoutSendersInput | receiversCreateOrConnectWithoutSendersInput[]
    createMany?: receiversCreateManySendersInputEnvelope
    connect?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<ordersCreateWithoutSenderInput, ordersUncheckedCreateWithoutSenderInput> | ordersCreateWithoutSenderInput[] | ordersUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutSenderInput | ordersCreateOrConnectWithoutSenderInput[]
    createMany?: ordersCreateManySenderInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type suburbsUpdateOneWithoutSendersNestedInput = {
    create?: XOR<suburbsCreateWithoutSendersInput, suburbsUncheckedCreateWithoutSendersInput>
    connectOrCreate?: suburbsCreateOrConnectWithoutSendersInput
    upsert?: suburbsUpsertWithoutSendersInput
    disconnect?: suburbsWhereInput | boolean
    delete?: suburbsWhereInput | boolean
    connect?: suburbsWhereUniqueInput
    update?: XOR<XOR<suburbsUpdateToOneWithWhereWithoutSendersInput, suburbsUpdateWithoutSendersInput>, suburbsUncheckedUpdateWithoutSendersInput>
  }

  export type receiversUpdateManyWithoutSendersNestedInput = {
    create?: XOR<receiversCreateWithoutSendersInput, receiversUncheckedCreateWithoutSendersInput> | receiversCreateWithoutSendersInput[] | receiversUncheckedCreateWithoutSendersInput[]
    connectOrCreate?: receiversCreateOrConnectWithoutSendersInput | receiversCreateOrConnectWithoutSendersInput[]
    upsert?: receiversUpsertWithWhereUniqueWithoutSendersInput | receiversUpsertWithWhereUniqueWithoutSendersInput[]
    createMany?: receiversCreateManySendersInputEnvelope
    set?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    disconnect?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    delete?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    connect?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    update?: receiversUpdateWithWhereUniqueWithoutSendersInput | receiversUpdateWithWhereUniqueWithoutSendersInput[]
    updateMany?: receiversUpdateManyWithWhereWithoutSendersInput | receiversUpdateManyWithWhereWithoutSendersInput[]
    deleteMany?: receiversScalarWhereInput | receiversScalarWhereInput[]
  }

  export type ordersUpdateManyWithoutSenderNestedInput = {
    create?: XOR<ordersCreateWithoutSenderInput, ordersUncheckedCreateWithoutSenderInput> | ordersCreateWithoutSenderInput[] | ordersUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutSenderInput | ordersCreateOrConnectWithoutSenderInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutSenderInput | ordersUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: ordersCreateManySenderInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutSenderInput | ordersUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutSenderInput | ordersUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type receiversUncheckedUpdateManyWithoutSendersNestedInput = {
    create?: XOR<receiversCreateWithoutSendersInput, receiversUncheckedCreateWithoutSendersInput> | receiversCreateWithoutSendersInput[] | receiversUncheckedCreateWithoutSendersInput[]
    connectOrCreate?: receiversCreateOrConnectWithoutSendersInput | receiversCreateOrConnectWithoutSendersInput[]
    upsert?: receiversUpsertWithWhereUniqueWithoutSendersInput | receiversUpsertWithWhereUniqueWithoutSendersInput[]
    createMany?: receiversCreateManySendersInputEnvelope
    set?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    disconnect?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    delete?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    connect?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    update?: receiversUpdateWithWhereUniqueWithoutSendersInput | receiversUpdateWithWhereUniqueWithoutSendersInput[]
    updateMany?: receiversUpdateManyWithWhereWithoutSendersInput | receiversUpdateManyWithWhereWithoutSendersInput[]
    deleteMany?: receiversScalarWhereInput | receiversScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<ordersCreateWithoutSenderInput, ordersUncheckedCreateWithoutSenderInput> | ordersCreateWithoutSenderInput[] | ordersUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutSenderInput | ordersCreateOrConnectWithoutSenderInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutSenderInput | ordersUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: ordersCreateManySenderInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutSenderInput | ordersUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutSenderInput | ordersUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type suburbsCreateNestedOneWithoutReceiversInput = {
    create?: XOR<suburbsCreateWithoutReceiversInput, suburbsUncheckedCreateWithoutReceiversInput>
    connectOrCreate?: suburbsCreateOrConnectWithoutReceiversInput
    connect?: suburbsWhereUniqueInput
  }

  export type sendersCreateNestedOneWithoutReceiversInput = {
    create?: XOR<sendersCreateWithoutReceiversInput, sendersUncheckedCreateWithoutReceiversInput>
    connectOrCreate?: sendersCreateOrConnectWithoutReceiversInput
    connect?: sendersWhereUniqueInput
  }

  export type orderPackagesCreateNestedManyWithoutReceiverInput = {
    create?: XOR<orderPackagesCreateWithoutReceiverInput, orderPackagesUncheckedCreateWithoutReceiverInput> | orderPackagesCreateWithoutReceiverInput[] | orderPackagesUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutReceiverInput | orderPackagesCreateOrConnectWithoutReceiverInput[]
    createMany?: orderPackagesCreateManyReceiverInputEnvelope
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
  }

  export type orderPackagesUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<orderPackagesCreateWithoutReceiverInput, orderPackagesUncheckedCreateWithoutReceiverInput> | orderPackagesCreateWithoutReceiverInput[] | orderPackagesUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutReceiverInput | orderPackagesCreateOrConnectWithoutReceiverInput[]
    createMany?: orderPackagesCreateManyReceiverInputEnvelope
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
  }

  export type suburbsUpdateOneWithoutReceiversNestedInput = {
    create?: XOR<suburbsCreateWithoutReceiversInput, suburbsUncheckedCreateWithoutReceiversInput>
    connectOrCreate?: suburbsCreateOrConnectWithoutReceiversInput
    upsert?: suburbsUpsertWithoutReceiversInput
    disconnect?: suburbsWhereInput | boolean
    delete?: suburbsWhereInput | boolean
    connect?: suburbsWhereUniqueInput
    update?: XOR<XOR<suburbsUpdateToOneWithWhereWithoutReceiversInput, suburbsUpdateWithoutReceiversInput>, suburbsUncheckedUpdateWithoutReceiversInput>
  }

  export type sendersUpdateOneWithoutReceiversNestedInput = {
    create?: XOR<sendersCreateWithoutReceiversInput, sendersUncheckedCreateWithoutReceiversInput>
    connectOrCreate?: sendersCreateOrConnectWithoutReceiversInput
    upsert?: sendersUpsertWithoutReceiversInput
    disconnect?: sendersWhereInput | boolean
    delete?: sendersWhereInput | boolean
    connect?: sendersWhereUniqueInput
    update?: XOR<XOR<sendersUpdateToOneWithWhereWithoutReceiversInput, sendersUpdateWithoutReceiversInput>, sendersUncheckedUpdateWithoutReceiversInput>
  }

  export type orderPackagesUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<orderPackagesCreateWithoutReceiverInput, orderPackagesUncheckedCreateWithoutReceiverInput> | orderPackagesCreateWithoutReceiverInput[] | orderPackagesUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutReceiverInput | orderPackagesCreateOrConnectWithoutReceiverInput[]
    upsert?: orderPackagesUpsertWithWhereUniqueWithoutReceiverInput | orderPackagesUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: orderPackagesCreateManyReceiverInputEnvelope
    set?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    disconnect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    delete?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    update?: orderPackagesUpdateWithWhereUniqueWithoutReceiverInput | orderPackagesUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: orderPackagesUpdateManyWithWhereWithoutReceiverInput | orderPackagesUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: orderPackagesScalarWhereInput | orderPackagesScalarWhereInput[]
  }

  export type orderPackagesUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<orderPackagesCreateWithoutReceiverInput, orderPackagesUncheckedCreateWithoutReceiverInput> | orderPackagesCreateWithoutReceiverInput[] | orderPackagesUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutReceiverInput | orderPackagesCreateOrConnectWithoutReceiverInput[]
    upsert?: orderPackagesUpsertWithWhereUniqueWithoutReceiverInput | orderPackagesUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: orderPackagesCreateManyReceiverInputEnvelope
    set?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    disconnect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    delete?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    update?: orderPackagesUpdateWithWhereUniqueWithoutReceiverInput | orderPackagesUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: orderPackagesUpdateManyWithWhereWithoutReceiverInput | orderPackagesUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: orderPackagesScalarWhereInput | orderPackagesScalarWhereInput[]
  }

  export type sendersCreateNestedOneWithoutOrdersInput = {
    create?: XOR<sendersCreateWithoutOrdersInput, sendersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: sendersCreateOrConnectWithoutOrdersInput
    connect?: sendersWhereUniqueInput
  }

  export type suburbsCreateNestedOneWithoutOrdersInput = {
    create?: XOR<suburbsCreateWithoutOrdersInput, suburbsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: suburbsCreateOrConnectWithoutOrdersInput
    connect?: suburbsWhereUniqueInput
  }

  export type orderPackagesCreateNestedManyWithoutOrdersInput = {
    create?: XOR<orderPackagesCreateWithoutOrdersInput, orderPackagesUncheckedCreateWithoutOrdersInput> | orderPackagesCreateWithoutOrdersInput[] | orderPackagesUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutOrdersInput | orderPackagesCreateOrConnectWithoutOrdersInput[]
    createMany?: orderPackagesCreateManyOrdersInputEnvelope
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
  }

  export type orderPackagesUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<orderPackagesCreateWithoutOrdersInput, orderPackagesUncheckedCreateWithoutOrdersInput> | orderPackagesCreateWithoutOrdersInput[] | orderPackagesUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutOrdersInput | orderPackagesCreateOrConnectWithoutOrdersInput[]
    createMany?: orderPackagesCreateManyOrdersInputEnvelope
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
  }

  export type NullableEnumOrderTypeFieldUpdateOperationsInput = {
    set?: $Enums.OrderType | null
  }

  export type sendersUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<sendersCreateWithoutOrdersInput, sendersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: sendersCreateOrConnectWithoutOrdersInput
    upsert?: sendersUpsertWithoutOrdersInput
    disconnect?: sendersWhereInput | boolean
    delete?: sendersWhereInput | boolean
    connect?: sendersWhereUniqueInput
    update?: XOR<XOR<sendersUpdateToOneWithWhereWithoutOrdersInput, sendersUpdateWithoutOrdersInput>, sendersUncheckedUpdateWithoutOrdersInput>
  }

  export type suburbsUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<suburbsCreateWithoutOrdersInput, suburbsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: suburbsCreateOrConnectWithoutOrdersInput
    upsert?: suburbsUpsertWithoutOrdersInput
    disconnect?: suburbsWhereInput | boolean
    delete?: suburbsWhereInput | boolean
    connect?: suburbsWhereUniqueInput
    update?: XOR<XOR<suburbsUpdateToOneWithWhereWithoutOrdersInput, suburbsUpdateWithoutOrdersInput>, suburbsUncheckedUpdateWithoutOrdersInput>
  }

  export type orderPackagesUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<orderPackagesCreateWithoutOrdersInput, orderPackagesUncheckedCreateWithoutOrdersInput> | orderPackagesCreateWithoutOrdersInput[] | orderPackagesUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutOrdersInput | orderPackagesCreateOrConnectWithoutOrdersInput[]
    upsert?: orderPackagesUpsertWithWhereUniqueWithoutOrdersInput | orderPackagesUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: orderPackagesCreateManyOrdersInputEnvelope
    set?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    disconnect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    delete?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    update?: orderPackagesUpdateWithWhereUniqueWithoutOrdersInput | orderPackagesUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: orderPackagesUpdateManyWithWhereWithoutOrdersInput | orderPackagesUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: orderPackagesScalarWhereInput | orderPackagesScalarWhereInput[]
  }

  export type orderPackagesUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<orderPackagesCreateWithoutOrdersInput, orderPackagesUncheckedCreateWithoutOrdersInput> | orderPackagesCreateWithoutOrdersInput[] | orderPackagesUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutOrdersInput | orderPackagesCreateOrConnectWithoutOrdersInput[]
    upsert?: orderPackagesUpsertWithWhereUniqueWithoutOrdersInput | orderPackagesUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: orderPackagesCreateManyOrdersInputEnvelope
    set?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    disconnect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    delete?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    update?: orderPackagesUpdateWithWhereUniqueWithoutOrdersInput | orderPackagesUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: orderPackagesUpdateManyWithWhereWithoutOrdersInput | orderPackagesUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: orderPackagesScalarWhereInput | orderPackagesScalarWhereInput[]
  }

  export type ordersCreateNestedOneWithoutPackagesInput = {
    create?: XOR<ordersCreateWithoutPackagesInput, ordersUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: ordersCreateOrConnectWithoutPackagesInput
    connect?: ordersWhereUniqueInput
  }

  export type receiversCreateNestedOneWithoutPackagesInput = {
    create?: XOR<receiversCreateWithoutPackagesInput, receiversUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: receiversCreateOrConnectWithoutPackagesInput
    connect?: receiversWhereUniqueInput
  }

  export type suburbsCreateNestedOneWithoutOrderPackagesInput = {
    create?: XOR<suburbsCreateWithoutOrderPackagesInput, suburbsUncheckedCreateWithoutOrderPackagesInput>
    connectOrCreate?: suburbsCreateOrConnectWithoutOrderPackagesInput
    connect?: suburbsWhereUniqueInput
  }

  export type bikersCreateNestedOneWithoutPackagesPickupBikersInput = {
    create?: XOR<bikersCreateWithoutPackagesPickupBikersInput, bikersUncheckedCreateWithoutPackagesPickupBikersInput>
    connectOrCreate?: bikersCreateOrConnectWithoutPackagesPickupBikersInput
    connect?: bikersWhereUniqueInput
  }

  export type bikersCreateNestedOneWithoutPackagesDeliveryBikersInput = {
    create?: XOR<bikersCreateWithoutPackagesDeliveryBikersInput, bikersUncheckedCreateWithoutPackagesDeliveryBikersInput>
    connectOrCreate?: bikersCreateOrConnectWithoutPackagesDeliveryBikersInput
    connect?: bikersWhereUniqueInput
  }

  export type packageHistoriesCreateNestedManyWithoutPackagesInput = {
    create?: XOR<packageHistoriesCreateWithoutPackagesInput, packageHistoriesUncheckedCreateWithoutPackagesInput> | packageHistoriesCreateWithoutPackagesInput[] | packageHistoriesUncheckedCreateWithoutPackagesInput[]
    connectOrCreate?: packageHistoriesCreateOrConnectWithoutPackagesInput | packageHistoriesCreateOrConnectWithoutPackagesInput[]
    createMany?: packageHistoriesCreateManyPackagesInputEnvelope
    connect?: packageHistoriesWhereUniqueInput | packageHistoriesWhereUniqueInput[]
  }

  export type packageHistoriesUncheckedCreateNestedManyWithoutPackagesInput = {
    create?: XOR<packageHistoriesCreateWithoutPackagesInput, packageHistoriesUncheckedCreateWithoutPackagesInput> | packageHistoriesCreateWithoutPackagesInput[] | packageHistoriesUncheckedCreateWithoutPackagesInput[]
    connectOrCreate?: packageHistoriesCreateOrConnectWithoutPackagesInput | packageHistoriesCreateOrConnectWithoutPackagesInput[]
    createMany?: packageHistoriesCreateManyPackagesInputEnvelope
    connect?: packageHistoriesWhereUniqueInput | packageHistoriesWhereUniqueInput[]
  }

  export type EnumpaymentByFieldUpdateOperationsInput = {
    set?: $Enums.paymentBy
  }

  export type NullableEnumstatusFieldUpdateOperationsInput = {
    set?: $Enums.status | null
  }

  export type ordersUpdateOneWithoutPackagesNestedInput = {
    create?: XOR<ordersCreateWithoutPackagesInput, ordersUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: ordersCreateOrConnectWithoutPackagesInput
    upsert?: ordersUpsertWithoutPackagesInput
    disconnect?: ordersWhereInput | boolean
    delete?: ordersWhereInput | boolean
    connect?: ordersWhereUniqueInput
    update?: XOR<XOR<ordersUpdateToOneWithWhereWithoutPackagesInput, ordersUpdateWithoutPackagesInput>, ordersUncheckedUpdateWithoutPackagesInput>
  }

  export type receiversUpdateOneWithoutPackagesNestedInput = {
    create?: XOR<receiversCreateWithoutPackagesInput, receiversUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: receiversCreateOrConnectWithoutPackagesInput
    upsert?: receiversUpsertWithoutPackagesInput
    disconnect?: receiversWhereInput | boolean
    delete?: receiversWhereInput | boolean
    connect?: receiversWhereUniqueInput
    update?: XOR<XOR<receiversUpdateToOneWithWhereWithoutPackagesInput, receiversUpdateWithoutPackagesInput>, receiversUncheckedUpdateWithoutPackagesInput>
  }

  export type suburbsUpdateOneWithoutOrderPackagesNestedInput = {
    create?: XOR<suburbsCreateWithoutOrderPackagesInput, suburbsUncheckedCreateWithoutOrderPackagesInput>
    connectOrCreate?: suburbsCreateOrConnectWithoutOrderPackagesInput
    upsert?: suburbsUpsertWithoutOrderPackagesInput
    disconnect?: suburbsWhereInput | boolean
    delete?: suburbsWhereInput | boolean
    connect?: suburbsWhereUniqueInput
    update?: XOR<XOR<suburbsUpdateToOneWithWhereWithoutOrderPackagesInput, suburbsUpdateWithoutOrderPackagesInput>, suburbsUncheckedUpdateWithoutOrderPackagesInput>
  }

  export type bikersUpdateOneWithoutPackagesPickupBikersNestedInput = {
    create?: XOR<bikersCreateWithoutPackagesPickupBikersInput, bikersUncheckedCreateWithoutPackagesPickupBikersInput>
    connectOrCreate?: bikersCreateOrConnectWithoutPackagesPickupBikersInput
    upsert?: bikersUpsertWithoutPackagesPickupBikersInput
    disconnect?: bikersWhereInput | boolean
    delete?: bikersWhereInput | boolean
    connect?: bikersWhereUniqueInput
    update?: XOR<XOR<bikersUpdateToOneWithWhereWithoutPackagesPickupBikersInput, bikersUpdateWithoutPackagesPickupBikersInput>, bikersUncheckedUpdateWithoutPackagesPickupBikersInput>
  }

  export type bikersUpdateOneWithoutPackagesDeliveryBikersNestedInput = {
    create?: XOR<bikersCreateWithoutPackagesDeliveryBikersInput, bikersUncheckedCreateWithoutPackagesDeliveryBikersInput>
    connectOrCreate?: bikersCreateOrConnectWithoutPackagesDeliveryBikersInput
    upsert?: bikersUpsertWithoutPackagesDeliveryBikersInput
    disconnect?: bikersWhereInput | boolean
    delete?: bikersWhereInput | boolean
    connect?: bikersWhereUniqueInput
    update?: XOR<XOR<bikersUpdateToOneWithWhereWithoutPackagesDeliveryBikersInput, bikersUpdateWithoutPackagesDeliveryBikersInput>, bikersUncheckedUpdateWithoutPackagesDeliveryBikersInput>
  }

  export type packageHistoriesUpdateManyWithoutPackagesNestedInput = {
    create?: XOR<packageHistoriesCreateWithoutPackagesInput, packageHistoriesUncheckedCreateWithoutPackagesInput> | packageHistoriesCreateWithoutPackagesInput[] | packageHistoriesUncheckedCreateWithoutPackagesInput[]
    connectOrCreate?: packageHistoriesCreateOrConnectWithoutPackagesInput | packageHistoriesCreateOrConnectWithoutPackagesInput[]
    upsert?: packageHistoriesUpsertWithWhereUniqueWithoutPackagesInput | packageHistoriesUpsertWithWhereUniqueWithoutPackagesInput[]
    createMany?: packageHistoriesCreateManyPackagesInputEnvelope
    set?: packageHistoriesWhereUniqueInput | packageHistoriesWhereUniqueInput[]
    disconnect?: packageHistoriesWhereUniqueInput | packageHistoriesWhereUniqueInput[]
    delete?: packageHistoriesWhereUniqueInput | packageHistoriesWhereUniqueInput[]
    connect?: packageHistoriesWhereUniqueInput | packageHistoriesWhereUniqueInput[]
    update?: packageHistoriesUpdateWithWhereUniqueWithoutPackagesInput | packageHistoriesUpdateWithWhereUniqueWithoutPackagesInput[]
    updateMany?: packageHistoriesUpdateManyWithWhereWithoutPackagesInput | packageHistoriesUpdateManyWithWhereWithoutPackagesInput[]
    deleteMany?: packageHistoriesScalarWhereInput | packageHistoriesScalarWhereInput[]
  }

  export type packageHistoriesUncheckedUpdateManyWithoutPackagesNestedInput = {
    create?: XOR<packageHistoriesCreateWithoutPackagesInput, packageHistoriesUncheckedCreateWithoutPackagesInput> | packageHistoriesCreateWithoutPackagesInput[] | packageHistoriesUncheckedCreateWithoutPackagesInput[]
    connectOrCreate?: packageHistoriesCreateOrConnectWithoutPackagesInput | packageHistoriesCreateOrConnectWithoutPackagesInput[]
    upsert?: packageHistoriesUpsertWithWhereUniqueWithoutPackagesInput | packageHistoriesUpsertWithWhereUniqueWithoutPackagesInput[]
    createMany?: packageHistoriesCreateManyPackagesInputEnvelope
    set?: packageHistoriesWhereUniqueInput | packageHistoriesWhereUniqueInput[]
    disconnect?: packageHistoriesWhereUniqueInput | packageHistoriesWhereUniqueInput[]
    delete?: packageHistoriesWhereUniqueInput | packageHistoriesWhereUniqueInput[]
    connect?: packageHistoriesWhereUniqueInput | packageHistoriesWhereUniqueInput[]
    update?: packageHistoriesUpdateWithWhereUniqueWithoutPackagesInput | packageHistoriesUpdateWithWhereUniqueWithoutPackagesInput[]
    updateMany?: packageHistoriesUpdateManyWithWhereWithoutPackagesInput | packageHistoriesUpdateManyWithWhereWithoutPackagesInput[]
    deleteMany?: packageHistoriesScalarWhereInput | packageHistoriesScalarWhereInput[]
  }

  export type orderPackagesCreateNestedOneWithoutPackageHistoriesInput = {
    create?: XOR<orderPackagesCreateWithoutPackageHistoriesInput, orderPackagesUncheckedCreateWithoutPackageHistoriesInput>
    connectOrCreate?: orderPackagesCreateOrConnectWithoutPackageHistoriesInput
    connect?: orderPackagesWhereUniqueInput
  }

  export type EnumstatusFieldUpdateOperationsInput = {
    set?: $Enums.status
  }

  export type orderPackagesUpdateOneWithoutPackageHistoriesNestedInput = {
    create?: XOR<orderPackagesCreateWithoutPackageHistoriesInput, orderPackagesUncheckedCreateWithoutPackageHistoriesInput>
    connectOrCreate?: orderPackagesCreateOrConnectWithoutPackageHistoriesInput
    upsert?: orderPackagesUpsertWithoutPackageHistoriesInput
    disconnect?: orderPackagesWhereInput | boolean
    delete?: orderPackagesWhereInput | boolean
    connect?: orderPackagesWhereUniqueInput
    update?: XOR<XOR<orderPackagesUpdateToOneWithWhereWithoutPackageHistoriesInput, orderPackagesUpdateWithoutPackageHistoriesInput>, orderPackagesUncheckedUpdateWithoutPackageHistoriesInput>
  }

  export type citiesCreateNestedOneWithoutSuburbsInput = {
    create?: XOR<citiesCreateWithoutSuburbsInput, citiesUncheckedCreateWithoutSuburbsInput>
    connectOrCreate?: citiesCreateOrConnectWithoutSuburbsInput
    connect?: citiesWhereUniqueInput
  }

  export type deliveryPricesCreateNestedManyWithoutSuburbsInput = {
    create?: XOR<deliveryPricesCreateWithoutSuburbsInput, deliveryPricesUncheckedCreateWithoutSuburbsInput> | deliveryPricesCreateWithoutSuburbsInput[] | deliveryPricesUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: deliveryPricesCreateOrConnectWithoutSuburbsInput | deliveryPricesCreateOrConnectWithoutSuburbsInput[]
    createMany?: deliveryPricesCreateManySuburbsInputEnvelope
    connect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
  }

  export type ordersCreateNestedManyWithoutSuburbsInput = {
    create?: XOR<ordersCreateWithoutSuburbsInput, ordersUncheckedCreateWithoutSuburbsInput> | ordersCreateWithoutSuburbsInput[] | ordersUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutSuburbsInput | ordersCreateOrConnectWithoutSuburbsInput[]
    createMany?: ordersCreateManySuburbsInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type orderPackagesCreateNestedManyWithoutSuburbInput = {
    create?: XOR<orderPackagesCreateWithoutSuburbInput, orderPackagesUncheckedCreateWithoutSuburbInput> | orderPackagesCreateWithoutSuburbInput[] | orderPackagesUncheckedCreateWithoutSuburbInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutSuburbInput | orderPackagesCreateOrConnectWithoutSuburbInput[]
    createMany?: orderPackagesCreateManySuburbInputEnvelope
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
  }

  export type sendersCreateNestedManyWithoutSuburbsInput = {
    create?: XOR<sendersCreateWithoutSuburbsInput, sendersUncheckedCreateWithoutSuburbsInput> | sendersCreateWithoutSuburbsInput[] | sendersUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: sendersCreateOrConnectWithoutSuburbsInput | sendersCreateOrConnectWithoutSuburbsInput[]
    createMany?: sendersCreateManySuburbsInputEnvelope
    connect?: sendersWhereUniqueInput | sendersWhereUniqueInput[]
  }

  export type receiversCreateNestedManyWithoutSuburbsInput = {
    create?: XOR<receiversCreateWithoutSuburbsInput, receiversUncheckedCreateWithoutSuburbsInput> | receiversCreateWithoutSuburbsInput[] | receiversUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: receiversCreateOrConnectWithoutSuburbsInput | receiversCreateOrConnectWithoutSuburbsInput[]
    createMany?: receiversCreateManySuburbsInputEnvelope
    connect?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
  }

  export type deliveryPricesUncheckedCreateNestedManyWithoutSuburbsInput = {
    create?: XOR<deliveryPricesCreateWithoutSuburbsInput, deliveryPricesUncheckedCreateWithoutSuburbsInput> | deliveryPricesCreateWithoutSuburbsInput[] | deliveryPricesUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: deliveryPricesCreateOrConnectWithoutSuburbsInput | deliveryPricesCreateOrConnectWithoutSuburbsInput[]
    createMany?: deliveryPricesCreateManySuburbsInputEnvelope
    connect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutSuburbsInput = {
    create?: XOR<ordersCreateWithoutSuburbsInput, ordersUncheckedCreateWithoutSuburbsInput> | ordersCreateWithoutSuburbsInput[] | ordersUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutSuburbsInput | ordersCreateOrConnectWithoutSuburbsInput[]
    createMany?: ordersCreateManySuburbsInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type orderPackagesUncheckedCreateNestedManyWithoutSuburbInput = {
    create?: XOR<orderPackagesCreateWithoutSuburbInput, orderPackagesUncheckedCreateWithoutSuburbInput> | orderPackagesCreateWithoutSuburbInput[] | orderPackagesUncheckedCreateWithoutSuburbInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutSuburbInput | orderPackagesCreateOrConnectWithoutSuburbInput[]
    createMany?: orderPackagesCreateManySuburbInputEnvelope
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
  }

  export type sendersUncheckedCreateNestedManyWithoutSuburbsInput = {
    create?: XOR<sendersCreateWithoutSuburbsInput, sendersUncheckedCreateWithoutSuburbsInput> | sendersCreateWithoutSuburbsInput[] | sendersUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: sendersCreateOrConnectWithoutSuburbsInput | sendersCreateOrConnectWithoutSuburbsInput[]
    createMany?: sendersCreateManySuburbsInputEnvelope
    connect?: sendersWhereUniqueInput | sendersWhereUniqueInput[]
  }

  export type receiversUncheckedCreateNestedManyWithoutSuburbsInput = {
    create?: XOR<receiversCreateWithoutSuburbsInput, receiversUncheckedCreateWithoutSuburbsInput> | receiversCreateWithoutSuburbsInput[] | receiversUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: receiversCreateOrConnectWithoutSuburbsInput | receiversCreateOrConnectWithoutSuburbsInput[]
    createMany?: receiversCreateManySuburbsInputEnvelope
    connect?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
  }

  export type citiesUpdateOneWithoutSuburbsNestedInput = {
    create?: XOR<citiesCreateWithoutSuburbsInput, citiesUncheckedCreateWithoutSuburbsInput>
    connectOrCreate?: citiesCreateOrConnectWithoutSuburbsInput
    upsert?: citiesUpsertWithoutSuburbsInput
    disconnect?: citiesWhereInput | boolean
    delete?: citiesWhereInput | boolean
    connect?: citiesWhereUniqueInput
    update?: XOR<XOR<citiesUpdateToOneWithWhereWithoutSuburbsInput, citiesUpdateWithoutSuburbsInput>, citiesUncheckedUpdateWithoutSuburbsInput>
  }

  export type deliveryPricesUpdateManyWithoutSuburbsNestedInput = {
    create?: XOR<deliveryPricesCreateWithoutSuburbsInput, deliveryPricesUncheckedCreateWithoutSuburbsInput> | deliveryPricesCreateWithoutSuburbsInput[] | deliveryPricesUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: deliveryPricesCreateOrConnectWithoutSuburbsInput | deliveryPricesCreateOrConnectWithoutSuburbsInput[]
    upsert?: deliveryPricesUpsertWithWhereUniqueWithoutSuburbsInput | deliveryPricesUpsertWithWhereUniqueWithoutSuburbsInput[]
    createMany?: deliveryPricesCreateManySuburbsInputEnvelope
    set?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    disconnect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    delete?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    connect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    update?: deliveryPricesUpdateWithWhereUniqueWithoutSuburbsInput | deliveryPricesUpdateWithWhereUniqueWithoutSuburbsInput[]
    updateMany?: deliveryPricesUpdateManyWithWhereWithoutSuburbsInput | deliveryPricesUpdateManyWithWhereWithoutSuburbsInput[]
    deleteMany?: deliveryPricesScalarWhereInput | deliveryPricesScalarWhereInput[]
  }

  export type ordersUpdateManyWithoutSuburbsNestedInput = {
    create?: XOR<ordersCreateWithoutSuburbsInput, ordersUncheckedCreateWithoutSuburbsInput> | ordersCreateWithoutSuburbsInput[] | ordersUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutSuburbsInput | ordersCreateOrConnectWithoutSuburbsInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutSuburbsInput | ordersUpsertWithWhereUniqueWithoutSuburbsInput[]
    createMany?: ordersCreateManySuburbsInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutSuburbsInput | ordersUpdateWithWhereUniqueWithoutSuburbsInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutSuburbsInput | ordersUpdateManyWithWhereWithoutSuburbsInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type orderPackagesUpdateManyWithoutSuburbNestedInput = {
    create?: XOR<orderPackagesCreateWithoutSuburbInput, orderPackagesUncheckedCreateWithoutSuburbInput> | orderPackagesCreateWithoutSuburbInput[] | orderPackagesUncheckedCreateWithoutSuburbInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutSuburbInput | orderPackagesCreateOrConnectWithoutSuburbInput[]
    upsert?: orderPackagesUpsertWithWhereUniqueWithoutSuburbInput | orderPackagesUpsertWithWhereUniqueWithoutSuburbInput[]
    createMany?: orderPackagesCreateManySuburbInputEnvelope
    set?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    disconnect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    delete?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    update?: orderPackagesUpdateWithWhereUniqueWithoutSuburbInput | orderPackagesUpdateWithWhereUniqueWithoutSuburbInput[]
    updateMany?: orderPackagesUpdateManyWithWhereWithoutSuburbInput | orderPackagesUpdateManyWithWhereWithoutSuburbInput[]
    deleteMany?: orderPackagesScalarWhereInput | orderPackagesScalarWhereInput[]
  }

  export type sendersUpdateManyWithoutSuburbsNestedInput = {
    create?: XOR<sendersCreateWithoutSuburbsInput, sendersUncheckedCreateWithoutSuburbsInput> | sendersCreateWithoutSuburbsInput[] | sendersUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: sendersCreateOrConnectWithoutSuburbsInput | sendersCreateOrConnectWithoutSuburbsInput[]
    upsert?: sendersUpsertWithWhereUniqueWithoutSuburbsInput | sendersUpsertWithWhereUniqueWithoutSuburbsInput[]
    createMany?: sendersCreateManySuburbsInputEnvelope
    set?: sendersWhereUniqueInput | sendersWhereUniqueInput[]
    disconnect?: sendersWhereUniqueInput | sendersWhereUniqueInput[]
    delete?: sendersWhereUniqueInput | sendersWhereUniqueInput[]
    connect?: sendersWhereUniqueInput | sendersWhereUniqueInput[]
    update?: sendersUpdateWithWhereUniqueWithoutSuburbsInput | sendersUpdateWithWhereUniqueWithoutSuburbsInput[]
    updateMany?: sendersUpdateManyWithWhereWithoutSuburbsInput | sendersUpdateManyWithWhereWithoutSuburbsInput[]
    deleteMany?: sendersScalarWhereInput | sendersScalarWhereInput[]
  }

  export type receiversUpdateManyWithoutSuburbsNestedInput = {
    create?: XOR<receiversCreateWithoutSuburbsInput, receiversUncheckedCreateWithoutSuburbsInput> | receiversCreateWithoutSuburbsInput[] | receiversUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: receiversCreateOrConnectWithoutSuburbsInput | receiversCreateOrConnectWithoutSuburbsInput[]
    upsert?: receiversUpsertWithWhereUniqueWithoutSuburbsInput | receiversUpsertWithWhereUniqueWithoutSuburbsInput[]
    createMany?: receiversCreateManySuburbsInputEnvelope
    set?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    disconnect?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    delete?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    connect?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    update?: receiversUpdateWithWhereUniqueWithoutSuburbsInput | receiversUpdateWithWhereUniqueWithoutSuburbsInput[]
    updateMany?: receiversUpdateManyWithWhereWithoutSuburbsInput | receiversUpdateManyWithWhereWithoutSuburbsInput[]
    deleteMany?: receiversScalarWhereInput | receiversScalarWhereInput[]
  }

  export type deliveryPricesUncheckedUpdateManyWithoutSuburbsNestedInput = {
    create?: XOR<deliveryPricesCreateWithoutSuburbsInput, deliveryPricesUncheckedCreateWithoutSuburbsInput> | deliveryPricesCreateWithoutSuburbsInput[] | deliveryPricesUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: deliveryPricesCreateOrConnectWithoutSuburbsInput | deliveryPricesCreateOrConnectWithoutSuburbsInput[]
    upsert?: deliveryPricesUpsertWithWhereUniqueWithoutSuburbsInput | deliveryPricesUpsertWithWhereUniqueWithoutSuburbsInput[]
    createMany?: deliveryPricesCreateManySuburbsInputEnvelope
    set?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    disconnect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    delete?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    connect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    update?: deliveryPricesUpdateWithWhereUniqueWithoutSuburbsInput | deliveryPricesUpdateWithWhereUniqueWithoutSuburbsInput[]
    updateMany?: deliveryPricesUpdateManyWithWhereWithoutSuburbsInput | deliveryPricesUpdateManyWithWhereWithoutSuburbsInput[]
    deleteMany?: deliveryPricesScalarWhereInput | deliveryPricesScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutSuburbsNestedInput = {
    create?: XOR<ordersCreateWithoutSuburbsInput, ordersUncheckedCreateWithoutSuburbsInput> | ordersCreateWithoutSuburbsInput[] | ordersUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutSuburbsInput | ordersCreateOrConnectWithoutSuburbsInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutSuburbsInput | ordersUpsertWithWhereUniqueWithoutSuburbsInput[]
    createMany?: ordersCreateManySuburbsInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutSuburbsInput | ordersUpdateWithWhereUniqueWithoutSuburbsInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutSuburbsInput | ordersUpdateManyWithWhereWithoutSuburbsInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type orderPackagesUncheckedUpdateManyWithoutSuburbNestedInput = {
    create?: XOR<orderPackagesCreateWithoutSuburbInput, orderPackagesUncheckedCreateWithoutSuburbInput> | orderPackagesCreateWithoutSuburbInput[] | orderPackagesUncheckedCreateWithoutSuburbInput[]
    connectOrCreate?: orderPackagesCreateOrConnectWithoutSuburbInput | orderPackagesCreateOrConnectWithoutSuburbInput[]
    upsert?: orderPackagesUpsertWithWhereUniqueWithoutSuburbInput | orderPackagesUpsertWithWhereUniqueWithoutSuburbInput[]
    createMany?: orderPackagesCreateManySuburbInputEnvelope
    set?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    disconnect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    delete?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    connect?: orderPackagesWhereUniqueInput | orderPackagesWhereUniqueInput[]
    update?: orderPackagesUpdateWithWhereUniqueWithoutSuburbInput | orderPackagesUpdateWithWhereUniqueWithoutSuburbInput[]
    updateMany?: orderPackagesUpdateManyWithWhereWithoutSuburbInput | orderPackagesUpdateManyWithWhereWithoutSuburbInput[]
    deleteMany?: orderPackagesScalarWhereInput | orderPackagesScalarWhereInput[]
  }

  export type sendersUncheckedUpdateManyWithoutSuburbsNestedInput = {
    create?: XOR<sendersCreateWithoutSuburbsInput, sendersUncheckedCreateWithoutSuburbsInput> | sendersCreateWithoutSuburbsInput[] | sendersUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: sendersCreateOrConnectWithoutSuburbsInput | sendersCreateOrConnectWithoutSuburbsInput[]
    upsert?: sendersUpsertWithWhereUniqueWithoutSuburbsInput | sendersUpsertWithWhereUniqueWithoutSuburbsInput[]
    createMany?: sendersCreateManySuburbsInputEnvelope
    set?: sendersWhereUniqueInput | sendersWhereUniqueInput[]
    disconnect?: sendersWhereUniqueInput | sendersWhereUniqueInput[]
    delete?: sendersWhereUniqueInput | sendersWhereUniqueInput[]
    connect?: sendersWhereUniqueInput | sendersWhereUniqueInput[]
    update?: sendersUpdateWithWhereUniqueWithoutSuburbsInput | sendersUpdateWithWhereUniqueWithoutSuburbsInput[]
    updateMany?: sendersUpdateManyWithWhereWithoutSuburbsInput | sendersUpdateManyWithWhereWithoutSuburbsInput[]
    deleteMany?: sendersScalarWhereInput | sendersScalarWhereInput[]
  }

  export type receiversUncheckedUpdateManyWithoutSuburbsNestedInput = {
    create?: XOR<receiversCreateWithoutSuburbsInput, receiversUncheckedCreateWithoutSuburbsInput> | receiversCreateWithoutSuburbsInput[] | receiversUncheckedCreateWithoutSuburbsInput[]
    connectOrCreate?: receiversCreateOrConnectWithoutSuburbsInput | receiversCreateOrConnectWithoutSuburbsInput[]
    upsert?: receiversUpsertWithWhereUniqueWithoutSuburbsInput | receiversUpsertWithWhereUniqueWithoutSuburbsInput[]
    createMany?: receiversCreateManySuburbsInputEnvelope
    set?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    disconnect?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    delete?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    connect?: receiversWhereUniqueInput | receiversWhereUniqueInput[]
    update?: receiversUpdateWithWhereUniqueWithoutSuburbsInput | receiversUpdateWithWhereUniqueWithoutSuburbsInput[]
    updateMany?: receiversUpdateManyWithWhereWithoutSuburbsInput | receiversUpdateManyWithWhereWithoutSuburbsInput[]
    deleteMany?: receiversScalarWhereInput | receiversScalarWhereInput[]
  }

  export type suburbsCreateNestedManyWithoutCitiesInput = {
    create?: XOR<suburbsCreateWithoutCitiesInput, suburbsUncheckedCreateWithoutCitiesInput> | suburbsCreateWithoutCitiesInput[] | suburbsUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: suburbsCreateOrConnectWithoutCitiesInput | suburbsCreateOrConnectWithoutCitiesInput[]
    createMany?: suburbsCreateManyCitiesInputEnvelope
    connect?: suburbsWhereUniqueInput | suburbsWhereUniqueInput[]
  }

  export type usersCreateNestedManyWithoutCitiesInput = {
    create?: XOR<usersCreateWithoutCitiesInput, usersUncheckedCreateWithoutCitiesInput> | usersCreateWithoutCitiesInput[] | usersUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutCitiesInput | usersCreateOrConnectWithoutCitiesInput[]
    createMany?: usersCreateManyCitiesInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type bikersCreateNestedManyWithoutCitiesInput = {
    create?: XOR<bikersCreateWithoutCitiesInput, bikersUncheckedCreateWithoutCitiesInput> | bikersCreateWithoutCitiesInput[] | bikersUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: bikersCreateOrConnectWithoutCitiesInput | bikersCreateOrConnectWithoutCitiesInput[]
    createMany?: bikersCreateManyCitiesInputEnvelope
    connect?: bikersWhereUniqueInput | bikersWhereUniqueInput[]
  }

  export type deliveryPricesCreateNestedManyWithoutCitiesInput = {
    create?: XOR<deliveryPricesCreateWithoutCitiesInput, deliveryPricesUncheckedCreateWithoutCitiesInput> | deliveryPricesCreateWithoutCitiesInput[] | deliveryPricesUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: deliveryPricesCreateOrConnectWithoutCitiesInput | deliveryPricesCreateOrConnectWithoutCitiesInput[]
    createMany?: deliveryPricesCreateManyCitiesInputEnvelope
    connect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
  }

  export type deliveryPricesCreateNestedManyWithoutDestinationInput = {
    create?: XOR<deliveryPricesCreateWithoutDestinationInput, deliveryPricesUncheckedCreateWithoutDestinationInput> | deliveryPricesCreateWithoutDestinationInput[] | deliveryPricesUncheckedCreateWithoutDestinationInput[]
    connectOrCreate?: deliveryPricesCreateOrConnectWithoutDestinationInput | deliveryPricesCreateOrConnectWithoutDestinationInput[]
    createMany?: deliveryPricesCreateManyDestinationInputEnvelope
    connect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
  }

  export type suburbsUncheckedCreateNestedManyWithoutCitiesInput = {
    create?: XOR<suburbsCreateWithoutCitiesInput, suburbsUncheckedCreateWithoutCitiesInput> | suburbsCreateWithoutCitiesInput[] | suburbsUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: suburbsCreateOrConnectWithoutCitiesInput | suburbsCreateOrConnectWithoutCitiesInput[]
    createMany?: suburbsCreateManyCitiesInputEnvelope
    connect?: suburbsWhereUniqueInput | suburbsWhereUniqueInput[]
  }

  export type usersUncheckedCreateNestedManyWithoutCitiesInput = {
    create?: XOR<usersCreateWithoutCitiesInput, usersUncheckedCreateWithoutCitiesInput> | usersCreateWithoutCitiesInput[] | usersUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutCitiesInput | usersCreateOrConnectWithoutCitiesInput[]
    createMany?: usersCreateManyCitiesInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type bikersUncheckedCreateNestedManyWithoutCitiesInput = {
    create?: XOR<bikersCreateWithoutCitiesInput, bikersUncheckedCreateWithoutCitiesInput> | bikersCreateWithoutCitiesInput[] | bikersUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: bikersCreateOrConnectWithoutCitiesInput | bikersCreateOrConnectWithoutCitiesInput[]
    createMany?: bikersCreateManyCitiesInputEnvelope
    connect?: bikersWhereUniqueInput | bikersWhereUniqueInput[]
  }

  export type deliveryPricesUncheckedCreateNestedManyWithoutCitiesInput = {
    create?: XOR<deliveryPricesCreateWithoutCitiesInput, deliveryPricesUncheckedCreateWithoutCitiesInput> | deliveryPricesCreateWithoutCitiesInput[] | deliveryPricesUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: deliveryPricesCreateOrConnectWithoutCitiesInput | deliveryPricesCreateOrConnectWithoutCitiesInput[]
    createMany?: deliveryPricesCreateManyCitiesInputEnvelope
    connect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
  }

  export type deliveryPricesUncheckedCreateNestedManyWithoutDestinationInput = {
    create?: XOR<deliveryPricesCreateWithoutDestinationInput, deliveryPricesUncheckedCreateWithoutDestinationInput> | deliveryPricesCreateWithoutDestinationInput[] | deliveryPricesUncheckedCreateWithoutDestinationInput[]
    connectOrCreate?: deliveryPricesCreateOrConnectWithoutDestinationInput | deliveryPricesCreateOrConnectWithoutDestinationInput[]
    createMany?: deliveryPricesCreateManyDestinationInputEnvelope
    connect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
  }

  export type suburbsUpdateManyWithoutCitiesNestedInput = {
    create?: XOR<suburbsCreateWithoutCitiesInput, suburbsUncheckedCreateWithoutCitiesInput> | suburbsCreateWithoutCitiesInput[] | suburbsUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: suburbsCreateOrConnectWithoutCitiesInput | suburbsCreateOrConnectWithoutCitiesInput[]
    upsert?: suburbsUpsertWithWhereUniqueWithoutCitiesInput | suburbsUpsertWithWhereUniqueWithoutCitiesInput[]
    createMany?: suburbsCreateManyCitiesInputEnvelope
    set?: suburbsWhereUniqueInput | suburbsWhereUniqueInput[]
    disconnect?: suburbsWhereUniqueInput | suburbsWhereUniqueInput[]
    delete?: suburbsWhereUniqueInput | suburbsWhereUniqueInput[]
    connect?: suburbsWhereUniqueInput | suburbsWhereUniqueInput[]
    update?: suburbsUpdateWithWhereUniqueWithoutCitiesInput | suburbsUpdateWithWhereUniqueWithoutCitiesInput[]
    updateMany?: suburbsUpdateManyWithWhereWithoutCitiesInput | suburbsUpdateManyWithWhereWithoutCitiesInput[]
    deleteMany?: suburbsScalarWhereInput | suburbsScalarWhereInput[]
  }

  export type usersUpdateManyWithoutCitiesNestedInput = {
    create?: XOR<usersCreateWithoutCitiesInput, usersUncheckedCreateWithoutCitiesInput> | usersCreateWithoutCitiesInput[] | usersUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutCitiesInput | usersCreateOrConnectWithoutCitiesInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutCitiesInput | usersUpsertWithWhereUniqueWithoutCitiesInput[]
    createMany?: usersCreateManyCitiesInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutCitiesInput | usersUpdateWithWhereUniqueWithoutCitiesInput[]
    updateMany?: usersUpdateManyWithWhereWithoutCitiesInput | usersUpdateManyWithWhereWithoutCitiesInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type bikersUpdateManyWithoutCitiesNestedInput = {
    create?: XOR<bikersCreateWithoutCitiesInput, bikersUncheckedCreateWithoutCitiesInput> | bikersCreateWithoutCitiesInput[] | bikersUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: bikersCreateOrConnectWithoutCitiesInput | bikersCreateOrConnectWithoutCitiesInput[]
    upsert?: bikersUpsertWithWhereUniqueWithoutCitiesInput | bikersUpsertWithWhereUniqueWithoutCitiesInput[]
    createMany?: bikersCreateManyCitiesInputEnvelope
    set?: bikersWhereUniqueInput | bikersWhereUniqueInput[]
    disconnect?: bikersWhereUniqueInput | bikersWhereUniqueInput[]
    delete?: bikersWhereUniqueInput | bikersWhereUniqueInput[]
    connect?: bikersWhereUniqueInput | bikersWhereUniqueInput[]
    update?: bikersUpdateWithWhereUniqueWithoutCitiesInput | bikersUpdateWithWhereUniqueWithoutCitiesInput[]
    updateMany?: bikersUpdateManyWithWhereWithoutCitiesInput | bikersUpdateManyWithWhereWithoutCitiesInput[]
    deleteMany?: bikersScalarWhereInput | bikersScalarWhereInput[]
  }

  export type deliveryPricesUpdateManyWithoutCitiesNestedInput = {
    create?: XOR<deliveryPricesCreateWithoutCitiesInput, deliveryPricesUncheckedCreateWithoutCitiesInput> | deliveryPricesCreateWithoutCitiesInput[] | deliveryPricesUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: deliveryPricesCreateOrConnectWithoutCitiesInput | deliveryPricesCreateOrConnectWithoutCitiesInput[]
    upsert?: deliveryPricesUpsertWithWhereUniqueWithoutCitiesInput | deliveryPricesUpsertWithWhereUniqueWithoutCitiesInput[]
    createMany?: deliveryPricesCreateManyCitiesInputEnvelope
    set?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    disconnect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    delete?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    connect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    update?: deliveryPricesUpdateWithWhereUniqueWithoutCitiesInput | deliveryPricesUpdateWithWhereUniqueWithoutCitiesInput[]
    updateMany?: deliveryPricesUpdateManyWithWhereWithoutCitiesInput | deliveryPricesUpdateManyWithWhereWithoutCitiesInput[]
    deleteMany?: deliveryPricesScalarWhereInput | deliveryPricesScalarWhereInput[]
  }

  export type deliveryPricesUpdateManyWithoutDestinationNestedInput = {
    create?: XOR<deliveryPricesCreateWithoutDestinationInput, deliveryPricesUncheckedCreateWithoutDestinationInput> | deliveryPricesCreateWithoutDestinationInput[] | deliveryPricesUncheckedCreateWithoutDestinationInput[]
    connectOrCreate?: deliveryPricesCreateOrConnectWithoutDestinationInput | deliveryPricesCreateOrConnectWithoutDestinationInput[]
    upsert?: deliveryPricesUpsertWithWhereUniqueWithoutDestinationInput | deliveryPricesUpsertWithWhereUniqueWithoutDestinationInput[]
    createMany?: deliveryPricesCreateManyDestinationInputEnvelope
    set?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    disconnect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    delete?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    connect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    update?: deliveryPricesUpdateWithWhereUniqueWithoutDestinationInput | deliveryPricesUpdateWithWhereUniqueWithoutDestinationInput[]
    updateMany?: deliveryPricesUpdateManyWithWhereWithoutDestinationInput | deliveryPricesUpdateManyWithWhereWithoutDestinationInput[]
    deleteMany?: deliveryPricesScalarWhereInput | deliveryPricesScalarWhereInput[]
  }

  export type suburbsUncheckedUpdateManyWithoutCitiesNestedInput = {
    create?: XOR<suburbsCreateWithoutCitiesInput, suburbsUncheckedCreateWithoutCitiesInput> | suburbsCreateWithoutCitiesInput[] | suburbsUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: suburbsCreateOrConnectWithoutCitiesInput | suburbsCreateOrConnectWithoutCitiesInput[]
    upsert?: suburbsUpsertWithWhereUniqueWithoutCitiesInput | suburbsUpsertWithWhereUniqueWithoutCitiesInput[]
    createMany?: suburbsCreateManyCitiesInputEnvelope
    set?: suburbsWhereUniqueInput | suburbsWhereUniqueInput[]
    disconnect?: suburbsWhereUniqueInput | suburbsWhereUniqueInput[]
    delete?: suburbsWhereUniqueInput | suburbsWhereUniqueInput[]
    connect?: suburbsWhereUniqueInput | suburbsWhereUniqueInput[]
    update?: suburbsUpdateWithWhereUniqueWithoutCitiesInput | suburbsUpdateWithWhereUniqueWithoutCitiesInput[]
    updateMany?: suburbsUpdateManyWithWhereWithoutCitiesInput | suburbsUpdateManyWithWhereWithoutCitiesInput[]
    deleteMany?: suburbsScalarWhereInput | suburbsScalarWhereInput[]
  }

  export type usersUncheckedUpdateManyWithoutCitiesNestedInput = {
    create?: XOR<usersCreateWithoutCitiesInput, usersUncheckedCreateWithoutCitiesInput> | usersCreateWithoutCitiesInput[] | usersUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutCitiesInput | usersCreateOrConnectWithoutCitiesInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutCitiesInput | usersUpsertWithWhereUniqueWithoutCitiesInput[]
    createMany?: usersCreateManyCitiesInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutCitiesInput | usersUpdateWithWhereUniqueWithoutCitiesInput[]
    updateMany?: usersUpdateManyWithWhereWithoutCitiesInput | usersUpdateManyWithWhereWithoutCitiesInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type bikersUncheckedUpdateManyWithoutCitiesNestedInput = {
    create?: XOR<bikersCreateWithoutCitiesInput, bikersUncheckedCreateWithoutCitiesInput> | bikersCreateWithoutCitiesInput[] | bikersUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: bikersCreateOrConnectWithoutCitiesInput | bikersCreateOrConnectWithoutCitiesInput[]
    upsert?: bikersUpsertWithWhereUniqueWithoutCitiesInput | bikersUpsertWithWhereUniqueWithoutCitiesInput[]
    createMany?: bikersCreateManyCitiesInputEnvelope
    set?: bikersWhereUniqueInput | bikersWhereUniqueInput[]
    disconnect?: bikersWhereUniqueInput | bikersWhereUniqueInput[]
    delete?: bikersWhereUniqueInput | bikersWhereUniqueInput[]
    connect?: bikersWhereUniqueInput | bikersWhereUniqueInput[]
    update?: bikersUpdateWithWhereUniqueWithoutCitiesInput | bikersUpdateWithWhereUniqueWithoutCitiesInput[]
    updateMany?: bikersUpdateManyWithWhereWithoutCitiesInput | bikersUpdateManyWithWhereWithoutCitiesInput[]
    deleteMany?: bikersScalarWhereInput | bikersScalarWhereInput[]
  }

  export type deliveryPricesUncheckedUpdateManyWithoutCitiesNestedInput = {
    create?: XOR<deliveryPricesCreateWithoutCitiesInput, deliveryPricesUncheckedCreateWithoutCitiesInput> | deliveryPricesCreateWithoutCitiesInput[] | deliveryPricesUncheckedCreateWithoutCitiesInput[]
    connectOrCreate?: deliveryPricesCreateOrConnectWithoutCitiesInput | deliveryPricesCreateOrConnectWithoutCitiesInput[]
    upsert?: deliveryPricesUpsertWithWhereUniqueWithoutCitiesInput | deliveryPricesUpsertWithWhereUniqueWithoutCitiesInput[]
    createMany?: deliveryPricesCreateManyCitiesInputEnvelope
    set?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    disconnect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    delete?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    connect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    update?: deliveryPricesUpdateWithWhereUniqueWithoutCitiesInput | deliveryPricesUpdateWithWhereUniqueWithoutCitiesInput[]
    updateMany?: deliveryPricesUpdateManyWithWhereWithoutCitiesInput | deliveryPricesUpdateManyWithWhereWithoutCitiesInput[]
    deleteMany?: deliveryPricesScalarWhereInput | deliveryPricesScalarWhereInput[]
  }

  export type deliveryPricesUncheckedUpdateManyWithoutDestinationNestedInput = {
    create?: XOR<deliveryPricesCreateWithoutDestinationInput, deliveryPricesUncheckedCreateWithoutDestinationInput> | deliveryPricesCreateWithoutDestinationInput[] | deliveryPricesUncheckedCreateWithoutDestinationInput[]
    connectOrCreate?: deliveryPricesCreateOrConnectWithoutDestinationInput | deliveryPricesCreateOrConnectWithoutDestinationInput[]
    upsert?: deliveryPricesUpsertWithWhereUniqueWithoutDestinationInput | deliveryPricesUpsertWithWhereUniqueWithoutDestinationInput[]
    createMany?: deliveryPricesCreateManyDestinationInputEnvelope
    set?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    disconnect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    delete?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    connect?: deliveryPricesWhereUniqueInput | deliveryPricesWhereUniqueInput[]
    update?: deliveryPricesUpdateWithWhereUniqueWithoutDestinationInput | deliveryPricesUpdateWithWhereUniqueWithoutDestinationInput[]
    updateMany?: deliveryPricesUpdateManyWithWhereWithoutDestinationInput | deliveryPricesUpdateManyWithWhereWithoutDestinationInput[]
    deleteMany?: deliveryPricesScalarWhereInput | deliveryPricesScalarWhereInput[]
  }

  export type citiesCreateNestedOneWithoutDestinationdeliveryPricesInput = {
    create?: XOR<citiesCreateWithoutDestinationdeliveryPricesInput, citiesUncheckedCreateWithoutDestinationdeliveryPricesInput>
    connectOrCreate?: citiesCreateOrConnectWithoutDestinationdeliveryPricesInput
    connect?: citiesWhereUniqueInput
  }

  export type citiesCreateNestedOneWithoutCitydeliveryPricesInput = {
    create?: XOR<citiesCreateWithoutCitydeliveryPricesInput, citiesUncheckedCreateWithoutCitydeliveryPricesInput>
    connectOrCreate?: citiesCreateOrConnectWithoutCitydeliveryPricesInput
    connect?: citiesWhereUniqueInput
  }

  export type suburbsCreateNestedOneWithoutDeliveryPricesInput = {
    create?: XOR<suburbsCreateWithoutDeliveryPricesInput, suburbsUncheckedCreateWithoutDeliveryPricesInput>
    connectOrCreate?: suburbsCreateOrConnectWithoutDeliveryPricesInput
    connect?: suburbsWhereUniqueInput
  }

  export type citiesUpdateOneWithoutDestinationdeliveryPricesNestedInput = {
    create?: XOR<citiesCreateWithoutDestinationdeliveryPricesInput, citiesUncheckedCreateWithoutDestinationdeliveryPricesInput>
    connectOrCreate?: citiesCreateOrConnectWithoutDestinationdeliveryPricesInput
    upsert?: citiesUpsertWithoutDestinationdeliveryPricesInput
    disconnect?: citiesWhereInput | boolean
    delete?: citiesWhereInput | boolean
    connect?: citiesWhereUniqueInput
    update?: XOR<XOR<citiesUpdateToOneWithWhereWithoutDestinationdeliveryPricesInput, citiesUpdateWithoutDestinationdeliveryPricesInput>, citiesUncheckedUpdateWithoutDestinationdeliveryPricesInput>
  }

  export type citiesUpdateOneWithoutCitydeliveryPricesNestedInput = {
    create?: XOR<citiesCreateWithoutCitydeliveryPricesInput, citiesUncheckedCreateWithoutCitydeliveryPricesInput>
    connectOrCreate?: citiesCreateOrConnectWithoutCitydeliveryPricesInput
    upsert?: citiesUpsertWithoutCitydeliveryPricesInput
    disconnect?: citiesWhereInput | boolean
    delete?: citiesWhereInput | boolean
    connect?: citiesWhereUniqueInput
    update?: XOR<XOR<citiesUpdateToOneWithWhereWithoutCitydeliveryPricesInput, citiesUpdateWithoutCitydeliveryPricesInput>, citiesUncheckedUpdateWithoutCitydeliveryPricesInput>
  }

  export type suburbsUpdateOneWithoutDeliveryPricesNestedInput = {
    create?: XOR<suburbsCreateWithoutDeliveryPricesInput, suburbsUncheckedCreateWithoutDeliveryPricesInput>
    connectOrCreate?: suburbsCreateOrConnectWithoutDeliveryPricesInput
    upsert?: suburbsUpsertWithoutDeliveryPricesInput
    disconnect?: suburbsWhereInput | boolean
    delete?: suburbsWhereInput | boolean
    connect?: suburbsWhereUniqueInput
    update?: XOR<XOR<suburbsUpdateToOneWithWhereWithoutDeliveryPricesInput, suburbsUpdateWithoutDeliveryPricesInput>, suburbsUncheckedUpdateWithoutDeliveryPricesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumOrderTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderType | EnumOrderTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOrderTypeNullableFilter<$PrismaModel> | $Enums.OrderType | null
  }

  export type NestedEnumOrderTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderType | EnumOrderTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumOrderTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.OrderType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumOrderTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumOrderTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumpaymentByFilter<$PrismaModel = never> = {
    equals?: $Enums.paymentBy | EnumpaymentByFieldRefInput<$PrismaModel>
    in?: $Enums.paymentBy[] | ListEnumpaymentByFieldRefInput<$PrismaModel>
    notIn?: $Enums.paymentBy[] | ListEnumpaymentByFieldRefInput<$PrismaModel>
    not?: NestedEnumpaymentByFilter<$PrismaModel> | $Enums.paymentBy
  }

  export type NestedEnumstatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumstatusNullableFilter<$PrismaModel> | $Enums.status | null
  }

  export type NestedEnumpaymentByWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.paymentBy | EnumpaymentByFieldRefInput<$PrismaModel>
    in?: $Enums.paymentBy[] | ListEnumpaymentByFieldRefInput<$PrismaModel>
    notIn?: $Enums.paymentBy[] | ListEnumpaymentByFieldRefInput<$PrismaModel>
    not?: NestedEnumpaymentByWithAggregatesFilter<$PrismaModel> | $Enums.paymentBy
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumpaymentByFilter<$PrismaModel>
    _max?: NestedEnumpaymentByFilter<$PrismaModel>
  }

  export type NestedEnumstatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumstatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumstatusNullableFilter<$PrismaModel>
    _max?: NestedEnumstatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumstatusFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumstatusFilter<$PrismaModel> | $Enums.status
  }

  export type NestedEnumstatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumstatusWithAggregatesFilter<$PrismaModel> | $Enums.status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatusFilter<$PrismaModel>
    _max?: NestedEnumstatusFilter<$PrismaModel>
  }

  export type citiesCreateWithoutUsersInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsCreateNestedManyWithoutCitiesInput
    biker?: bikersCreateNestedManyWithoutCitiesInput
    citydeliveryPrices?: deliveryPricesCreateNestedManyWithoutCitiesInput
    destinationdeliveryPrices?: deliveryPricesCreateNestedManyWithoutDestinationInput
  }

  export type citiesUncheckedCreateWithoutUsersInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsUncheckedCreateNestedManyWithoutCitiesInput
    biker?: bikersUncheckedCreateNestedManyWithoutCitiesInput
    citydeliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutCitiesInput
    destinationdeliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutDestinationInput
  }

  export type citiesCreateOrConnectWithoutUsersInput = {
    where: citiesWhereUniqueInput
    create: XOR<citiesCreateWithoutUsersInput, citiesUncheckedCreateWithoutUsersInput>
  }

  export type citiesUpsertWithoutUsersInput = {
    update: XOR<citiesUpdateWithoutUsersInput, citiesUncheckedUpdateWithoutUsersInput>
    create: XOR<citiesCreateWithoutUsersInput, citiesUncheckedCreateWithoutUsersInput>
    where?: citiesWhereInput
  }

  export type citiesUpdateToOneWithWhereWithoutUsersInput = {
    where?: citiesWhereInput
    data: XOR<citiesUpdateWithoutUsersInput, citiesUncheckedUpdateWithoutUsersInput>
  }

  export type citiesUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUpdateManyWithoutCitiesNestedInput
    biker?: bikersUpdateManyWithoutCitiesNestedInput
    citydeliveryPrices?: deliveryPricesUpdateManyWithoutCitiesNestedInput
    destinationdeliveryPrices?: deliveryPricesUpdateManyWithoutDestinationNestedInput
  }

  export type citiesUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUncheckedUpdateManyWithoutCitiesNestedInput
    biker?: bikersUncheckedUpdateManyWithoutCitiesNestedInput
    citydeliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutCitiesNestedInput
    destinationdeliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutDestinationNestedInput
  }

  export type orderPackagesCreateWithoutPickupBikerInput = {
    id?: string
    orderCode: string
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: ordersCreateNestedOneWithoutPackagesInput
    receiver?: receiversCreateNestedOneWithoutPackagesInput
    suburb?: suburbsCreateNestedOneWithoutOrderPackagesInput
    deliverBiker?: bikersCreateNestedOneWithoutPackagesDeliveryBikersInput
    packageHistories?: packageHistoriesCreateNestedManyWithoutPackagesInput
  }

  export type orderPackagesUncheckedCreateWithoutPickupBikerInput = {
    id?: string
    orderId: string
    orderCode: string
    receiverId?: string | null
    deliveryLocation?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    deliverBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packageHistories?: packageHistoriesUncheckedCreateNestedManyWithoutPackagesInput
  }

  export type orderPackagesCreateOrConnectWithoutPickupBikerInput = {
    where: orderPackagesWhereUniqueInput
    create: XOR<orderPackagesCreateWithoutPickupBikerInput, orderPackagesUncheckedCreateWithoutPickupBikerInput>
  }

  export type orderPackagesCreateManyPickupBikerInputEnvelope = {
    data: orderPackagesCreateManyPickupBikerInput | orderPackagesCreateManyPickupBikerInput[]
    skipDuplicates?: boolean
  }

  export type orderPackagesCreateWithoutDeliverBikerInput = {
    id?: string
    orderCode: string
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: ordersCreateNestedOneWithoutPackagesInput
    receiver?: receiversCreateNestedOneWithoutPackagesInput
    suburb?: suburbsCreateNestedOneWithoutOrderPackagesInput
    pickupBiker?: bikersCreateNestedOneWithoutPackagesPickupBikersInput
    packageHistories?: packageHistoriesCreateNestedManyWithoutPackagesInput
  }

  export type orderPackagesUncheckedCreateWithoutDeliverBikerInput = {
    id?: string
    orderId: string
    orderCode: string
    receiverId?: string | null
    deliveryLocation?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    pickupBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packageHistories?: packageHistoriesUncheckedCreateNestedManyWithoutPackagesInput
  }

  export type orderPackagesCreateOrConnectWithoutDeliverBikerInput = {
    where: orderPackagesWhereUniqueInput
    create: XOR<orderPackagesCreateWithoutDeliverBikerInput, orderPackagesUncheckedCreateWithoutDeliverBikerInput>
  }

  export type orderPackagesCreateManyDeliverBikerInputEnvelope = {
    data: orderPackagesCreateManyDeliverBikerInput | orderPackagesCreateManyDeliverBikerInput[]
    skipDuplicates?: boolean
  }

  export type citiesCreateWithoutBikerInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsCreateNestedManyWithoutCitiesInput
    users?: usersCreateNestedManyWithoutCitiesInput
    citydeliveryPrices?: deliveryPricesCreateNestedManyWithoutCitiesInput
    destinationdeliveryPrices?: deliveryPricesCreateNestedManyWithoutDestinationInput
  }

  export type citiesUncheckedCreateWithoutBikerInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsUncheckedCreateNestedManyWithoutCitiesInput
    users?: usersUncheckedCreateNestedManyWithoutCitiesInput
    citydeliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutCitiesInput
    destinationdeliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutDestinationInput
  }

  export type citiesCreateOrConnectWithoutBikerInput = {
    where: citiesWhereUniqueInput
    create: XOR<citiesCreateWithoutBikerInput, citiesUncheckedCreateWithoutBikerInput>
  }

  export type orderPackagesUpsertWithWhereUniqueWithoutPickupBikerInput = {
    where: orderPackagesWhereUniqueInput
    update: XOR<orderPackagesUpdateWithoutPickupBikerInput, orderPackagesUncheckedUpdateWithoutPickupBikerInput>
    create: XOR<orderPackagesCreateWithoutPickupBikerInput, orderPackagesUncheckedCreateWithoutPickupBikerInput>
  }

  export type orderPackagesUpdateWithWhereUniqueWithoutPickupBikerInput = {
    where: orderPackagesWhereUniqueInput
    data: XOR<orderPackagesUpdateWithoutPickupBikerInput, orderPackagesUncheckedUpdateWithoutPickupBikerInput>
  }

  export type orderPackagesUpdateManyWithWhereWithoutPickupBikerInput = {
    where: orderPackagesScalarWhereInput
    data: XOR<orderPackagesUpdateManyMutationInput, orderPackagesUncheckedUpdateManyWithoutPickupBikerInput>
  }

  export type orderPackagesScalarWhereInput = {
    AND?: orderPackagesScalarWhereInput | orderPackagesScalarWhereInput[]
    OR?: orderPackagesScalarWhereInput[]
    NOT?: orderPackagesScalarWhereInput | orderPackagesScalarWhereInput[]
    id?: StringFilter<"orderPackages"> | string
    orderId?: StringFilter<"orderPackages"> | string
    orderCode?: StringFilter<"orderPackages"> | string
    receiverId?: StringNullableFilter<"orderPackages"> | string | null
    deliveryLocation?: StringNullableFilter<"orderPackages"> | string | null
    details?: StringNullableFilter<"orderPackages"> | string | null
    paymentBy?: EnumpaymentByFilter<"orderPackages"> | $Enums.paymentBy
    estimatedWeight?: FloatFilter<"orderPackages"> | number
    baseWeight?: IntFilter<"orderPackages"> | number
    extraWeight?: IntFilter<"orderPackages"> | number
    valueOfPackage?: FloatFilter<"orderPackages"> | number
    itemCost?: FloatFilter<"orderPackages"> | number
    deliveryFee?: FloatFilter<"orderPackages"> | number
    itemImage?: StringNullableFilter<"orderPackages"> | string | null
    pickupBikerId?: StringNullableFilter<"orderPackages"> | string | null
    deliverBikerId?: StringNullableFilter<"orderPackages"> | string | null
    status?: EnumstatusNullableFilter<"orderPackages"> | $Enums.status | null
    secondReceipientName?: StringNullableFilter<"orderPackages"> | string | null
    secondReceipientNumber?: StringNullableFilter<"orderPackages"> | string | null
    reason?: StringNullableFilter<"orderPackages"> | string | null
    pickup_share?: FloatFilter<"orderPackages"> | number
    delivery_share?: FloatFilter<"orderPackages"> | number
    transit_share?: FloatFilter<"orderPackages"> | number
    system_share?: FloatFilter<"orderPackages"> | number
    qcs_share?: FloatFilter<"orderPackages"> | number
    del_flg?: BoolFilter<"orderPackages"> | boolean
    insured?: BoolFilter<"orderPackages"> | boolean
    createdAt?: DateTimeFilter<"orderPackages"> | Date | string
    updatedAt?: DateTimeFilter<"orderPackages"> | Date | string
  }

  export type orderPackagesUpsertWithWhereUniqueWithoutDeliverBikerInput = {
    where: orderPackagesWhereUniqueInput
    update: XOR<orderPackagesUpdateWithoutDeliverBikerInput, orderPackagesUncheckedUpdateWithoutDeliverBikerInput>
    create: XOR<orderPackagesCreateWithoutDeliverBikerInput, orderPackagesUncheckedCreateWithoutDeliverBikerInput>
  }

  export type orderPackagesUpdateWithWhereUniqueWithoutDeliverBikerInput = {
    where: orderPackagesWhereUniqueInput
    data: XOR<orderPackagesUpdateWithoutDeliverBikerInput, orderPackagesUncheckedUpdateWithoutDeliverBikerInput>
  }

  export type orderPackagesUpdateManyWithWhereWithoutDeliverBikerInput = {
    where: orderPackagesScalarWhereInput
    data: XOR<orderPackagesUpdateManyMutationInput, orderPackagesUncheckedUpdateManyWithoutDeliverBikerInput>
  }

  export type citiesUpsertWithoutBikerInput = {
    update: XOR<citiesUpdateWithoutBikerInput, citiesUncheckedUpdateWithoutBikerInput>
    create: XOR<citiesCreateWithoutBikerInput, citiesUncheckedCreateWithoutBikerInput>
    where?: citiesWhereInput
  }

  export type citiesUpdateToOneWithWhereWithoutBikerInput = {
    where?: citiesWhereInput
    data: XOR<citiesUpdateWithoutBikerInput, citiesUncheckedUpdateWithoutBikerInput>
  }

  export type citiesUpdateWithoutBikerInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUpdateManyWithoutCitiesNestedInput
    users?: usersUpdateManyWithoutCitiesNestedInput
    citydeliveryPrices?: deliveryPricesUpdateManyWithoutCitiesNestedInput
    destinationdeliveryPrices?: deliveryPricesUpdateManyWithoutDestinationNestedInput
  }

  export type citiesUncheckedUpdateWithoutBikerInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUncheckedUpdateManyWithoutCitiesNestedInput
    users?: usersUncheckedUpdateManyWithoutCitiesNestedInput
    citydeliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutCitiesNestedInput
    destinationdeliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutDestinationNestedInput
  }

  export type suburbsCreateWithoutSendersInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cities?: citiesCreateNestedOneWithoutSuburbsInput
    deliveryPrices?: deliveryPricesCreateNestedManyWithoutSuburbsInput
    orders?: ordersCreateNestedManyWithoutSuburbsInput
    orderPackages?: orderPackagesCreateNestedManyWithoutSuburbInput
    receivers?: receiversCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsUncheckedCreateWithoutSendersInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cityId?: string | null
    deliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutSuburbsInput
    orders?: ordersUncheckedCreateNestedManyWithoutSuburbsInput
    orderPackages?: orderPackagesUncheckedCreateNestedManyWithoutSuburbInput
    receivers?: receiversUncheckedCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsCreateOrConnectWithoutSendersInput = {
    where: suburbsWhereUniqueInput
    create: XOR<suburbsCreateWithoutSendersInput, suburbsUncheckedCreateWithoutSendersInput>
  }

  export type receiversCreateWithoutSendersInput = {
    id?: string
    fullname: string
    telephone: string
    email?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsCreateNestedOneWithoutReceiversInput
    packages?: orderPackagesCreateNestedManyWithoutReceiverInput
  }

  export type receiversUncheckedCreateWithoutSendersInput = {
    id?: string
    fullname: string
    telephone: string
    email?: string | null
    deliveryLocation?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: orderPackagesUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type receiversCreateOrConnectWithoutSendersInput = {
    where: receiversWhereUniqueInput
    create: XOR<receiversCreateWithoutSendersInput, receiversUncheckedCreateWithoutSendersInput>
  }

  export type receiversCreateManySendersInputEnvelope = {
    data: receiversCreateManySendersInput | receiversCreateManySendersInput[]
    skipDuplicates?: boolean
  }

  export type ordersCreateWithoutSenderInput = {
    orderCode: string
    orderType?: $Enums.OrderType | null
    grandAmount?: number
    discountAmount?: number
    discountPercentage?: number
    totalAmount?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsCreateNestedOneWithoutOrdersInput
    packages?: orderPackagesCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutSenderInput = {
    orderCode: string
    orderType?: $Enums.OrderType | null
    grandAmount?: number
    discountAmount?: number
    discountPercentage?: number
    totalAmount?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pickUpLocation?: string | null
    packages?: orderPackagesUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutSenderInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutSenderInput, ordersUncheckedCreateWithoutSenderInput>
  }

  export type ordersCreateManySenderInputEnvelope = {
    data: ordersCreateManySenderInput | ordersCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type suburbsUpsertWithoutSendersInput = {
    update: XOR<suburbsUpdateWithoutSendersInput, suburbsUncheckedUpdateWithoutSendersInput>
    create: XOR<suburbsCreateWithoutSendersInput, suburbsUncheckedCreateWithoutSendersInput>
    where?: suburbsWhereInput
  }

  export type suburbsUpdateToOneWithWhereWithoutSendersInput = {
    where?: suburbsWhereInput
    data: XOR<suburbsUpdateWithoutSendersInput, suburbsUncheckedUpdateWithoutSendersInput>
  }

  export type suburbsUpdateWithoutSendersInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: citiesUpdateOneWithoutSuburbsNestedInput
    deliveryPrices?: deliveryPricesUpdateManyWithoutSuburbsNestedInput
    orders?: ordersUpdateManyWithoutSuburbsNestedInput
    orderPackages?: orderPackagesUpdateManyWithoutSuburbNestedInput
    receivers?: receiversUpdateManyWithoutSuburbsNestedInput
  }

  export type suburbsUncheckedUpdateWithoutSendersInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutSuburbsNestedInput
    orders?: ordersUncheckedUpdateManyWithoutSuburbsNestedInput
    orderPackages?: orderPackagesUncheckedUpdateManyWithoutSuburbNestedInput
    receivers?: receiversUncheckedUpdateManyWithoutSuburbsNestedInput
  }

  export type receiversUpsertWithWhereUniqueWithoutSendersInput = {
    where: receiversWhereUniqueInput
    update: XOR<receiversUpdateWithoutSendersInput, receiversUncheckedUpdateWithoutSendersInput>
    create: XOR<receiversCreateWithoutSendersInput, receiversUncheckedCreateWithoutSendersInput>
  }

  export type receiversUpdateWithWhereUniqueWithoutSendersInput = {
    where: receiversWhereUniqueInput
    data: XOR<receiversUpdateWithoutSendersInput, receiversUncheckedUpdateWithoutSendersInput>
  }

  export type receiversUpdateManyWithWhereWithoutSendersInput = {
    where: receiversScalarWhereInput
    data: XOR<receiversUpdateManyMutationInput, receiversUncheckedUpdateManyWithoutSendersInput>
  }

  export type receiversScalarWhereInput = {
    AND?: receiversScalarWhereInput | receiversScalarWhereInput[]
    OR?: receiversScalarWhereInput[]
    NOT?: receiversScalarWhereInput | receiversScalarWhereInput[]
    id?: StringFilter<"receivers"> | string
    fullname?: StringFilter<"receivers"> | string
    telephone?: StringFilter<"receivers"> | string
    email?: StringNullableFilter<"receivers"> | string | null
    deliveryLocation?: StringNullableFilter<"receivers"> | string | null
    del_flg?: IntFilter<"receivers"> | number
    createdAt?: DateTimeFilter<"receivers"> | Date | string
    updatedAt?: DateTimeFilter<"receivers"> | Date | string
    senderId?: StringNullableFilter<"receivers"> | string | null
  }

  export type ordersUpsertWithWhereUniqueWithoutSenderInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutSenderInput, ordersUncheckedUpdateWithoutSenderInput>
    create: XOR<ordersCreateWithoutSenderInput, ordersUncheckedCreateWithoutSenderInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutSenderInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutSenderInput, ordersUncheckedUpdateWithoutSenderInput>
  }

  export type ordersUpdateManyWithWhereWithoutSenderInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutSenderInput>
  }

  export type ordersScalarWhereInput = {
    AND?: ordersScalarWhereInput | ordersScalarWhereInput[]
    OR?: ordersScalarWhereInput[]
    NOT?: ordersScalarWhereInput | ordersScalarWhereInput[]
    orderCode?: StringFilter<"orders"> | string
    senderId?: StringNullableFilter<"orders"> | string | null
    orderType?: EnumOrderTypeNullableFilter<"orders"> | $Enums.OrderType | null
    grandAmount?: FloatFilter<"orders"> | number
    discountAmount?: FloatFilter<"orders"> | number
    discountPercentage?: FloatFilter<"orders"> | number
    totalAmount?: FloatFilter<"orders"> | number
    del_flg?: BoolFilter<"orders"> | boolean
    createdAt?: DateTimeFilter<"orders"> | Date | string
    updatedAt?: DateTimeFilter<"orders"> | Date | string
    pickUpLocation?: StringNullableFilter<"orders"> | string | null
  }

  export type suburbsCreateWithoutReceiversInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cities?: citiesCreateNestedOneWithoutSuburbsInput
    deliveryPrices?: deliveryPricesCreateNestedManyWithoutSuburbsInput
    orders?: ordersCreateNestedManyWithoutSuburbsInput
    orderPackages?: orderPackagesCreateNestedManyWithoutSuburbInput
    senders?: sendersCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsUncheckedCreateWithoutReceiversInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cityId?: string | null
    deliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutSuburbsInput
    orders?: ordersUncheckedCreateNestedManyWithoutSuburbsInput
    orderPackages?: orderPackagesUncheckedCreateNestedManyWithoutSuburbInput
    senders?: sendersUncheckedCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsCreateOrConnectWithoutReceiversInput = {
    where: suburbsWhereUniqueInput
    create: XOR<suburbsCreateWithoutReceiversInput, suburbsUncheckedCreateWithoutReceiversInput>
  }

  export type sendersCreateWithoutReceiversInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    confirmed?: boolean
    isDormat?: boolean
    code?: string | null
    expiration?: Date | string | null
    lastLogin?: Date | string
    rewardPoints?: number
    redeemedPoints?: number
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsCreateNestedOneWithoutSendersInput
    orders?: ordersCreateNestedManyWithoutSenderInput
  }

  export type sendersUncheckedCreateWithoutReceiversInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    pickUpLocation?: string | null
    password: string
    confirmed?: boolean
    isDormat?: boolean
    code?: string | null
    expiration?: Date | string | null
    lastLogin?: Date | string
    rewardPoints?: number
    redeemedPoints?: number
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: ordersUncheckedCreateNestedManyWithoutSenderInput
  }

  export type sendersCreateOrConnectWithoutReceiversInput = {
    where: sendersWhereUniqueInput
    create: XOR<sendersCreateWithoutReceiversInput, sendersUncheckedCreateWithoutReceiversInput>
  }

  export type orderPackagesCreateWithoutReceiverInput = {
    id?: string
    orderCode: string
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: ordersCreateNestedOneWithoutPackagesInput
    suburb?: suburbsCreateNestedOneWithoutOrderPackagesInput
    pickupBiker?: bikersCreateNestedOneWithoutPackagesPickupBikersInput
    deliverBiker?: bikersCreateNestedOneWithoutPackagesDeliveryBikersInput
    packageHistories?: packageHistoriesCreateNestedManyWithoutPackagesInput
  }

  export type orderPackagesUncheckedCreateWithoutReceiverInput = {
    id?: string
    orderId: string
    orderCode: string
    deliveryLocation?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    pickupBikerId?: string | null
    deliverBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packageHistories?: packageHistoriesUncheckedCreateNestedManyWithoutPackagesInput
  }

  export type orderPackagesCreateOrConnectWithoutReceiverInput = {
    where: orderPackagesWhereUniqueInput
    create: XOR<orderPackagesCreateWithoutReceiverInput, orderPackagesUncheckedCreateWithoutReceiverInput>
  }

  export type orderPackagesCreateManyReceiverInputEnvelope = {
    data: orderPackagesCreateManyReceiverInput | orderPackagesCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type suburbsUpsertWithoutReceiversInput = {
    update: XOR<suburbsUpdateWithoutReceiversInput, suburbsUncheckedUpdateWithoutReceiversInput>
    create: XOR<suburbsCreateWithoutReceiversInput, suburbsUncheckedCreateWithoutReceiversInput>
    where?: suburbsWhereInput
  }

  export type suburbsUpdateToOneWithWhereWithoutReceiversInput = {
    where?: suburbsWhereInput
    data: XOR<suburbsUpdateWithoutReceiversInput, suburbsUncheckedUpdateWithoutReceiversInput>
  }

  export type suburbsUpdateWithoutReceiversInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: citiesUpdateOneWithoutSuburbsNestedInput
    deliveryPrices?: deliveryPricesUpdateManyWithoutSuburbsNestedInput
    orders?: ordersUpdateManyWithoutSuburbsNestedInput
    orderPackages?: orderPackagesUpdateManyWithoutSuburbNestedInput
    senders?: sendersUpdateManyWithoutSuburbsNestedInput
  }

  export type suburbsUncheckedUpdateWithoutReceiversInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutSuburbsNestedInput
    orders?: ordersUncheckedUpdateManyWithoutSuburbsNestedInput
    orderPackages?: orderPackagesUncheckedUpdateManyWithoutSuburbNestedInput
    senders?: sendersUncheckedUpdateManyWithoutSuburbsNestedInput
  }

  export type sendersUpsertWithoutReceiversInput = {
    update: XOR<sendersUpdateWithoutReceiversInput, sendersUncheckedUpdateWithoutReceiversInput>
    create: XOR<sendersCreateWithoutReceiversInput, sendersUncheckedCreateWithoutReceiversInput>
    where?: sendersWhereInput
  }

  export type sendersUpdateToOneWithWhereWithoutReceiversInput = {
    where?: sendersWhereInput
    data: XOR<sendersUpdateWithoutReceiversInput, sendersUncheckedUpdateWithoutReceiversInput>
  }

  export type sendersUpdateWithoutReceiversInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    isDormat?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardPoints?: IntFieldUpdateOperationsInput | number
    redeemedPoints?: IntFieldUpdateOperationsInput | number
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUpdateOneWithoutSendersNestedInput
    orders?: ordersUpdateManyWithoutSenderNestedInput
  }

  export type sendersUncheckedUpdateWithoutReceiversInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    pickUpLocation?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    isDormat?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardPoints?: IntFieldUpdateOperationsInput | number
    redeemedPoints?: IntFieldUpdateOperationsInput | number
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type orderPackagesUpsertWithWhereUniqueWithoutReceiverInput = {
    where: orderPackagesWhereUniqueInput
    update: XOR<orderPackagesUpdateWithoutReceiverInput, orderPackagesUncheckedUpdateWithoutReceiverInput>
    create: XOR<orderPackagesCreateWithoutReceiverInput, orderPackagesUncheckedCreateWithoutReceiverInput>
  }

  export type orderPackagesUpdateWithWhereUniqueWithoutReceiverInput = {
    where: orderPackagesWhereUniqueInput
    data: XOR<orderPackagesUpdateWithoutReceiverInput, orderPackagesUncheckedUpdateWithoutReceiverInput>
  }

  export type orderPackagesUpdateManyWithWhereWithoutReceiverInput = {
    where: orderPackagesScalarWhereInput
    data: XOR<orderPackagesUpdateManyMutationInput, orderPackagesUncheckedUpdateManyWithoutReceiverInput>
  }

  export type sendersCreateWithoutOrdersInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    confirmed?: boolean
    isDormat?: boolean
    code?: string | null
    expiration?: Date | string | null
    lastLogin?: Date | string
    rewardPoints?: number
    redeemedPoints?: number
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsCreateNestedOneWithoutSendersInput
    receivers?: receiversCreateNestedManyWithoutSendersInput
  }

  export type sendersUncheckedCreateWithoutOrdersInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    pickUpLocation?: string | null
    password: string
    confirmed?: boolean
    isDormat?: boolean
    code?: string | null
    expiration?: Date | string | null
    lastLogin?: Date | string
    rewardPoints?: number
    redeemedPoints?: number
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    receivers?: receiversUncheckedCreateNestedManyWithoutSendersInput
  }

  export type sendersCreateOrConnectWithoutOrdersInput = {
    where: sendersWhereUniqueInput
    create: XOR<sendersCreateWithoutOrdersInput, sendersUncheckedCreateWithoutOrdersInput>
  }

  export type suburbsCreateWithoutOrdersInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cities?: citiesCreateNestedOneWithoutSuburbsInput
    deliveryPrices?: deliveryPricesCreateNestedManyWithoutSuburbsInput
    orderPackages?: orderPackagesCreateNestedManyWithoutSuburbInput
    senders?: sendersCreateNestedManyWithoutSuburbsInput
    receivers?: receiversCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsUncheckedCreateWithoutOrdersInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cityId?: string | null
    deliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutSuburbsInput
    orderPackages?: orderPackagesUncheckedCreateNestedManyWithoutSuburbInput
    senders?: sendersUncheckedCreateNestedManyWithoutSuburbsInput
    receivers?: receiversUncheckedCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsCreateOrConnectWithoutOrdersInput = {
    where: suburbsWhereUniqueInput
    create: XOR<suburbsCreateWithoutOrdersInput, suburbsUncheckedCreateWithoutOrdersInput>
  }

  export type orderPackagesCreateWithoutOrdersInput = {
    id?: string
    orderCode: string
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    receiver?: receiversCreateNestedOneWithoutPackagesInput
    suburb?: suburbsCreateNestedOneWithoutOrderPackagesInput
    pickupBiker?: bikersCreateNestedOneWithoutPackagesPickupBikersInput
    deliverBiker?: bikersCreateNestedOneWithoutPackagesDeliveryBikersInput
    packageHistories?: packageHistoriesCreateNestedManyWithoutPackagesInput
  }

  export type orderPackagesUncheckedCreateWithoutOrdersInput = {
    id?: string
    orderCode: string
    receiverId?: string | null
    deliveryLocation?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    pickupBikerId?: string | null
    deliverBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packageHistories?: packageHistoriesUncheckedCreateNestedManyWithoutPackagesInput
  }

  export type orderPackagesCreateOrConnectWithoutOrdersInput = {
    where: orderPackagesWhereUniqueInput
    create: XOR<orderPackagesCreateWithoutOrdersInput, orderPackagesUncheckedCreateWithoutOrdersInput>
  }

  export type orderPackagesCreateManyOrdersInputEnvelope = {
    data: orderPackagesCreateManyOrdersInput | orderPackagesCreateManyOrdersInput[]
    skipDuplicates?: boolean
  }

  export type sendersUpsertWithoutOrdersInput = {
    update: XOR<sendersUpdateWithoutOrdersInput, sendersUncheckedUpdateWithoutOrdersInput>
    create: XOR<sendersCreateWithoutOrdersInput, sendersUncheckedCreateWithoutOrdersInput>
    where?: sendersWhereInput
  }

  export type sendersUpdateToOneWithWhereWithoutOrdersInput = {
    where?: sendersWhereInput
    data: XOR<sendersUpdateWithoutOrdersInput, sendersUncheckedUpdateWithoutOrdersInput>
  }

  export type sendersUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    isDormat?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardPoints?: IntFieldUpdateOperationsInput | number
    redeemedPoints?: IntFieldUpdateOperationsInput | number
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUpdateOneWithoutSendersNestedInput
    receivers?: receiversUpdateManyWithoutSendersNestedInput
  }

  export type sendersUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    pickUpLocation?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    isDormat?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardPoints?: IntFieldUpdateOperationsInput | number
    redeemedPoints?: IntFieldUpdateOperationsInput | number
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivers?: receiversUncheckedUpdateManyWithoutSendersNestedInput
  }

  export type suburbsUpsertWithoutOrdersInput = {
    update: XOR<suburbsUpdateWithoutOrdersInput, suburbsUncheckedUpdateWithoutOrdersInput>
    create: XOR<suburbsCreateWithoutOrdersInput, suburbsUncheckedCreateWithoutOrdersInput>
    where?: suburbsWhereInput
  }

  export type suburbsUpdateToOneWithWhereWithoutOrdersInput = {
    where?: suburbsWhereInput
    data: XOR<suburbsUpdateWithoutOrdersInput, suburbsUncheckedUpdateWithoutOrdersInput>
  }

  export type suburbsUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: citiesUpdateOneWithoutSuburbsNestedInput
    deliveryPrices?: deliveryPricesUpdateManyWithoutSuburbsNestedInput
    orderPackages?: orderPackagesUpdateManyWithoutSuburbNestedInput
    senders?: sendersUpdateManyWithoutSuburbsNestedInput
    receivers?: receiversUpdateManyWithoutSuburbsNestedInput
  }

  export type suburbsUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutSuburbsNestedInput
    orderPackages?: orderPackagesUncheckedUpdateManyWithoutSuburbNestedInput
    senders?: sendersUncheckedUpdateManyWithoutSuburbsNestedInput
    receivers?: receiversUncheckedUpdateManyWithoutSuburbsNestedInput
  }

  export type orderPackagesUpsertWithWhereUniqueWithoutOrdersInput = {
    where: orderPackagesWhereUniqueInput
    update: XOR<orderPackagesUpdateWithoutOrdersInput, orderPackagesUncheckedUpdateWithoutOrdersInput>
    create: XOR<orderPackagesCreateWithoutOrdersInput, orderPackagesUncheckedCreateWithoutOrdersInput>
  }

  export type orderPackagesUpdateWithWhereUniqueWithoutOrdersInput = {
    where: orderPackagesWhereUniqueInput
    data: XOR<orderPackagesUpdateWithoutOrdersInput, orderPackagesUncheckedUpdateWithoutOrdersInput>
  }

  export type orderPackagesUpdateManyWithWhereWithoutOrdersInput = {
    where: orderPackagesScalarWhereInput
    data: XOR<orderPackagesUpdateManyMutationInput, orderPackagesUncheckedUpdateManyWithoutOrdersInput>
  }

  export type ordersCreateWithoutPackagesInput = {
    orderCode: string
    orderType?: $Enums.OrderType | null
    grandAmount?: number
    discountAmount?: number
    discountPercentage?: number
    totalAmount?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sender?: sendersCreateNestedOneWithoutOrdersInput
    suburbs?: suburbsCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutPackagesInput = {
    orderCode: string
    senderId?: string | null
    orderType?: $Enums.OrderType | null
    grandAmount?: number
    discountAmount?: number
    discountPercentage?: number
    totalAmount?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pickUpLocation?: string | null
  }

  export type ordersCreateOrConnectWithoutPackagesInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutPackagesInput, ordersUncheckedCreateWithoutPackagesInput>
  }

  export type receiversCreateWithoutPackagesInput = {
    id?: string
    fullname: string
    telephone: string
    email?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsCreateNestedOneWithoutReceiversInput
    senders?: sendersCreateNestedOneWithoutReceiversInput
  }

  export type receiversUncheckedCreateWithoutPackagesInput = {
    id?: string
    fullname: string
    telephone: string
    email?: string | null
    deliveryLocation?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    senderId?: string | null
  }

  export type receiversCreateOrConnectWithoutPackagesInput = {
    where: receiversWhereUniqueInput
    create: XOR<receiversCreateWithoutPackagesInput, receiversUncheckedCreateWithoutPackagesInput>
  }

  export type suburbsCreateWithoutOrderPackagesInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cities?: citiesCreateNestedOneWithoutSuburbsInput
    deliveryPrices?: deliveryPricesCreateNestedManyWithoutSuburbsInput
    orders?: ordersCreateNestedManyWithoutSuburbsInput
    senders?: sendersCreateNestedManyWithoutSuburbsInput
    receivers?: receiversCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsUncheckedCreateWithoutOrderPackagesInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cityId?: string | null
    deliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutSuburbsInput
    orders?: ordersUncheckedCreateNestedManyWithoutSuburbsInput
    senders?: sendersUncheckedCreateNestedManyWithoutSuburbsInput
    receivers?: receiversUncheckedCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsCreateOrConnectWithoutOrderPackagesInput = {
    where: suburbsWhereUniqueInput
    create: XOR<suburbsCreateWithoutOrderPackagesInput, suburbsUncheckedCreateWithoutOrderPackagesInput>
  }

  export type bikersCreateWithoutPackagesPickupBikersInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    code?: string | null
    expiration?: Date | string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    packagesDeliveryBikers?: orderPackagesCreateNestedManyWithoutDeliverBikerInput
    cities?: citiesCreateNestedOneWithoutBikerInput
  }

  export type bikersUncheckedCreateWithoutPackagesPickupBikersInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    code?: string | null
    expiration?: Date | string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    packagesDeliveryBikers?: orderPackagesUncheckedCreateNestedManyWithoutDeliverBikerInput
  }

  export type bikersCreateOrConnectWithoutPackagesPickupBikersInput = {
    where: bikersWhereUniqueInput
    create: XOR<bikersCreateWithoutPackagesPickupBikersInput, bikersUncheckedCreateWithoutPackagesPickupBikersInput>
  }

  export type bikersCreateWithoutPackagesDeliveryBikersInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    code?: string | null
    expiration?: Date | string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    packagesPickupBikers?: orderPackagesCreateNestedManyWithoutPickupBikerInput
    cities?: citiesCreateNestedOneWithoutBikerInput
  }

  export type bikersUncheckedCreateWithoutPackagesDeliveryBikersInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    code?: string | null
    expiration?: Date | string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: string | null
    packagesPickupBikers?: orderPackagesUncheckedCreateNestedManyWithoutPickupBikerInput
  }

  export type bikersCreateOrConnectWithoutPackagesDeliveryBikersInput = {
    where: bikersWhereUniqueInput
    create: XOR<bikersCreateWithoutPackagesDeliveryBikersInput, bikersUncheckedCreateWithoutPackagesDeliveryBikersInput>
  }

  export type packageHistoriesCreateWithoutPackagesInput = {
    id?: string
    status: $Enums.status
    reason?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type packageHistoriesUncheckedCreateWithoutPackagesInput = {
    id?: string
    status: $Enums.status
    reason?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type packageHistoriesCreateOrConnectWithoutPackagesInput = {
    where: packageHistoriesWhereUniqueInput
    create: XOR<packageHistoriesCreateWithoutPackagesInput, packageHistoriesUncheckedCreateWithoutPackagesInput>
  }

  export type packageHistoriesCreateManyPackagesInputEnvelope = {
    data: packageHistoriesCreateManyPackagesInput | packageHistoriesCreateManyPackagesInput[]
    skipDuplicates?: boolean
  }

  export type ordersUpsertWithoutPackagesInput = {
    update: XOR<ordersUpdateWithoutPackagesInput, ordersUncheckedUpdateWithoutPackagesInput>
    create: XOR<ordersCreateWithoutPackagesInput, ordersUncheckedCreateWithoutPackagesInput>
    where?: ordersWhereInput
  }

  export type ordersUpdateToOneWithWhereWithoutPackagesInput = {
    where?: ordersWhereInput
    data: XOR<ordersUpdateWithoutPackagesInput, ordersUncheckedUpdateWithoutPackagesInput>
  }

  export type ordersUpdateWithoutPackagesInput = {
    orderCode?: StringFieldUpdateOperationsInput | string
    orderType?: NullableEnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType | null
    grandAmount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: sendersUpdateOneWithoutOrdersNestedInput
    suburbs?: suburbsUpdateOneWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutPackagesInput = {
    orderCode?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderType?: NullableEnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType | null
    grandAmount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pickUpLocation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type receiversUpsertWithoutPackagesInput = {
    update: XOR<receiversUpdateWithoutPackagesInput, receiversUncheckedUpdateWithoutPackagesInput>
    create: XOR<receiversCreateWithoutPackagesInput, receiversUncheckedCreateWithoutPackagesInput>
    where?: receiversWhereInput
  }

  export type receiversUpdateToOneWithWhereWithoutPackagesInput = {
    where?: receiversWhereInput
    data: XOR<receiversUpdateWithoutPackagesInput, receiversUncheckedUpdateWithoutPackagesInput>
  }

  export type receiversUpdateWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUpdateOneWithoutReceiversNestedInput
    senders?: sendersUpdateOneWithoutReceiversNestedInput
  }

  export type receiversUncheckedUpdateWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type suburbsUpsertWithoutOrderPackagesInput = {
    update: XOR<suburbsUpdateWithoutOrderPackagesInput, suburbsUncheckedUpdateWithoutOrderPackagesInput>
    create: XOR<suburbsCreateWithoutOrderPackagesInput, suburbsUncheckedCreateWithoutOrderPackagesInput>
    where?: suburbsWhereInput
  }

  export type suburbsUpdateToOneWithWhereWithoutOrderPackagesInput = {
    where?: suburbsWhereInput
    data: XOR<suburbsUpdateWithoutOrderPackagesInput, suburbsUncheckedUpdateWithoutOrderPackagesInput>
  }

  export type suburbsUpdateWithoutOrderPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: citiesUpdateOneWithoutSuburbsNestedInput
    deliveryPrices?: deliveryPricesUpdateManyWithoutSuburbsNestedInput
    orders?: ordersUpdateManyWithoutSuburbsNestedInput
    senders?: sendersUpdateManyWithoutSuburbsNestedInput
    receivers?: receiversUpdateManyWithoutSuburbsNestedInput
  }

  export type suburbsUncheckedUpdateWithoutOrderPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutSuburbsNestedInput
    orders?: ordersUncheckedUpdateManyWithoutSuburbsNestedInput
    senders?: sendersUncheckedUpdateManyWithoutSuburbsNestedInput
    receivers?: receiversUncheckedUpdateManyWithoutSuburbsNestedInput
  }

  export type bikersUpsertWithoutPackagesPickupBikersInput = {
    update: XOR<bikersUpdateWithoutPackagesPickupBikersInput, bikersUncheckedUpdateWithoutPackagesPickupBikersInput>
    create: XOR<bikersCreateWithoutPackagesPickupBikersInput, bikersUncheckedCreateWithoutPackagesPickupBikersInput>
    where?: bikersWhereInput
  }

  export type bikersUpdateToOneWithWhereWithoutPackagesPickupBikersInput = {
    where?: bikersWhereInput
    data: XOR<bikersUpdateWithoutPackagesPickupBikersInput, bikersUncheckedUpdateWithoutPackagesPickupBikersInput>
  }

  export type bikersUpdateWithoutPackagesPickupBikersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packagesDeliveryBikers?: orderPackagesUpdateManyWithoutDeliverBikerNestedInput
    cities?: citiesUpdateOneWithoutBikerNestedInput
  }

  export type bikersUncheckedUpdateWithoutPackagesPickupBikersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    packagesDeliveryBikers?: orderPackagesUncheckedUpdateManyWithoutDeliverBikerNestedInput
  }

  export type bikersUpsertWithoutPackagesDeliveryBikersInput = {
    update: XOR<bikersUpdateWithoutPackagesDeliveryBikersInput, bikersUncheckedUpdateWithoutPackagesDeliveryBikersInput>
    create: XOR<bikersCreateWithoutPackagesDeliveryBikersInput, bikersUncheckedCreateWithoutPackagesDeliveryBikersInput>
    where?: bikersWhereInput
  }

  export type bikersUpdateToOneWithWhereWithoutPackagesDeliveryBikersInput = {
    where?: bikersWhereInput
    data: XOR<bikersUpdateWithoutPackagesDeliveryBikersInput, bikersUncheckedUpdateWithoutPackagesDeliveryBikersInput>
  }

  export type bikersUpdateWithoutPackagesDeliveryBikersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packagesPickupBikers?: orderPackagesUpdateManyWithoutPickupBikerNestedInput
    cities?: citiesUpdateOneWithoutBikerNestedInput
  }

  export type bikersUncheckedUpdateWithoutPackagesDeliveryBikersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    packagesPickupBikers?: orderPackagesUncheckedUpdateManyWithoutPickupBikerNestedInput
  }

  export type packageHistoriesUpsertWithWhereUniqueWithoutPackagesInput = {
    where: packageHistoriesWhereUniqueInput
    update: XOR<packageHistoriesUpdateWithoutPackagesInput, packageHistoriesUncheckedUpdateWithoutPackagesInput>
    create: XOR<packageHistoriesCreateWithoutPackagesInput, packageHistoriesUncheckedCreateWithoutPackagesInput>
  }

  export type packageHistoriesUpdateWithWhereUniqueWithoutPackagesInput = {
    where: packageHistoriesWhereUniqueInput
    data: XOR<packageHistoriesUpdateWithoutPackagesInput, packageHistoriesUncheckedUpdateWithoutPackagesInput>
  }

  export type packageHistoriesUpdateManyWithWhereWithoutPackagesInput = {
    where: packageHistoriesScalarWhereInput
    data: XOR<packageHistoriesUpdateManyMutationInput, packageHistoriesUncheckedUpdateManyWithoutPackagesInput>
  }

  export type packageHistoriesScalarWhereInput = {
    AND?: packageHistoriesScalarWhereInput | packageHistoriesScalarWhereInput[]
    OR?: packageHistoriesScalarWhereInput[]
    NOT?: packageHistoriesScalarWhereInput | packageHistoriesScalarWhereInput[]
    id?: StringFilter<"packageHistories"> | string
    status?: EnumstatusFilter<"packageHistories"> | $Enums.status
    packageId?: StringNullableFilter<"packageHistories"> | string | null
    reason?: StringNullableFilter<"packageHistories"> | string | null
    del_flg?: IntFilter<"packageHistories"> | number
    createdAt?: DateTimeFilter<"packageHistories"> | Date | string
    updatedAt?: DateTimeFilter<"packageHistories"> | Date | string
  }

  export type orderPackagesCreateWithoutPackageHistoriesInput = {
    id?: string
    orderCode: string
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: ordersCreateNestedOneWithoutPackagesInput
    receiver?: receiversCreateNestedOneWithoutPackagesInput
    suburb?: suburbsCreateNestedOneWithoutOrderPackagesInput
    pickupBiker?: bikersCreateNestedOneWithoutPackagesPickupBikersInput
    deliverBiker?: bikersCreateNestedOneWithoutPackagesDeliveryBikersInput
  }

  export type orderPackagesUncheckedCreateWithoutPackageHistoriesInput = {
    id?: string
    orderId: string
    orderCode: string
    receiverId?: string | null
    deliveryLocation?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    pickupBikerId?: string | null
    deliverBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderPackagesCreateOrConnectWithoutPackageHistoriesInput = {
    where: orderPackagesWhereUniqueInput
    create: XOR<orderPackagesCreateWithoutPackageHistoriesInput, orderPackagesUncheckedCreateWithoutPackageHistoriesInput>
  }

  export type orderPackagesUpsertWithoutPackageHistoriesInput = {
    update: XOR<orderPackagesUpdateWithoutPackageHistoriesInput, orderPackagesUncheckedUpdateWithoutPackageHistoriesInput>
    create: XOR<orderPackagesCreateWithoutPackageHistoriesInput, orderPackagesUncheckedCreateWithoutPackageHistoriesInput>
    where?: orderPackagesWhereInput
  }

  export type orderPackagesUpdateToOneWithWhereWithoutPackageHistoriesInput = {
    where?: orderPackagesWhereInput
    data: XOR<orderPackagesUpdateWithoutPackageHistoriesInput, orderPackagesUncheckedUpdateWithoutPackageHistoriesInput>
  }

  export type orderPackagesUpdateWithoutPackageHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUpdateOneWithoutPackagesNestedInput
    receiver?: receiversUpdateOneWithoutPackagesNestedInput
    suburb?: suburbsUpdateOneWithoutOrderPackagesNestedInput
    pickupBiker?: bikersUpdateOneWithoutPackagesPickupBikersNestedInput
    deliverBiker?: bikersUpdateOneWithoutPackagesDeliveryBikersNestedInput
  }

  export type orderPackagesUncheckedUpdateWithoutPackageHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    pickupBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    deliverBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type citiesCreateWithoutSuburbsInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: usersCreateNestedManyWithoutCitiesInput
    biker?: bikersCreateNestedManyWithoutCitiesInput
    citydeliveryPrices?: deliveryPricesCreateNestedManyWithoutCitiesInput
    destinationdeliveryPrices?: deliveryPricesCreateNestedManyWithoutDestinationInput
  }

  export type citiesUncheckedCreateWithoutSuburbsInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: usersUncheckedCreateNestedManyWithoutCitiesInput
    biker?: bikersUncheckedCreateNestedManyWithoutCitiesInput
    citydeliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutCitiesInput
    destinationdeliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutDestinationInput
  }

  export type citiesCreateOrConnectWithoutSuburbsInput = {
    where: citiesWhereUniqueInput
    create: XOR<citiesCreateWithoutSuburbsInput, citiesUncheckedCreateWithoutSuburbsInput>
  }

  export type deliveryPricesCreateWithoutSuburbsInput = {
    id?: string
    baseWeightPrice?: number
    extraWeightPrice?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    destination?: citiesCreateNestedOneWithoutDestinationdeliveryPricesInput
    cities?: citiesCreateNestedOneWithoutCitydeliveryPricesInput
  }

  export type deliveryPricesUncheckedCreateWithoutSuburbsInput = {
    id?: string
    destinationId?: string | null
    cityId?: string | null
    baseWeightPrice?: number
    extraWeightPrice?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type deliveryPricesCreateOrConnectWithoutSuburbsInput = {
    where: deliveryPricesWhereUniqueInput
    create: XOR<deliveryPricesCreateWithoutSuburbsInput, deliveryPricesUncheckedCreateWithoutSuburbsInput>
  }

  export type deliveryPricesCreateManySuburbsInputEnvelope = {
    data: deliveryPricesCreateManySuburbsInput | deliveryPricesCreateManySuburbsInput[]
    skipDuplicates?: boolean
  }

  export type ordersCreateWithoutSuburbsInput = {
    orderCode: string
    orderType?: $Enums.OrderType | null
    grandAmount?: number
    discountAmount?: number
    discountPercentage?: number
    totalAmount?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sender?: sendersCreateNestedOneWithoutOrdersInput
    packages?: orderPackagesCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutSuburbsInput = {
    orderCode: string
    senderId?: string | null
    orderType?: $Enums.OrderType | null
    grandAmount?: number
    discountAmount?: number
    discountPercentage?: number
    totalAmount?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: orderPackagesUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutSuburbsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutSuburbsInput, ordersUncheckedCreateWithoutSuburbsInput>
  }

  export type ordersCreateManySuburbsInputEnvelope = {
    data: ordersCreateManySuburbsInput | ordersCreateManySuburbsInput[]
    skipDuplicates?: boolean
  }

  export type orderPackagesCreateWithoutSuburbInput = {
    id?: string
    orderCode: string
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: ordersCreateNestedOneWithoutPackagesInput
    receiver?: receiversCreateNestedOneWithoutPackagesInput
    pickupBiker?: bikersCreateNestedOneWithoutPackagesPickupBikersInput
    deliverBiker?: bikersCreateNestedOneWithoutPackagesDeliveryBikersInput
    packageHistories?: packageHistoriesCreateNestedManyWithoutPackagesInput
  }

  export type orderPackagesUncheckedCreateWithoutSuburbInput = {
    id?: string
    orderId: string
    orderCode: string
    receiverId?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    pickupBikerId?: string | null
    deliverBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packageHistories?: packageHistoriesUncheckedCreateNestedManyWithoutPackagesInput
  }

  export type orderPackagesCreateOrConnectWithoutSuburbInput = {
    where: orderPackagesWhereUniqueInput
    create: XOR<orderPackagesCreateWithoutSuburbInput, orderPackagesUncheckedCreateWithoutSuburbInput>
  }

  export type orderPackagesCreateManySuburbInputEnvelope = {
    data: orderPackagesCreateManySuburbInput | orderPackagesCreateManySuburbInput[]
    skipDuplicates?: boolean
  }

  export type sendersCreateWithoutSuburbsInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    confirmed?: boolean
    isDormat?: boolean
    code?: string | null
    expiration?: Date | string | null
    lastLogin?: Date | string
    rewardPoints?: number
    redeemedPoints?: number
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    receivers?: receiversCreateNestedManyWithoutSendersInput
    orders?: ordersCreateNestedManyWithoutSenderInput
  }

  export type sendersUncheckedCreateWithoutSuburbsInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    confirmed?: boolean
    isDormat?: boolean
    code?: string | null
    expiration?: Date | string | null
    lastLogin?: Date | string
    rewardPoints?: number
    redeemedPoints?: number
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    receivers?: receiversUncheckedCreateNestedManyWithoutSendersInput
    orders?: ordersUncheckedCreateNestedManyWithoutSenderInput
  }

  export type sendersCreateOrConnectWithoutSuburbsInput = {
    where: sendersWhereUniqueInput
    create: XOR<sendersCreateWithoutSuburbsInput, sendersUncheckedCreateWithoutSuburbsInput>
  }

  export type sendersCreateManySuburbsInputEnvelope = {
    data: sendersCreateManySuburbsInput | sendersCreateManySuburbsInput[]
    skipDuplicates?: boolean
  }

  export type receiversCreateWithoutSuburbsInput = {
    id?: string
    fullname: string
    telephone: string
    email?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    senders?: sendersCreateNestedOneWithoutReceiversInput
    packages?: orderPackagesCreateNestedManyWithoutReceiverInput
  }

  export type receiversUncheckedCreateWithoutSuburbsInput = {
    id?: string
    fullname: string
    telephone: string
    email?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    senderId?: string | null
    packages?: orderPackagesUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type receiversCreateOrConnectWithoutSuburbsInput = {
    where: receiversWhereUniqueInput
    create: XOR<receiversCreateWithoutSuburbsInput, receiversUncheckedCreateWithoutSuburbsInput>
  }

  export type receiversCreateManySuburbsInputEnvelope = {
    data: receiversCreateManySuburbsInput | receiversCreateManySuburbsInput[]
    skipDuplicates?: boolean
  }

  export type citiesUpsertWithoutSuburbsInput = {
    update: XOR<citiesUpdateWithoutSuburbsInput, citiesUncheckedUpdateWithoutSuburbsInput>
    create: XOR<citiesCreateWithoutSuburbsInput, citiesUncheckedCreateWithoutSuburbsInput>
    where?: citiesWhereInput
  }

  export type citiesUpdateToOneWithWhereWithoutSuburbsInput = {
    where?: citiesWhereInput
    data: XOR<citiesUpdateWithoutSuburbsInput, citiesUncheckedUpdateWithoutSuburbsInput>
  }

  export type citiesUpdateWithoutSuburbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateManyWithoutCitiesNestedInput
    biker?: bikersUpdateManyWithoutCitiesNestedInput
    citydeliveryPrices?: deliveryPricesUpdateManyWithoutCitiesNestedInput
    destinationdeliveryPrices?: deliveryPricesUpdateManyWithoutDestinationNestedInput
  }

  export type citiesUncheckedUpdateWithoutSuburbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUncheckedUpdateManyWithoutCitiesNestedInput
    biker?: bikersUncheckedUpdateManyWithoutCitiesNestedInput
    citydeliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutCitiesNestedInput
    destinationdeliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutDestinationNestedInput
  }

  export type deliveryPricesUpsertWithWhereUniqueWithoutSuburbsInput = {
    where: deliveryPricesWhereUniqueInput
    update: XOR<deliveryPricesUpdateWithoutSuburbsInput, deliveryPricesUncheckedUpdateWithoutSuburbsInput>
    create: XOR<deliveryPricesCreateWithoutSuburbsInput, deliveryPricesUncheckedCreateWithoutSuburbsInput>
  }

  export type deliveryPricesUpdateWithWhereUniqueWithoutSuburbsInput = {
    where: deliveryPricesWhereUniqueInput
    data: XOR<deliveryPricesUpdateWithoutSuburbsInput, deliveryPricesUncheckedUpdateWithoutSuburbsInput>
  }

  export type deliveryPricesUpdateManyWithWhereWithoutSuburbsInput = {
    where: deliveryPricesScalarWhereInput
    data: XOR<deliveryPricesUpdateManyMutationInput, deliveryPricesUncheckedUpdateManyWithoutSuburbsInput>
  }

  export type deliveryPricesScalarWhereInput = {
    AND?: deliveryPricesScalarWhereInput | deliveryPricesScalarWhereInput[]
    OR?: deliveryPricesScalarWhereInput[]
    NOT?: deliveryPricesScalarWhereInput | deliveryPricesScalarWhereInput[]
    id?: StringFilter<"deliveryPrices"> | string
    destinationId?: StringNullableFilter<"deliveryPrices"> | string | null
    cityId?: StringNullableFilter<"deliveryPrices"> | string | null
    baseWeightPrice?: FloatFilter<"deliveryPrices"> | number
    extraWeightPrice?: FloatFilter<"deliveryPrices"> | number
    del_flg?: BoolFilter<"deliveryPrices"> | boolean
    createdAt?: DateTimeFilter<"deliveryPrices"> | Date | string
    updatedAt?: DateTimeFilter<"deliveryPrices"> | Date | string
    suburbsId?: StringNullableFilter<"deliveryPrices"> | string | null
  }

  export type ordersUpsertWithWhereUniqueWithoutSuburbsInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutSuburbsInput, ordersUncheckedUpdateWithoutSuburbsInput>
    create: XOR<ordersCreateWithoutSuburbsInput, ordersUncheckedCreateWithoutSuburbsInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutSuburbsInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutSuburbsInput, ordersUncheckedUpdateWithoutSuburbsInput>
  }

  export type ordersUpdateManyWithWhereWithoutSuburbsInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutSuburbsInput>
  }

  export type orderPackagesUpsertWithWhereUniqueWithoutSuburbInput = {
    where: orderPackagesWhereUniqueInput
    update: XOR<orderPackagesUpdateWithoutSuburbInput, orderPackagesUncheckedUpdateWithoutSuburbInput>
    create: XOR<orderPackagesCreateWithoutSuburbInput, orderPackagesUncheckedCreateWithoutSuburbInput>
  }

  export type orderPackagesUpdateWithWhereUniqueWithoutSuburbInput = {
    where: orderPackagesWhereUniqueInput
    data: XOR<orderPackagesUpdateWithoutSuburbInput, orderPackagesUncheckedUpdateWithoutSuburbInput>
  }

  export type orderPackagesUpdateManyWithWhereWithoutSuburbInput = {
    where: orderPackagesScalarWhereInput
    data: XOR<orderPackagesUpdateManyMutationInput, orderPackagesUncheckedUpdateManyWithoutSuburbInput>
  }

  export type sendersUpsertWithWhereUniqueWithoutSuburbsInput = {
    where: sendersWhereUniqueInput
    update: XOR<sendersUpdateWithoutSuburbsInput, sendersUncheckedUpdateWithoutSuburbsInput>
    create: XOR<sendersCreateWithoutSuburbsInput, sendersUncheckedCreateWithoutSuburbsInput>
  }

  export type sendersUpdateWithWhereUniqueWithoutSuburbsInput = {
    where: sendersWhereUniqueInput
    data: XOR<sendersUpdateWithoutSuburbsInput, sendersUncheckedUpdateWithoutSuburbsInput>
  }

  export type sendersUpdateManyWithWhereWithoutSuburbsInput = {
    where: sendersScalarWhereInput
    data: XOR<sendersUpdateManyMutationInput, sendersUncheckedUpdateManyWithoutSuburbsInput>
  }

  export type sendersScalarWhereInput = {
    AND?: sendersScalarWhereInput | sendersScalarWhereInput[]
    OR?: sendersScalarWhereInput[]
    NOT?: sendersScalarWhereInput | sendersScalarWhereInput[]
    id?: StringFilter<"senders"> | string
    fullname?: StringFilter<"senders"> | string
    email?: StringNullableFilter<"senders"> | string | null
    telephone?: StringFilter<"senders"> | string
    pickUpLocation?: StringNullableFilter<"senders"> | string | null
    password?: StringFilter<"senders"> | string
    confirmed?: BoolFilter<"senders"> | boolean
    isDormat?: BoolFilter<"senders"> | boolean
    code?: StringNullableFilter<"senders"> | string | null
    expiration?: DateTimeNullableFilter<"senders"> | Date | string | null
    lastLogin?: DateTimeFilter<"senders"> | Date | string
    rewardPoints?: IntFilter<"senders"> | number
    redeemedPoints?: IntFilter<"senders"> | number
    del_flg?: IntFilter<"senders"> | number
    createdAt?: DateTimeFilter<"senders"> | Date | string
    updatedAt?: DateTimeFilter<"senders"> | Date | string
  }

  export type receiversUpsertWithWhereUniqueWithoutSuburbsInput = {
    where: receiversWhereUniqueInput
    update: XOR<receiversUpdateWithoutSuburbsInput, receiversUncheckedUpdateWithoutSuburbsInput>
    create: XOR<receiversCreateWithoutSuburbsInput, receiversUncheckedCreateWithoutSuburbsInput>
  }

  export type receiversUpdateWithWhereUniqueWithoutSuburbsInput = {
    where: receiversWhereUniqueInput
    data: XOR<receiversUpdateWithoutSuburbsInput, receiversUncheckedUpdateWithoutSuburbsInput>
  }

  export type receiversUpdateManyWithWhereWithoutSuburbsInput = {
    where: receiversScalarWhereInput
    data: XOR<receiversUpdateManyMutationInput, receiversUncheckedUpdateManyWithoutSuburbsInput>
  }

  export type suburbsCreateWithoutCitiesInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveryPrices?: deliveryPricesCreateNestedManyWithoutSuburbsInput
    orders?: ordersCreateNestedManyWithoutSuburbsInput
    orderPackages?: orderPackagesCreateNestedManyWithoutSuburbInput
    senders?: sendersCreateNestedManyWithoutSuburbsInput
    receivers?: receiversCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsUncheckedCreateWithoutCitiesInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutSuburbsInput
    orders?: ordersUncheckedCreateNestedManyWithoutSuburbsInput
    orderPackages?: orderPackagesUncheckedCreateNestedManyWithoutSuburbInput
    senders?: sendersUncheckedCreateNestedManyWithoutSuburbsInput
    receivers?: receiversUncheckedCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsCreateOrConnectWithoutCitiesInput = {
    where: suburbsWhereUniqueInput
    create: XOR<suburbsCreateWithoutCitiesInput, suburbsUncheckedCreateWithoutCitiesInput>
  }

  export type suburbsCreateManyCitiesInputEnvelope = {
    data: suburbsCreateManyCitiesInput | suburbsCreateManyCitiesInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutCitiesInput = {
    id?: string
    fullname: string
    email: string
    telephone?: string | null
    password: string
    code?: string | null
    expiration?: Date | string | null
    role_name?: string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersUncheckedCreateWithoutCitiesInput = {
    id?: string
    fullname: string
    email: string
    telephone?: string | null
    password: string
    code?: string | null
    expiration?: Date | string | null
    role_name?: string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersCreateOrConnectWithoutCitiesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCitiesInput, usersUncheckedCreateWithoutCitiesInput>
  }

  export type usersCreateManyCitiesInputEnvelope = {
    data: usersCreateManyCitiesInput | usersCreateManyCitiesInput[]
    skipDuplicates?: boolean
  }

  export type bikersCreateWithoutCitiesInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    code?: string | null
    expiration?: Date | string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    packagesPickupBikers?: orderPackagesCreateNestedManyWithoutPickupBikerInput
    packagesDeliveryBikers?: orderPackagesCreateNestedManyWithoutDeliverBikerInput
  }

  export type bikersUncheckedCreateWithoutCitiesInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    code?: string | null
    expiration?: Date | string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    packagesPickupBikers?: orderPackagesUncheckedCreateNestedManyWithoutPickupBikerInput
    packagesDeliveryBikers?: orderPackagesUncheckedCreateNestedManyWithoutDeliverBikerInput
  }

  export type bikersCreateOrConnectWithoutCitiesInput = {
    where: bikersWhereUniqueInput
    create: XOR<bikersCreateWithoutCitiesInput, bikersUncheckedCreateWithoutCitiesInput>
  }

  export type bikersCreateManyCitiesInputEnvelope = {
    data: bikersCreateManyCitiesInput | bikersCreateManyCitiesInput[]
    skipDuplicates?: boolean
  }

  export type deliveryPricesCreateWithoutCitiesInput = {
    id?: string
    baseWeightPrice?: number
    extraWeightPrice?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    destination?: citiesCreateNestedOneWithoutDestinationdeliveryPricesInput
    suburbs?: suburbsCreateNestedOneWithoutDeliveryPricesInput
  }

  export type deliveryPricesUncheckedCreateWithoutCitiesInput = {
    id?: string
    destinationId?: string | null
    baseWeightPrice?: number
    extraWeightPrice?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbsId?: string | null
  }

  export type deliveryPricesCreateOrConnectWithoutCitiesInput = {
    where: deliveryPricesWhereUniqueInput
    create: XOR<deliveryPricesCreateWithoutCitiesInput, deliveryPricesUncheckedCreateWithoutCitiesInput>
  }

  export type deliveryPricesCreateManyCitiesInputEnvelope = {
    data: deliveryPricesCreateManyCitiesInput | deliveryPricesCreateManyCitiesInput[]
    skipDuplicates?: boolean
  }

  export type deliveryPricesCreateWithoutDestinationInput = {
    id?: string
    baseWeightPrice?: number
    extraWeightPrice?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cities?: citiesCreateNestedOneWithoutCitydeliveryPricesInput
    suburbs?: suburbsCreateNestedOneWithoutDeliveryPricesInput
  }

  export type deliveryPricesUncheckedCreateWithoutDestinationInput = {
    id?: string
    cityId?: string | null
    baseWeightPrice?: number
    extraWeightPrice?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbsId?: string | null
  }

  export type deliveryPricesCreateOrConnectWithoutDestinationInput = {
    where: deliveryPricesWhereUniqueInput
    create: XOR<deliveryPricesCreateWithoutDestinationInput, deliveryPricesUncheckedCreateWithoutDestinationInput>
  }

  export type deliveryPricesCreateManyDestinationInputEnvelope = {
    data: deliveryPricesCreateManyDestinationInput | deliveryPricesCreateManyDestinationInput[]
    skipDuplicates?: boolean
  }

  export type suburbsUpsertWithWhereUniqueWithoutCitiesInput = {
    where: suburbsWhereUniqueInput
    update: XOR<suburbsUpdateWithoutCitiesInput, suburbsUncheckedUpdateWithoutCitiesInput>
    create: XOR<suburbsCreateWithoutCitiesInput, suburbsUncheckedCreateWithoutCitiesInput>
  }

  export type suburbsUpdateWithWhereUniqueWithoutCitiesInput = {
    where: suburbsWhereUniqueInput
    data: XOR<suburbsUpdateWithoutCitiesInput, suburbsUncheckedUpdateWithoutCitiesInput>
  }

  export type suburbsUpdateManyWithWhereWithoutCitiesInput = {
    where: suburbsScalarWhereInput
    data: XOR<suburbsUpdateManyMutationInput, suburbsUncheckedUpdateManyWithoutCitiesInput>
  }

  export type suburbsScalarWhereInput = {
    AND?: suburbsScalarWhereInput | suburbsScalarWhereInput[]
    OR?: suburbsScalarWhereInput[]
    NOT?: suburbsScalarWhereInput | suburbsScalarWhereInput[]
    id?: StringFilter<"suburbs"> | string
    suburb_name?: StringFilter<"suburbs"> | string
    del_flg?: BoolFilter<"suburbs"> | boolean
    createdAt?: DateTimeFilter<"suburbs"> | Date | string
    updatedAt?: DateTimeFilter<"suburbs"> | Date | string
    cityId?: StringNullableFilter<"suburbs"> | string | null
  }

  export type usersUpsertWithWhereUniqueWithoutCitiesInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutCitiesInput, usersUncheckedUpdateWithoutCitiesInput>
    create: XOR<usersCreateWithoutCitiesInput, usersUncheckedCreateWithoutCitiesInput>
  }

  export type usersUpdateWithWhereUniqueWithoutCitiesInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutCitiesInput, usersUncheckedUpdateWithoutCitiesInput>
  }

  export type usersUpdateManyWithWhereWithoutCitiesInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutCitiesInput>
  }

  export type usersScalarWhereInput = {
    AND?: usersScalarWhereInput | usersScalarWhereInput[]
    OR?: usersScalarWhereInput[]
    NOT?: usersScalarWhereInput | usersScalarWhereInput[]
    id?: StringFilter<"users"> | string
    fullname?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    telephone?: StringNullableFilter<"users"> | string | null
    password?: StringFilter<"users"> | string
    location?: StringNullableFilter<"users"> | string | null
    code?: StringNullableFilter<"users"> | string | null
    expiration?: DateTimeNullableFilter<"users"> | Date | string | null
    role_name?: StringNullableFilter<"users"> | string | null
    confirmed?: BoolFilter<"users"> | boolean
    del_flg?: IntFilter<"users"> | number
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
  }

  export type bikersUpsertWithWhereUniqueWithoutCitiesInput = {
    where: bikersWhereUniqueInput
    update: XOR<bikersUpdateWithoutCitiesInput, bikersUncheckedUpdateWithoutCitiesInput>
    create: XOR<bikersCreateWithoutCitiesInput, bikersUncheckedCreateWithoutCitiesInput>
  }

  export type bikersUpdateWithWhereUniqueWithoutCitiesInput = {
    where: bikersWhereUniqueInput
    data: XOR<bikersUpdateWithoutCitiesInput, bikersUncheckedUpdateWithoutCitiesInput>
  }

  export type bikersUpdateManyWithWhereWithoutCitiesInput = {
    where: bikersScalarWhereInput
    data: XOR<bikersUpdateManyMutationInput, bikersUncheckedUpdateManyWithoutCitiesInput>
  }

  export type bikersScalarWhereInput = {
    AND?: bikersScalarWhereInput | bikersScalarWhereInput[]
    OR?: bikersScalarWhereInput[]
    NOT?: bikersScalarWhereInput | bikersScalarWhereInput[]
    id?: StringFilter<"bikers"> | string
    fullname?: StringFilter<"bikers"> | string
    email?: StringNullableFilter<"bikers"> | string | null
    telephone?: StringFilter<"bikers"> | string
    password?: StringFilter<"bikers"> | string
    code?: StringNullableFilter<"bikers"> | string | null
    expiration?: DateTimeNullableFilter<"bikers"> | Date | string | null
    confirmed?: BoolFilter<"bikers"> | boolean
    del_flg?: IntFilter<"bikers"> | number
    createdAt?: DateTimeFilter<"bikers"> | Date | string
    updatedAt?: DateTimeFilter<"bikers"> | Date | string
    location?: StringNullableFilter<"bikers"> | string | null
  }

  export type deliveryPricesUpsertWithWhereUniqueWithoutCitiesInput = {
    where: deliveryPricesWhereUniqueInput
    update: XOR<deliveryPricesUpdateWithoutCitiesInput, deliveryPricesUncheckedUpdateWithoutCitiesInput>
    create: XOR<deliveryPricesCreateWithoutCitiesInput, deliveryPricesUncheckedCreateWithoutCitiesInput>
  }

  export type deliveryPricesUpdateWithWhereUniqueWithoutCitiesInput = {
    where: deliveryPricesWhereUniqueInput
    data: XOR<deliveryPricesUpdateWithoutCitiesInput, deliveryPricesUncheckedUpdateWithoutCitiesInput>
  }

  export type deliveryPricesUpdateManyWithWhereWithoutCitiesInput = {
    where: deliveryPricesScalarWhereInput
    data: XOR<deliveryPricesUpdateManyMutationInput, deliveryPricesUncheckedUpdateManyWithoutCitiesInput>
  }

  export type deliveryPricesUpsertWithWhereUniqueWithoutDestinationInput = {
    where: deliveryPricesWhereUniqueInput
    update: XOR<deliveryPricesUpdateWithoutDestinationInput, deliveryPricesUncheckedUpdateWithoutDestinationInput>
    create: XOR<deliveryPricesCreateWithoutDestinationInput, deliveryPricesUncheckedCreateWithoutDestinationInput>
  }

  export type deliveryPricesUpdateWithWhereUniqueWithoutDestinationInput = {
    where: deliveryPricesWhereUniqueInput
    data: XOR<deliveryPricesUpdateWithoutDestinationInput, deliveryPricesUncheckedUpdateWithoutDestinationInput>
  }

  export type deliveryPricesUpdateManyWithWhereWithoutDestinationInput = {
    where: deliveryPricesScalarWhereInput
    data: XOR<deliveryPricesUpdateManyMutationInput, deliveryPricesUncheckedUpdateManyWithoutDestinationInput>
  }

  export type citiesCreateWithoutDestinationdeliveryPricesInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsCreateNestedManyWithoutCitiesInput
    users?: usersCreateNestedManyWithoutCitiesInput
    biker?: bikersCreateNestedManyWithoutCitiesInput
    citydeliveryPrices?: deliveryPricesCreateNestedManyWithoutCitiesInput
  }

  export type citiesUncheckedCreateWithoutDestinationdeliveryPricesInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsUncheckedCreateNestedManyWithoutCitiesInput
    users?: usersUncheckedCreateNestedManyWithoutCitiesInput
    biker?: bikersUncheckedCreateNestedManyWithoutCitiesInput
    citydeliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutCitiesInput
  }

  export type citiesCreateOrConnectWithoutDestinationdeliveryPricesInput = {
    where: citiesWhereUniqueInput
    create: XOR<citiesCreateWithoutDestinationdeliveryPricesInput, citiesUncheckedCreateWithoutDestinationdeliveryPricesInput>
  }

  export type citiesCreateWithoutCitydeliveryPricesInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsCreateNestedManyWithoutCitiesInput
    users?: usersCreateNestedManyWithoutCitiesInput
    biker?: bikersCreateNestedManyWithoutCitiesInput
    destinationdeliveryPrices?: deliveryPricesCreateNestedManyWithoutDestinationInput
  }

  export type citiesUncheckedCreateWithoutCitydeliveryPricesInput = {
    id?: string
    city_name: string
    initials: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbs?: suburbsUncheckedCreateNestedManyWithoutCitiesInput
    users?: usersUncheckedCreateNestedManyWithoutCitiesInput
    biker?: bikersUncheckedCreateNestedManyWithoutCitiesInput
    destinationdeliveryPrices?: deliveryPricesUncheckedCreateNestedManyWithoutDestinationInput
  }

  export type citiesCreateOrConnectWithoutCitydeliveryPricesInput = {
    where: citiesWhereUniqueInput
    create: XOR<citiesCreateWithoutCitydeliveryPricesInput, citiesUncheckedCreateWithoutCitydeliveryPricesInput>
  }

  export type suburbsCreateWithoutDeliveryPricesInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cities?: citiesCreateNestedOneWithoutSuburbsInput
    orders?: ordersCreateNestedManyWithoutSuburbsInput
    orderPackages?: orderPackagesCreateNestedManyWithoutSuburbInput
    senders?: sendersCreateNestedManyWithoutSuburbsInput
    receivers?: receiversCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsUncheckedCreateWithoutDeliveryPricesInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cityId?: string | null
    orders?: ordersUncheckedCreateNestedManyWithoutSuburbsInput
    orderPackages?: orderPackagesUncheckedCreateNestedManyWithoutSuburbInput
    senders?: sendersUncheckedCreateNestedManyWithoutSuburbsInput
    receivers?: receiversUncheckedCreateNestedManyWithoutSuburbsInput
  }

  export type suburbsCreateOrConnectWithoutDeliveryPricesInput = {
    where: suburbsWhereUniqueInput
    create: XOR<suburbsCreateWithoutDeliveryPricesInput, suburbsUncheckedCreateWithoutDeliveryPricesInput>
  }

  export type citiesUpsertWithoutDestinationdeliveryPricesInput = {
    update: XOR<citiesUpdateWithoutDestinationdeliveryPricesInput, citiesUncheckedUpdateWithoutDestinationdeliveryPricesInput>
    create: XOR<citiesCreateWithoutDestinationdeliveryPricesInput, citiesUncheckedCreateWithoutDestinationdeliveryPricesInput>
    where?: citiesWhereInput
  }

  export type citiesUpdateToOneWithWhereWithoutDestinationdeliveryPricesInput = {
    where?: citiesWhereInput
    data: XOR<citiesUpdateWithoutDestinationdeliveryPricesInput, citiesUncheckedUpdateWithoutDestinationdeliveryPricesInput>
  }

  export type citiesUpdateWithoutDestinationdeliveryPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUpdateManyWithoutCitiesNestedInput
    users?: usersUpdateManyWithoutCitiesNestedInput
    biker?: bikersUpdateManyWithoutCitiesNestedInput
    citydeliveryPrices?: deliveryPricesUpdateManyWithoutCitiesNestedInput
  }

  export type citiesUncheckedUpdateWithoutDestinationdeliveryPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUncheckedUpdateManyWithoutCitiesNestedInput
    users?: usersUncheckedUpdateManyWithoutCitiesNestedInput
    biker?: bikersUncheckedUpdateManyWithoutCitiesNestedInput
    citydeliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutCitiesNestedInput
  }

  export type citiesUpsertWithoutCitydeliveryPricesInput = {
    update: XOR<citiesUpdateWithoutCitydeliveryPricesInput, citiesUncheckedUpdateWithoutCitydeliveryPricesInput>
    create: XOR<citiesCreateWithoutCitydeliveryPricesInput, citiesUncheckedCreateWithoutCitydeliveryPricesInput>
    where?: citiesWhereInput
  }

  export type citiesUpdateToOneWithWhereWithoutCitydeliveryPricesInput = {
    where?: citiesWhereInput
    data: XOR<citiesUpdateWithoutCitydeliveryPricesInput, citiesUncheckedUpdateWithoutCitydeliveryPricesInput>
  }

  export type citiesUpdateWithoutCitydeliveryPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUpdateManyWithoutCitiesNestedInput
    users?: usersUpdateManyWithoutCitiesNestedInput
    biker?: bikersUpdateManyWithoutCitiesNestedInput
    destinationdeliveryPrices?: deliveryPricesUpdateManyWithoutDestinationNestedInput
  }

  export type citiesUncheckedUpdateWithoutCitydeliveryPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    city_name?: StringFieldUpdateOperationsInput | string
    initials?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUncheckedUpdateManyWithoutCitiesNestedInput
    users?: usersUncheckedUpdateManyWithoutCitiesNestedInput
    biker?: bikersUncheckedUpdateManyWithoutCitiesNestedInput
    destinationdeliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutDestinationNestedInput
  }

  export type suburbsUpsertWithoutDeliveryPricesInput = {
    update: XOR<suburbsUpdateWithoutDeliveryPricesInput, suburbsUncheckedUpdateWithoutDeliveryPricesInput>
    create: XOR<suburbsCreateWithoutDeliveryPricesInput, suburbsUncheckedCreateWithoutDeliveryPricesInput>
    where?: suburbsWhereInput
  }

  export type suburbsUpdateToOneWithWhereWithoutDeliveryPricesInput = {
    where?: suburbsWhereInput
    data: XOR<suburbsUpdateWithoutDeliveryPricesInput, suburbsUncheckedUpdateWithoutDeliveryPricesInput>
  }

  export type suburbsUpdateWithoutDeliveryPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: citiesUpdateOneWithoutSuburbsNestedInput
    orders?: ordersUpdateManyWithoutSuburbsNestedInput
    orderPackages?: orderPackagesUpdateManyWithoutSuburbNestedInput
    senders?: sendersUpdateManyWithoutSuburbsNestedInput
    receivers?: receiversUpdateManyWithoutSuburbsNestedInput
  }

  export type suburbsUncheckedUpdateWithoutDeliveryPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: ordersUncheckedUpdateManyWithoutSuburbsNestedInput
    orderPackages?: orderPackagesUncheckedUpdateManyWithoutSuburbNestedInput
    senders?: sendersUncheckedUpdateManyWithoutSuburbsNestedInput
    receivers?: receiversUncheckedUpdateManyWithoutSuburbsNestedInput
  }

  export type orderPackagesCreateManyPickupBikerInput = {
    id?: string
    orderId: string
    orderCode: string
    receiverId?: string | null
    deliveryLocation?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    deliverBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderPackagesCreateManyDeliverBikerInput = {
    id?: string
    orderId: string
    orderCode: string
    receiverId?: string | null
    deliveryLocation?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    pickupBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderPackagesUpdateWithoutPickupBikerInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUpdateOneWithoutPackagesNestedInput
    receiver?: receiversUpdateOneWithoutPackagesNestedInput
    suburb?: suburbsUpdateOneWithoutOrderPackagesNestedInput
    deliverBiker?: bikersUpdateOneWithoutPackagesDeliveryBikersNestedInput
    packageHistories?: packageHistoriesUpdateManyWithoutPackagesNestedInput
  }

  export type orderPackagesUncheckedUpdateWithoutPickupBikerInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    deliverBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageHistories?: packageHistoriesUncheckedUpdateManyWithoutPackagesNestedInput
  }

  export type orderPackagesUncheckedUpdateManyWithoutPickupBikerInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    deliverBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderPackagesUpdateWithoutDeliverBikerInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUpdateOneWithoutPackagesNestedInput
    receiver?: receiversUpdateOneWithoutPackagesNestedInput
    suburb?: suburbsUpdateOneWithoutOrderPackagesNestedInput
    pickupBiker?: bikersUpdateOneWithoutPackagesPickupBikersNestedInput
    packageHistories?: packageHistoriesUpdateManyWithoutPackagesNestedInput
  }

  export type orderPackagesUncheckedUpdateWithoutDeliverBikerInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    pickupBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageHistories?: packageHistoriesUncheckedUpdateManyWithoutPackagesNestedInput
  }

  export type orderPackagesUncheckedUpdateManyWithoutDeliverBikerInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    pickupBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type receiversCreateManySendersInput = {
    id?: string
    fullname: string
    telephone: string
    email?: string | null
    deliveryLocation?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ordersCreateManySenderInput = {
    orderCode: string
    orderType?: $Enums.OrderType | null
    grandAmount?: number
    discountAmount?: number
    discountPercentage?: number
    totalAmount?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    pickUpLocation?: string | null
  }

  export type receiversUpdateWithoutSendersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUpdateOneWithoutReceiversNestedInput
    packages?: orderPackagesUpdateManyWithoutReceiverNestedInput
  }

  export type receiversUncheckedUpdateWithoutSendersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: orderPackagesUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type receiversUncheckedUpdateManyWithoutSendersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUpdateWithoutSenderInput = {
    orderCode?: StringFieldUpdateOperationsInput | string
    orderType?: NullableEnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType | null
    grandAmount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbs?: suburbsUpdateOneWithoutOrdersNestedInput
    packages?: orderPackagesUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutSenderInput = {
    orderCode?: StringFieldUpdateOperationsInput | string
    orderType?: NullableEnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType | null
    grandAmount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pickUpLocation?: NullableStringFieldUpdateOperationsInput | string | null
    packages?: orderPackagesUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutSenderInput = {
    orderCode?: StringFieldUpdateOperationsInput | string
    orderType?: NullableEnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType | null
    grandAmount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pickUpLocation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type orderPackagesCreateManyReceiverInput = {
    id?: string
    orderId: string
    orderCode: string
    deliveryLocation?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    pickupBikerId?: string | null
    deliverBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderPackagesUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUpdateOneWithoutPackagesNestedInput
    suburb?: suburbsUpdateOneWithoutOrderPackagesNestedInput
    pickupBiker?: bikersUpdateOneWithoutPackagesPickupBikersNestedInput
    deliverBiker?: bikersUpdateOneWithoutPackagesDeliveryBikersNestedInput
    packageHistories?: packageHistoriesUpdateManyWithoutPackagesNestedInput
  }

  export type orderPackagesUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    pickupBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    deliverBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageHistories?: packageHistoriesUncheckedUpdateManyWithoutPackagesNestedInput
  }

  export type orderPackagesUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    pickupBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    deliverBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderPackagesCreateManyOrdersInput = {
    id?: string
    orderCode: string
    receiverId?: string | null
    deliveryLocation?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    pickupBikerId?: string | null
    deliverBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderPackagesUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: receiversUpdateOneWithoutPackagesNestedInput
    suburb?: suburbsUpdateOneWithoutOrderPackagesNestedInput
    pickupBiker?: bikersUpdateOneWithoutPackagesPickupBikersNestedInput
    deliverBiker?: bikersUpdateOneWithoutPackagesDeliveryBikersNestedInput
    packageHistories?: packageHistoriesUpdateManyWithoutPackagesNestedInput
  }

  export type orderPackagesUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    pickupBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    deliverBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageHistories?: packageHistoriesUncheckedUpdateManyWithoutPackagesNestedInput
  }

  export type orderPackagesUncheckedUpdateManyWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryLocation?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    pickupBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    deliverBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type packageHistoriesCreateManyPackagesInput = {
    id?: string
    status: $Enums.status
    reason?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type packageHistoriesUpdateWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type packageHistoriesUncheckedUpdateWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type packageHistoriesUncheckedUpdateManyWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type deliveryPricesCreateManySuburbsInput = {
    id?: string
    destinationId?: string | null
    cityId?: string | null
    baseWeightPrice?: number
    extraWeightPrice?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ordersCreateManySuburbsInput = {
    orderCode: string
    senderId?: string | null
    orderType?: $Enums.OrderType | null
    grandAmount?: number
    discountAmount?: number
    discountPercentage?: number
    totalAmount?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderPackagesCreateManySuburbInput = {
    id?: string
    orderId: string
    orderCode: string
    receiverId?: string | null
    details?: string | null
    paymentBy?: $Enums.paymentBy
    estimatedWeight?: number
    baseWeight?: number
    extraWeight?: number
    valueOfPackage?: number
    itemCost?: number
    deliveryFee?: number
    itemImage?: string | null
    pickupBikerId?: string | null
    deliverBikerId?: string | null
    status?: $Enums.status | null
    secondReceipientName?: string | null
    secondReceipientNumber?: string | null
    reason?: string | null
    pickup_share?: number
    delivery_share?: number
    transit_share?: number
    system_share?: number
    qcs_share?: number
    del_flg?: boolean
    insured?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type sendersCreateManySuburbsInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    confirmed?: boolean
    isDormat?: boolean
    code?: string | null
    expiration?: Date | string | null
    lastLogin?: Date | string
    rewardPoints?: number
    redeemedPoints?: number
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type receiversCreateManySuburbsInput = {
    id?: string
    fullname: string
    telephone: string
    email?: string | null
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    senderId?: string | null
  }

  export type deliveryPricesUpdateWithoutSuburbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: citiesUpdateOneWithoutDestinationdeliveryPricesNestedInput
    cities?: citiesUpdateOneWithoutCitydeliveryPricesNestedInput
  }

  export type deliveryPricesUncheckedUpdateWithoutSuburbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    destinationId?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type deliveryPricesUncheckedUpdateManyWithoutSuburbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    destinationId?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUpdateWithoutSuburbsInput = {
    orderCode?: StringFieldUpdateOperationsInput | string
    orderType?: NullableEnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType | null
    grandAmount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: sendersUpdateOneWithoutOrdersNestedInput
    packages?: orderPackagesUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutSuburbsInput = {
    orderCode?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderType?: NullableEnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType | null
    grandAmount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: orderPackagesUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutSuburbsInput = {
    orderCode?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderType?: NullableEnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType | null
    grandAmount?: FloatFieldUpdateOperationsInput | number
    discountAmount?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderPackagesUpdateWithoutSuburbInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUpdateOneWithoutPackagesNestedInput
    receiver?: receiversUpdateOneWithoutPackagesNestedInput
    pickupBiker?: bikersUpdateOneWithoutPackagesPickupBikersNestedInput
    deliverBiker?: bikersUpdateOneWithoutPackagesDeliveryBikersNestedInput
    packageHistories?: packageHistoriesUpdateManyWithoutPackagesNestedInput
  }

  export type orderPackagesUncheckedUpdateWithoutSuburbInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    pickupBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    deliverBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageHistories?: packageHistoriesUncheckedUpdateManyWithoutPackagesNestedInput
  }

  export type orderPackagesUncheckedUpdateManyWithoutSuburbInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderCode?: StringFieldUpdateOperationsInput | string
    receiverId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    paymentBy?: EnumpaymentByFieldUpdateOperationsInput | $Enums.paymentBy
    estimatedWeight?: FloatFieldUpdateOperationsInput | number
    baseWeight?: IntFieldUpdateOperationsInput | number
    extraWeight?: IntFieldUpdateOperationsInput | number
    valueOfPackage?: FloatFieldUpdateOperationsInput | number
    itemCost?: FloatFieldUpdateOperationsInput | number
    deliveryFee?: FloatFieldUpdateOperationsInput | number
    itemImage?: NullableStringFieldUpdateOperationsInput | string | null
    pickupBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    deliverBikerId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumstatusFieldUpdateOperationsInput | $Enums.status | null
    secondReceipientName?: NullableStringFieldUpdateOperationsInput | string | null
    secondReceipientNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    pickup_share?: FloatFieldUpdateOperationsInput | number
    delivery_share?: FloatFieldUpdateOperationsInput | number
    transit_share?: FloatFieldUpdateOperationsInput | number
    system_share?: FloatFieldUpdateOperationsInput | number
    qcs_share?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    insured?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sendersUpdateWithoutSuburbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    isDormat?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardPoints?: IntFieldUpdateOperationsInput | number
    redeemedPoints?: IntFieldUpdateOperationsInput | number
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivers?: receiversUpdateManyWithoutSendersNestedInput
    orders?: ordersUpdateManyWithoutSenderNestedInput
  }

  export type sendersUncheckedUpdateWithoutSuburbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    isDormat?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardPoints?: IntFieldUpdateOperationsInput | number
    redeemedPoints?: IntFieldUpdateOperationsInput | number
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivers?: receiversUncheckedUpdateManyWithoutSendersNestedInput
    orders?: ordersUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type sendersUncheckedUpdateManyWithoutSuburbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    isDormat?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardPoints?: IntFieldUpdateOperationsInput | number
    redeemedPoints?: IntFieldUpdateOperationsInput | number
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type receiversUpdateWithoutSuburbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senders?: sendersUpdateOneWithoutReceiversNestedInput
    packages?: orderPackagesUpdateManyWithoutReceiverNestedInput
  }

  export type receiversUncheckedUpdateWithoutSuburbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
    packages?: orderPackagesUncheckedUpdateManyWithoutReceiverNestedInput
  }

  export type receiversUncheckedUpdateManyWithoutSuburbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type suburbsCreateManyCitiesInput = {
    id?: string
    suburb_name: string
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersCreateManyCitiesInput = {
    id?: string
    fullname: string
    email: string
    telephone?: string | null
    password: string
    code?: string | null
    expiration?: Date | string | null
    role_name?: string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type bikersCreateManyCitiesInput = {
    id?: string
    fullname: string
    email?: string | null
    telephone: string
    password: string
    code?: string | null
    expiration?: Date | string | null
    confirmed?: boolean
    del_flg?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type deliveryPricesCreateManyCitiesInput = {
    id?: string
    destinationId?: string | null
    baseWeightPrice?: number
    extraWeightPrice?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbsId?: string | null
  }

  export type deliveryPricesCreateManyDestinationInput = {
    id?: string
    cityId?: string | null
    baseWeightPrice?: number
    extraWeightPrice?: number
    del_flg?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    suburbsId?: string | null
  }

  export type suburbsUpdateWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryPrices?: deliveryPricesUpdateManyWithoutSuburbsNestedInput
    orders?: ordersUpdateManyWithoutSuburbsNestedInput
    orderPackages?: orderPackagesUpdateManyWithoutSuburbNestedInput
    senders?: sendersUpdateManyWithoutSuburbsNestedInput
    receivers?: receiversUpdateManyWithoutSuburbsNestedInput
  }

  export type suburbsUncheckedUpdateWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryPrices?: deliveryPricesUncheckedUpdateManyWithoutSuburbsNestedInput
    orders?: ordersUncheckedUpdateManyWithoutSuburbsNestedInput
    orderPackages?: orderPackagesUncheckedUpdateManyWithoutSuburbNestedInput
    senders?: sendersUncheckedUpdateManyWithoutSuburbsNestedInput
    receivers?: receiversUncheckedUpdateManyWithoutSuburbsNestedInput
  }

  export type suburbsUncheckedUpdateManyWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    suburb_name?: StringFieldUpdateOperationsInput | string
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUpdateWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role_name?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type bikersUpdateWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packagesPickupBikers?: orderPackagesUpdateManyWithoutPickupBikerNestedInput
    packagesDeliveryBikers?: orderPackagesUpdateManyWithoutDeliverBikerNestedInput
  }

  export type bikersUncheckedUpdateWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packagesPickupBikers?: orderPackagesUncheckedUpdateManyWithoutPickupBikerNestedInput
    packagesDeliveryBikers?: orderPackagesUncheckedUpdateManyWithoutDeliverBikerNestedInput
  }

  export type bikersUncheckedUpdateManyWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    expiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    del_flg?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type deliveryPricesUpdateWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    destination?: citiesUpdateOneWithoutDestinationdeliveryPricesNestedInput
    suburbs?: suburbsUpdateOneWithoutDeliveryPricesNestedInput
  }

  export type deliveryPricesUncheckedUpdateWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    destinationId?: NullableStringFieldUpdateOperationsInput | string | null
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type deliveryPricesUncheckedUpdateManyWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    destinationId?: NullableStringFieldUpdateOperationsInput | string | null
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type deliveryPricesUpdateWithoutDestinationInput = {
    id?: StringFieldUpdateOperationsInput | string
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: citiesUpdateOneWithoutCitydeliveryPricesNestedInput
    suburbs?: suburbsUpdateOneWithoutDeliveryPricesNestedInput
  }

  export type deliveryPricesUncheckedUpdateWithoutDestinationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type deliveryPricesUncheckedUpdateManyWithoutDestinationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cityId?: NullableStringFieldUpdateOperationsInput | string | null
    baseWeightPrice?: FloatFieldUpdateOperationsInput | number
    extraWeightPrice?: FloatFieldUpdateOperationsInput | number
    del_flg?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suburbsId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BikersCountOutputTypeDefaultArgs instead
     */
    export type BikersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BikersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SendersCountOutputTypeDefaultArgs instead
     */
    export type SendersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SendersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReceiversCountOutputTypeDefaultArgs instead
     */
    export type ReceiversCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReceiversCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrdersCountOutputTypeDefaultArgs instead
     */
    export type OrdersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrdersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderPackagesCountOutputTypeDefaultArgs instead
     */
    export type OrderPackagesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderPackagesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SuburbsCountOutputTypeDefaultArgs instead
     */
    export type SuburbsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SuburbsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CitiesCountOutputTypeDefaultArgs instead
     */
    export type CitiesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CitiesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use paymentsDefaultArgs instead
     */
    export type paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = paymentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use bikersDefaultArgs instead
     */
    export type bikersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = bikersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use sendersDefaultArgs instead
     */
    export type sendersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = sendersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use receiversDefaultArgs instead
     */
    export type receiversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = receiversDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ordersDefaultArgs instead
     */
    export type ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ordersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use orderPackagesDefaultArgs instead
     */
    export type orderPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = orderPackagesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use packageHistoriesDefaultArgs instead
     */
    export type packageHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = packageHistoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use suburbsDefaultArgs instead
     */
    export type suburbsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = suburbsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use citiesDefaultArgs instead
     */
    export type citiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = citiesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use deliveryPricesDefaultArgs instead
     */
    export type deliveryPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = deliveryPricesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}